<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="548" failures="68" errors="0" time="7.280188124">
    <testsuite name="src/shared/domain/__tests__/DomainEvents.test.ts" timestamp="2025-08-09T13:38:10.814Z" hostname="MacBook-Egor.local" tests="17" failures="0" errors="0" skipped="0" time="0.013232959">
        <testcase classname="src/shared/domain/__tests__/DomainEvents.test.ts" name="Domain Events System &gt; DomainEvent base class &gt; should create event with required properties" time="0.001553041">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/DomainEvents.test.ts" name="Domain Events System &gt; DomainEvent base class &gt; should generate unique event IDs" time="0.000190625">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/DomainEvents.test.ts" name="Domain Events System &gt; TaskCreatedEvent &gt; should create event with task data" time="0.000228625">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/DomainEvents.test.ts" name="Domain Events System &gt; TaskCompletedEvent &gt; should create event with completion data" time="0.000189792">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/DomainEvents.test.ts" name="Domain Events System &gt; TaskCategoryChangedEvent &gt; should create event with category change data" time="0.000263666">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/DomainEvents.test.ts" name="Domain Events System &gt; TaskReviewedEvent &gt; should create event with review data" time="0.000285458">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/DomainEvents.test.ts" name="Domain Events System &gt; InMemoryEventBus &gt; publish &gt; should publish single event to subscribed handlers" time="0.003203">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/DomainEvents.test.ts" name="Domain Events System &gt; InMemoryEventBus &gt; publish &gt; should not call handlers for different event types" time="0.002888208">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/DomainEvents.test.ts" name="Domain Events System &gt; InMemoryEventBus &gt; publishAll &gt; should publish multiple events to appropriate handlers" time="0.000762209">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/DomainEvents.test.ts" name="Domain Events System &gt; InMemoryEventBus &gt; publishAll &gt; should handle empty event array" time="0.000114042">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/DomainEvents.test.ts" name="Domain Events System &gt; InMemoryEventBus &gt; subscribe &gt; should subscribe to specific event type" time="0.000190209">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/DomainEvents.test.ts" name="Domain Events System &gt; InMemoryEventBus &gt; subscribe &gt; should support multiple handlers for same event type" time="0.000334958">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/DomainEvents.test.ts" name="Domain Events System &gt; InMemoryEventBus &gt; subscribe &gt; should handle async handlers" time="0.000396">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/DomainEvents.test.ts" name="Domain Events System &gt; InMemoryEventBus &gt; subscribe &gt; should handle handler errors gracefully" time="0.000884541">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/DomainEvents.test.ts" name="Domain Events System &gt; InMemoryEventBus &gt; subscribeToAll &gt; should subscribe to all event types" time="0.000294458">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/DomainEvents.test.ts" name="Domain Events System &gt; InMemoryEventBus &gt; clear &gt; should clear all subscriptions" time="0.000144583">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/DomainEvents.test.ts" name="Domain Events System &gt; InMemoryEventBus &gt; unsubscribe &gt; should remove specific handler when unsubscribed" time="0.000120333">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/domain/__tests__/Result.test.ts" timestamp="2025-08-09T13:38:10.817Z" hostname="MacBook-Egor.local" tests="12" failures="0" errors="0" skipped="0" time="0.003202375">
        <testcase classname="src/shared/domain/__tests__/Result.test.ts" name="Result &gt; factory methods &gt; should create successful result" time="0.000824167">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Result.test.ts" name="Result &gt; factory methods &gt; should create failure result" time="0.000113417">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Result.test.ts" name="Result &gt; type guards &gt; should identify successful results" time="0.000089333">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Result.test.ts" name="Result &gt; type guards &gt; should identify failure results" time="0.000066833">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Result.test.ts" name="Result &gt; map operations &gt; should map successful values" time="0.000144875">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Result.test.ts" name="Result &gt; map operations &gt; should not map failure values" time="0.000075333">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Result.test.ts" name="Result &gt; map operations &gt; should map error values" time="0.000066291">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Result.test.ts" name="Result &gt; flatMap &gt; should chain successful operations" time="0.000066416">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Result.test.ts" name="Result &gt; flatMap &gt; should not chain on failure" time="0.00021525">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Result.test.ts" name="Result &gt; unwrap operations &gt; should unwrap successful values" time="0.000066416">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Result.test.ts" name="Result &gt; unwrap operations &gt; should throw on unwrap failure" time="0.00032875">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Result.test.ts" name="Result &gt; unwrap operations &gt; should return value or default" time="0.000067625">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/domain/__tests__/Task.test.ts" timestamp="2025-08-09T13:38:10.818Z" hostname="MacBook-Egor.local" tests="33" failures="0" errors="0" skipped="0" time="0.0638185">
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; constructor &gt; should create task with required fields" time="0.00127525">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; constructor &gt; should set inboxEnteredAt for INBOX tasks" time="0.000125125">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; constructor &gt; should not set inboxEnteredAt for non-INBOX tasks" time="0.000077167">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; constructor &gt; should mark non-INBOX tasks as reviewed" time="0.00006075">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; constructor &gt; should not mark INBOX tasks as reviewed initially" time="0.000118417">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; create factory method &gt; should create task and emit creation event" time="0.000783916">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; create factory method &gt; should set inboxEnteredAt for INBOX tasks" time="0.000077833">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; changeCategory &gt; should change category and emit category changed event" time="0.00026325">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; changeCategory &gt; should emit review event when moving from INBOX for first time" time="0.000256875">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; changeCategory &gt; should not emit review event when already reviewed" time="0.00033875">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; changeCategory &gt; should return empty array when category is the same" time="0.000498125">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; changeCategory &gt; should throw error when task is deleted" time="0.000245417">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; changeCategory &gt; should update updatedAt timestamp" time="0.050818916">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; complete &gt; should complete task and emit completion event" time="0.000349292">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; complete &gt; should return empty array when already completed" time="0.000094792">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; complete &gt; should throw error when task is deleted" time="0.000068958">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; complete &gt; should update updatedAt timestamp" time="0.001949667">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; revertCompletion &gt; should revert completion and emit revert event" time="0.000230875">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; revertCompletion &gt; should return empty array when already active" time="0.000232708">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; revertCompletion &gt; should throw error when task is deleted" time="0.000106167">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; changeTitle &gt; should change title and emit title changed event" time="0.000283125">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; changeTitle &gt; should return empty array when title is the same" time="0.000079542">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; changeTitle &gt; should throw error when task is deleted" time="0.000062084">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; isOverdue &gt; should return true for overdue INBOX tasks" time="0.000135959">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; isOverdue &gt; should return false for non-overdue INBOX tasks" time="0.000053">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; isOverdue &gt; should return false for non-INBOX tasks" time="0.000039833">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; isOverdue &gt; should return false for completed INBOX tasks" time="0.000038583">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; isOverdue &gt; should return false when inboxEnteredAt is not set" time="0.000040375">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; softDelete &gt; should soft delete task and emit deletion event" time="0.000119125">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; softDelete &gt; should return empty array when already deleted" time="0.000114334">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; touch &gt; should update updatedAt timestamp" time="0.002839">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; copyWith &gt; should create copy with updated fields" time="0.000223334">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/Task.test.ts" name="Task Entity &gt; copyWith &gt; should preserve original fields when not updated" time="0.000099792">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/domain/__tests__/ValueObject.test.ts" timestamp="2025-08-09T13:38:10.826Z" hostname="MacBook-Egor.local" tests="6" failures="0" errors="0" skipped="0" time="0.01781075">
        <testcase classname="src/shared/domain/__tests__/ValueObject.test.ts" name="ValueObject &gt; construction and validation &gt; should create a valid value object" time="0.003997209">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/ValueObject.test.ts" name="ValueObject &gt; construction and validation &gt; should throw error for invalid value" time="0.007779833">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/ValueObject.test.ts" name="ValueObject &gt; equality &gt; should be equal when values are the same" time="0.00020825">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/ValueObject.test.ts" name="ValueObject &gt; equality &gt; should not be equal when values are different" time="0.000069583">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/ValueObject.test.ts" name="ValueObject &gt; equality &gt; should not be equal when types are different" time="0.000133667">
        </testcase>
        <testcase classname="src/shared/domain/__tests__/ValueObject.test.ts" name="ValueObject &gt; toString &gt; should return string representation of value" time="0.000087084">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/application/use-cases/__tests__/AddTaskToTodayUseCase.test.ts" timestamp="2025-08-09T13:38:10.827Z" hostname="MacBook-Egor.local" tests="6" failures="0" errors="0" skipped="0" time="0.00456275">
        <testcase classname="src/shared/application/use-cases/__tests__/AddTaskToTodayUseCase.test.ts" name="AddTaskToTodayUseCase &gt; execute &gt; should add task to today successfully" time="0.002354916">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/AddTaskToTodayUseCase.test.ts" name="AddTaskToTodayUseCase &gt; execute &gt; should add task to specific date successfully" time="0.000380666">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/AddTaskToTodayUseCase.test.ts" name="AddTaskToTodayUseCase &gt; execute &gt; should fail with invalid task ID" time="0.000223166">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/AddTaskToTodayUseCase.test.ts" name="AddTaskToTodayUseCase &gt; execute &gt; should fail when task not found" time="0.0003385">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/AddTaskToTodayUseCase.test.ts" name="AddTaskToTodayUseCase &gt; execute &gt; should fail with invalid date format" time="0.00023725">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/AddTaskToTodayUseCase.test.ts" name="AddTaskToTodayUseCase &gt; execute &gt; should handle repository failure" time="0.000293084">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/application/use-cases/__tests__/CompleteTaskUseCase.test.ts" timestamp="2025-08-09T13:38:10.827Z" hostname="MacBook-Egor.local" tests="7" failures="3" errors="0" skipped="0" time="0.014991375">
        <testcase classname="src/shared/application/use-cases/__tests__/CompleteTaskUseCase.test.ts" name="CompleteTaskUseCase &gt; execute &gt; should complete a task successfully" time="0.005315375">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CompleteTaskUseCase.test.ts" name="CompleteTaskUseCase &gt; execute &gt; should fail with invalid task ID" time="0.000943292">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CompleteTaskUseCase.test.ts" name="CompleteTaskUseCase &gt; execute &gt; should fail when task not found" time="0.000310625">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CompleteTaskUseCase.test.ts" name="CompleteTaskUseCase &gt; execute &gt; should handle already completed task gracefully" time="0.003250375">
            <failure message="Cannot read properties of undefined (reading &apos;0&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;0&apos;)
 ❯ src/shared/application/use-cases/__tests__/CompleteTaskUseCase.test.ts:185:17
            </failure>
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CompleteTaskUseCase.test.ts" name="CompleteTaskUseCase &gt; execute &gt; should handle repository save failure" time="0.002967167">
            <failure message="expected &apos;TRANSACTION_FAILED&apos; to be &apos;COMPLETION_FAILED&apos; // Object.is equality" type="AssertionError">
AssertionError: expected &apos;TRANSACTION_FAILED&apos; to be &apos;COMPLETION_FAILED&apos; // Object.is equality

Expected: &quot;COMPLETION_FAILED&quot;
Received: &quot;TRANSACTION_FAILED&quot;

 ❯ src/shared/application/use-cases/__tests__/CompleteTaskUseCase.test.ts:215:35
            </failure>
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CompleteTaskUseCase.test.ts" name="CompleteTaskUseCase &gt; execute &gt; should handle event bus failure" time="0.000735667">
            <failure message="expected &apos;TRANSACTION_FAILED&apos; to be &apos;COMPLETION_FAILED&apos; // Object.is equality" type="AssertionError">
AssertionError: expected &apos;TRANSACTION_FAILED&apos; to be &apos;COMPLETION_FAILED&apos; // Object.is equality

Expected: &quot;COMPLETION_FAILED&quot;
Received: &quot;TRANSACTION_FAILED&quot;

 ❯ src/shared/application/use-cases/__tests__/CompleteTaskUseCase.test.ts:250:35
            </failure>
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CompleteTaskUseCase.test.ts" name="CompleteTaskUseCase &gt; execute &gt; should complete task with correct category at completion" time="0.000201958">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/application/use-cases/__tests__/CreateSystemLogUseCase.test.ts" timestamp="2025-08-09T13:38:10.832Z" hostname="MacBook-Egor.local" tests="11" failures="0" errors="0" skipped="0" time="0.005806625">
        <testcase classname="src/shared/application/use-cases/__tests__/CreateSystemLogUseCase.test.ts" name="CreateSystemLogUseCase &gt; execute &gt; should create system log with auto-generated message" time="0.002841042">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CreateSystemLogUseCase.test.ts" name="CreateSystemLogUseCase &gt; execute &gt; should create system log with custom message" time="0.000392042">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CreateSystemLogUseCase.test.ts" name="CreateSystemLogUseCase &gt; execute &gt; should generate correct message for category change" time="0.000193416">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CreateSystemLogUseCase.test.ts" name="CreateSystemLogUseCase &gt; execute &gt; should generate correct message for task completion" time="0.000204833">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CreateSystemLogUseCase.test.ts" name="CreateSystemLogUseCase &gt; execute &gt; should generate correct message for title change" time="0.000207167">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CreateSystemLogUseCase.test.ts" name="CreateSystemLogUseCase &gt; execute &gt; should generate correct message for overdue task" time="0.000194375">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CreateSystemLogUseCase.test.ts" name="CreateSystemLogUseCase &gt; execute &gt; should generate correct message for conflict resolution" time="0.000111083">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CreateSystemLogUseCase.test.ts" name="CreateSystemLogUseCase &gt; execute &gt; should fail with invalid task ID" time="0.000174208">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CreateSystemLogUseCase.test.ts" name="CreateSystemLogUseCase &gt; execute &gt; should handle database failure" time="0.000333375">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CreateSystemLogUseCase.test.ts" name="CreateSystemLogUseCase &gt; execute &gt; should handle unknown action gracefully" time="0.000136958">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CreateSystemLogUseCase.test.ts" name="CreateSystemLogUseCase &gt; execute &gt; should include createdAt timestamp" time="0.000232042">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/application/use-cases/__tests__/CreateTaskUseCase.test.ts" timestamp="2025-08-09T13:38:10.833Z" hostname="MacBook-Egor.local" tests="6" failures="1" errors="0" skipped="0" time="0.062535458">
        <testcase classname="src/shared/application/use-cases/__tests__/CreateTaskUseCase.test.ts" name="CreateTaskUseCase &gt; execute &gt; should create a task successfully" time="0.015253375">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CreateTaskUseCase.test.ts" name="CreateTaskUseCase &gt; execute &gt; should fail with empty title" time="0.021685333">
            <failure message="expected &apos;Title cannot be empty&apos; to contain &apos;title cannot be empty&apos;" type="AssertionError">
AssertionError: expected &apos;Title cannot be empty&apos; to contain &apos;title cannot be empty&apos;

Expected: &quot;title cannot be empty&quot;
Received: &quot;Title cannot be empty&quot;

 ❯ src/shared/application/use-cases/__tests__/CreateTaskUseCase.test.ts:114:38
            </failure>
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CreateTaskUseCase.test.ts" name="CreateTaskUseCase &gt; execute &gt; should fail with whitespace-only title" time="0.000329375">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CreateTaskUseCase.test.ts" name="CreateTaskUseCase &gt; execute &gt; should handle repository save failure" time="0.000381209">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CreateTaskUseCase.test.ts" name="CreateTaskUseCase &gt; execute &gt; should handle event bus failure" time="0.000642834">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CreateTaskUseCase.test.ts" name="CreateTaskUseCase &gt; execute &gt; should create INBOX task with correct category" time="0.000173458">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/application/use-cases/__tests__/CreateUserLogUseCase.test.ts" timestamp="2025-08-09T13:38:10.834Z" hostname="MacBook-Egor.local" tests="11" failures="0" errors="0" skipped="0" time="0.007407083">
        <testcase classname="src/shared/application/use-cases/__tests__/CreateUserLogUseCase.test.ts" name="CreateUserLogUseCase &gt; execute &gt; should create user log with task ID" time="0.0039735">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CreateUserLogUseCase.test.ts" name="CreateUserLogUseCase &gt; execute &gt; should create custom log without task ID" time="0.000386333">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CreateUserLogUseCase.test.ts" name="CreateUserLogUseCase &gt; execute &gt; should trim whitespace from message" time="0.000187708">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CreateUserLogUseCase.test.ts" name="CreateUserLogUseCase &gt; execute &gt; should fail with empty message" time="0.000237709">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CreateUserLogUseCase.test.ts" name="CreateUserLogUseCase &gt; execute &gt; should fail with whitespace-only message" time="0.000240375">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CreateUserLogUseCase.test.ts" name="CreateUserLogUseCase &gt; execute &gt; should fail with message exceeding 500 characters" time="0.000125333">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CreateUserLogUseCase.test.ts" name="CreateUserLogUseCase &gt; execute &gt; should accept message with exactly 500 characters" time="0.000156416">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CreateUserLogUseCase.test.ts" name="CreateUserLogUseCase &gt; execute &gt; should fail with invalid task ID" time="0.000148167">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CreateUserLogUseCase.test.ts" name="CreateUserLogUseCase &gt; execute &gt; should handle database failure" time="0.000403167">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CreateUserLogUseCase.test.ts" name="CreateUserLogUseCase &gt; execute &gt; should include createdAt timestamp" time="0.000176">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/CreateUserLogUseCase.test.ts" name="CreateUserLogUseCase &gt; getMaxMessageLength &gt; should return correct maximum message length" time="0.000048667">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/application/use-cases/__tests__/GetTaskLogsUseCase.test.ts" timestamp="2025-08-09T13:38:10.835Z" hostname="MacBook-Egor.local" tests="14" failures="0" errors="0" skipped="0" time="0.009351667">
        <testcase classname="src/shared/application/use-cases/__tests__/GetTaskLogsUseCase.test.ts" name="GetTaskLogsUseCase &gt; execute &gt; should get all logs with default pagination" time="0.002426709">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/GetTaskLogsUseCase.test.ts" name="GetTaskLogsUseCase &gt; execute &gt; should filter logs by task ID" time="0.000606042">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/GetTaskLogsUseCase.test.ts" name="GetTaskLogsUseCase &gt; execute &gt; should filter logs by type" time="0.000332416">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/GetTaskLogsUseCase.test.ts" name="GetTaskLogsUseCase &gt; execute &gt; should handle pagination correctly" time="0.001247667">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/GetTaskLogsUseCase.test.ts" name="GetTaskLogsUseCase &gt; execute &gt; should handle ascending sort order" time="0.000649125">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/GetTaskLogsUseCase.test.ts" name="GetTaskLogsUseCase &gt; execute &gt; should limit page size to maximum" time="0.0002245">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/GetTaskLogsUseCase.test.ts" name="GetTaskLogsUseCase &gt; execute &gt; should handle minimum page and page size" time="0.000321125">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/GetTaskLogsUseCase.test.ts" name="GetTaskLogsUseCase &gt; execute &gt; should fail with invalid task ID" time="0.000219542">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/GetTaskLogsUseCase.test.ts" name="GetTaskLogsUseCase &gt; execute &gt; should handle database failure" time="0.000432417">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/GetTaskLogsUseCase.test.ts" name="GetTaskLogsUseCase &gt; execute &gt; should convert database records to log entries correctly" time="0.000390458">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/GetTaskLogsUseCase.test.ts" name="GetTaskLogsUseCase &gt; getLogsForTask &gt; should get logs for specific task with default settings" time="0.000205125">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/GetTaskLogsUseCase.test.ts" name="GetTaskLogsUseCase &gt; getRecentLogs &gt; should get recent logs with default limit" time="0.000205042">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/GetTaskLogsUseCase.test.ts" name="GetTaskLogsUseCase &gt; getRecentLogs &gt; should respect custom limit" time="0.000144584">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/GetTaskLogsUseCase.test.ts" name="GetTaskLogsUseCase &gt; getRecentLogs &gt; should limit to maximum page size" time="0.00012275">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/application/use-cases/__tests__/GetTodayTasksUseCase.test.ts" timestamp="2025-08-09T13:38:10.837Z" hostname="MacBook-Egor.local" tests="8" failures="0" errors="0" skipped="0" time="0.013234667">
        <testcase classname="src/shared/application/use-cases/__tests__/GetTodayTasksUseCase.test.ts" name="GetTodayTasksUseCase &gt; execute &gt; should get today&apos;s tasks successfully" time="0.008953417">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/GetTodayTasksUseCase.test.ts" name="GetTodayTasksUseCase &gt; execute &gt; should get tasks for specific date" time="0.00039">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/GetTodayTasksUseCase.test.ts" name="GetTodayTasksUseCase &gt; execute &gt; should filter out completed tasks when requested" time="0.001130917">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/GetTodayTasksUseCase.test.ts" name="GetTodayTasksUseCase &gt; execute &gt; should handle deleted tasks gracefully" time="0.000591333">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/GetTodayTasksUseCase.test.ts" name="GetTodayTasksUseCase &gt; execute &gt; should handle missing tasks gracefully" time="0.00025175">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/GetTodayTasksUseCase.test.ts" name="GetTodayTasksUseCase &gt; execute &gt; should return empty result when no tasks selected" time="0.000197125">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/GetTodayTasksUseCase.test.ts" name="GetTodayTasksUseCase &gt; execute &gt; should fail with invalid date format" time="0.000138125">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/GetTodayTasksUseCase.test.ts" name="GetTodayTasksUseCase &gt; execute &gt; should handle repository failure" time="0.000243375">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/application/use-cases/__tests__/RemoveTaskFromTodayUseCase.test.ts" timestamp="2025-08-09T13:38:10.837Z" hostname="MacBook-Egor.local" tests="6" failures="0" errors="0" skipped="0" time="0.060893083">
        <testcase classname="src/shared/application/use-cases/__tests__/RemoveTaskFromTodayUseCase.test.ts" name="RemoveTaskFromTodayUseCase &gt; execute &gt; should remove task from today successfully" time="0.02712275">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/RemoveTaskFromTodayUseCase.test.ts" name="RemoveTaskFromTodayUseCase &gt; execute &gt; should remove task from specific date successfully" time="0.004449334">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/RemoveTaskFromTodayUseCase.test.ts" name="RemoveTaskFromTodayUseCase &gt; execute &gt; should fail with invalid task ID" time="0.003766334">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/RemoveTaskFromTodayUseCase.test.ts" name="RemoveTaskFromTodayUseCase &gt; execute &gt; should fail with invalid date format" time="0.006254667">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/RemoveTaskFromTodayUseCase.test.ts" name="RemoveTaskFromTodayUseCase &gt; execute &gt; should handle repository failure" time="0.00121075">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/RemoveTaskFromTodayUseCase.test.ts" name="RemoveTaskFromTodayUseCase &gt; execute &gt; should handle non-existent task gracefully" time="0.000399875">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/application/use-cases/__tests__/UpdateTaskUseCase.test.ts" timestamp="2025-08-09T13:38:10.838Z" hostname="MacBook-Egor.local" tests="9" failures="1" errors="0" skipped="0" time="0.038518458">
        <testcase classname="src/shared/application/use-cases/__tests__/UpdateTaskUseCase.test.ts" name="UpdateTaskUseCase &gt; execute &gt; should update task title successfully" time="0.007333334">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/UpdateTaskUseCase.test.ts" name="UpdateTaskUseCase &gt; execute &gt; should update task category successfully" time="0.000592375">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/UpdateTaskUseCase.test.ts" name="UpdateTaskUseCase &gt; execute &gt; should update both title and category successfully" time="0.0004235">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/UpdateTaskUseCase.test.ts" name="UpdateTaskUseCase &gt; execute &gt; should fail with invalid task ID" time="0.000225209">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/UpdateTaskUseCase.test.ts" name="UpdateTaskUseCase &gt; execute &gt; should fail when task not found" time="0.000301292">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/UpdateTaskUseCase.test.ts" name="UpdateTaskUseCase &gt; execute &gt; should fail with empty title" time="0.000437417">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/UpdateTaskUseCase.test.ts" name="UpdateTaskUseCase &gt; execute &gt; should handle no changes gracefully" time="0.00075475">
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/UpdateTaskUseCase.test.ts" name="UpdateTaskUseCase &gt; execute &gt; should handle repository save failure" time="0.024937709">
            <failure message="expected &apos;TRANSACTION_FAILED&apos; to be &apos;UPDATE_FAILED&apos; // Object.is equality" type="AssertionError">
AssertionError: expected &apos;TRANSACTION_FAILED&apos; to be &apos;UPDATE_FAILED&apos; // Object.is equality

Expected: &quot;UPDATE_FAILED&quot;
Received: &quot;TRANSACTION_FAILED&quot;

 ❯ src/shared/application/use-cases/__tests__/UpdateTaskUseCase.test.ts:329:35
            </failure>
        </testcase>
        <testcase classname="src/shared/application/use-cases/__tests__/UpdateTaskUseCase.test.ts" name="UpdateTaskUseCase &gt; execute &gt; should handle INBOX to other category transition with review event" time="0.001864125">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/domain/events/__tests__/PersistentEventBus.test.ts" timestamp="2025-08-09T13:38:10.839Z" hostname="MacBook-Egor.local" tests="25" failures="7" errors="0" skipped="0" time="3.910695667">
        <testcase classname="src/shared/domain/events/__tests__/PersistentEventBus.test.ts" name="PersistentEventBus &gt; Event Publishing and Storage &gt; should store events in database when published" time="0.1623585">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/domain/events/__tests__/PersistentEventBus.test.ts" name="PersistentEventBus &gt; Event Publishing and Storage &gt; should handle empty event arrays" time="0.13337725">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/domain/events/__tests__/PersistentEventBus.test.ts" name="PersistentEventBus &gt; Event Publishing and Storage &gt; should store multiple events with correct ordering" time="0.135215958">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/domain/events/__tests__/PersistentEventBus.test.ts" name="PersistentEventBus &gt; Event Handler Registration &gt; should register persistent handlers for specific event types" time="0.134267167">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/domain/events/__tests__/PersistentEventBus.test.ts" name="PersistentEventBus &gt; Event Handler Registration &gt; should register global persistent handlers" time="0.131134375">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/domain/events/__tests__/PersistentEventBus.test.ts" name="PersistentEventBus &gt; Event Handler Registration &gt; should unsubscribe handlers correctly" time="0.121793">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/domain/events/__tests__/PersistentEventBus.test.ts" name="PersistentEventBus &gt; Event Processing &gt; should process events with registered handlers" time="0.176270833">
            <system-out>
Database initialized successfully

            </system-out>
            <failure message="expected [ { …(4) }, { …(4) } ] to have a length of 1 but got 2" type="AssertionError">
AssertionError: expected [ { …(4) }, { …(4) } ] to have a length of 1 but got 2

- Expected
+ Received

- 1
+ 2

 ❯ src/shared/domain/events/__tests__/PersistentEventBus.test.ts:177:38
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/events/__tests__/PersistentEventBus.test.ts" name="PersistentEventBus &gt; Event Processing &gt; should maintain per-aggregate ordering" time="0.214750834">
            <system-out>
Database initialized successfully

            </system-out>
            <failure message="expected [ { …(4) }, { …(4) }, { …(4) }, …(1) ] to have a length of 2 but got 4" type="AssertionError">
AssertionError: expected [ { …(4) }, { …(4) }, { …(4) }, …(1) ] to have a length of 2 but got 4

- Expected
+ Received

- 2
+ 4

 ❯ src/shared/domain/events/__tests__/PersistentEventBus.test.ts:208:43
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/events/__tests__/PersistentEventBus.test.ts" name="PersistentEventBus &gt; Event Processing &gt; should process events from different aggregates independently" time="0.174008584">
            <system-out>
Database initialized successfully

            </system-out>
            <failure message="expected [ { …(4) }, { …(4) }, { …(4) }, …(1) ] to have a length of 2 but got 4" type="AssertionError">
AssertionError: expected [ { …(4) }, { …(4) }, { …(4) }, …(1) ] to have a length of 2 but got 4

- Expected
+ Received

- 2
+ 4

 ❯ src/shared/domain/events/__tests__/PersistentEventBus.test.ts:230:43
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/events/__tests__/PersistentEventBus.test.ts" name="PersistentEventBus &gt; Idempotency &gt; should not process the same event twice for the same handler" time="0.165574125">
            <system-out>
Database initialized successfully

            </system-out>
            <failure message="expected [ { …(4) }, { …(4) } ] to have a length of 1 but got 2" type="AssertionError">
AssertionError: expected [ { …(4) }, { …(4) } ] to have a length of 1 but got 2

- Expected
+ Received

- 1
+ 2

 ❯ src/shared/domain/events/__tests__/PersistentEventBus.test.ts:252:38
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/events/__tests__/PersistentEventBus.test.ts" name="PersistentEventBus &gt; Idempotency &gt; should allow different handlers to process the same event" time="0.153310583">
            <system-out>
Database initialized successfully

            </system-out>
            <failure message="expected [ { …(4) }, { …(4) } ] to have a length of 1 but got 2" type="AssertionError">
AssertionError: expected [ { …(4) }, { …(4) } ] to have a length of 1 but got 2

- Expected
+ Received

- 1
+ 2

 ❯ src/shared/domain/events/__tests__/PersistentEventBus.test.ts:278:38
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/events/__tests__/PersistentEventBus.test.ts" name="PersistentEventBus &gt; Retry Logic &gt; should retry failed events with exponential backoff" time="0.165033417">
            <system-out>
Database initialized successfully

            </system-out>
            <failure message="expected [ { …(4) } ] to have a length of +0 but got 1" type="AssertionError">
AssertionError: expected [ { …(4) } ] to have a length of +0 but got 1

- Expected
+ Received

- 0
+ 1

 ❯ src/shared/domain/events/__tests__/PersistentEventBus.test.ts:318:38
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/events/__tests__/PersistentEventBus.test.ts" name="PersistentEventBus &gt; Retry Logic &gt; should move events to dead letter queue after max retries" time="0.423369917">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/domain/events/__tests__/PersistentEventBus.test.ts" name="PersistentEventBus &gt; Retry Logic &gt; should calculate exponential backoff with jitter correctly" time="0.11729025">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/domain/events/__tests__/PersistentEventBus.test.ts" name="PersistentEventBus &gt; Processing Loop &gt; should start and stop processing loop" time="0.120044042">
            <system-out>
Database initialized successfully

Event processing loop started
Event processing loop stopped

            </system-out>
        </testcase>
        <testcase classname="src/shared/domain/events/__tests__/PersistentEventBus.test.ts" name="PersistentEventBus &gt; Processing Loop &gt; should not start multiple processing loops" time="0.127962083">
            <system-out>
Database initialized successfully

Event processing loop started
Event processing loop stopped

            </system-out>
        </testcase>
        <testcase classname="src/shared/domain/events/__tests__/PersistentEventBus.test.ts" name="PersistentEventBus &gt; Processing Loop &gt; should prevent concurrent processing" time="0.162433583">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/domain/events/__tests__/PersistentEventBus.test.ts" name="PersistentEventBus &gt; Processing Statistics &gt; should return correct processing statistics" time="0.139864666">
            <system-out>
Database initialized successfully

            </system-out>
            <failure message="expected +0 to be 1 // Object.is equality" type="AssertionError">
AssertionError: expected +0 to be 1 // Object.is equality

- Expected
+ Received

- 1
+ 0

 ❯ src/shared/domain/events/__tests__/PersistentEventBus.test.ts:474:35
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/events/__tests__/PersistentEventBus.test.ts" name="PersistentEventBus &gt; Locking Mechanism &gt; should use Web Locks API when available" time="0.130997541">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/domain/events/__tests__/PersistentEventBus.test.ts" name="PersistentEventBus &gt; Locking Mechanism &gt; should fallback to database locking when Web Locks API unavailable" time="0.146467875">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/domain/events/__tests__/PersistentEventBus.test.ts" name="PersistentEventBus &gt; Locking Mechanism &gt; should handle lock conflicts in database locking" time="0.128716084">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/domain/events/__tests__/PersistentEventBus.test.ts" name="PersistentEventBus &gt; Locking Mechanism &gt; should clean up expired locks" time="0.149807625">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/domain/events/__tests__/PersistentEventBus.test.ts" name="PersistentEventBus &gt; Event Deserialization &gt; should deserialize events correctly" time="0.14047625">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/domain/events/__tests__/PersistentEventBus.test.ts" name="PersistentEventBus &gt; Aggregate Extraction &gt; should extract aggregate ID from task events" time="0.127651084">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/domain/events/__tests__/PersistentEventBus.test.ts" name="PersistentEventBus &gt; Aggregate Extraction &gt; should handle unknown aggregate types" time="0.124039583">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/shared/domain/value-objects/__tests__/DateOnly.test.ts" timestamp="2025-08-09T13:38:10.853Z" hostname="MacBook-Egor.local" tests="23" failures="15" errors="0" skipped="0" time="0.016605875">
        <testcase classname="src/shared/domain/value-objects/__tests__/DateOnly.test.ts" name="DateOnly &gt; constructor &gt; should create DateOnly with valid date string" time="0.001713417">
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/DateOnly.test.ts" name="DateOnly &gt; constructor &gt; should throw InvalidDateOnlyError for invalid format" time="0.003982333">
            <failure message="[vitest] No &quot;InvalidDateOnlyError&quot; export is defined on the &quot;../shared/domain/value-objects/DateOnly&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:
" type="Error">
Error: [vitest] No &quot;InvalidDateOnlyError&quot; export is defined on the &quot;../shared/domain/value-objects/DateOnly&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:

vi.mock(import(&quot;../shared/domain/value-objects/DateOnly&quot;), async (importOriginal) =&gt; {
  const actual = await importOriginal()
  return {
    ...actual,
    // your mocked methods
  }
})

 ❯ src/shared/domain/value-objects/__tests__/DateOnly.test.ts:13:56
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/DateOnly.test.ts" name="DateOnly &gt; constructor &gt; should throw InvalidDateOnlyError for empty/null/undefined" time="0.000440625">
            <failure message="[vitest] No &quot;InvalidDateOnlyError&quot; export is defined on the &quot;../shared/domain/value-objects/DateOnly&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:
" type="Error">
Error: [vitest] No &quot;InvalidDateOnlyError&quot; export is defined on the &quot;../shared/domain/value-objects/DateOnly&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:

vi.mock(import(&quot;../shared/domain/value-objects/DateOnly&quot;), async (importOriginal) =&gt; {
  const actual = await importOriginal()
  return {
    ...actual,
    // your mocked methods
  }
})

 ❯ src/shared/domain/value-objects/__tests__/DateOnly.test.ts:22:46
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/DateOnly.test.ts" name="DateOnly &gt; constructor &gt; should throw InvalidDateOnlyError for invalid dates" time="0.00025725">
            <failure message="[vitest] No &quot;InvalidDateOnlyError&quot; export is defined on the &quot;../shared/domain/value-objects/DateOnly&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:
" type="Error">
Error: [vitest] No &quot;InvalidDateOnlyError&quot; export is defined on the &quot;../shared/domain/value-objects/DateOnly&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:

vi.mock(import(&quot;../shared/domain/value-objects/DateOnly&quot;), async (importOriginal) =&gt; {
  const actual = await importOriginal()
  return {
    ...actual,
    // your mocked methods
  }
})

 ❯ src/shared/domain/value-objects/__tests__/DateOnly.test.ts:30:56
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/DateOnly.test.ts" name="DateOnly &gt; constructor &gt; should accept leap year dates" time="0.000767791">
            <failure message="[vitest] No &quot;InvalidDateOnlyError&quot; export is defined on the &quot;../shared/domain/value-objects/DateOnly&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:
" type="Error">
Error: [vitest] No &quot;InvalidDateOnlyError&quot; export is defined on the &quot;../shared/domain/value-objects/DateOnly&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:

vi.mock(import(&quot;../shared/domain/value-objects/DateOnly&quot;), async (importOriginal) =&gt; {
  const actual = await importOriginal()
  return {
    ...actual,
    // your mocked methods
  }
})

 ❯ src/shared/domain/value-objects/__tests__/DateOnly.test.ts:38:56
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/DateOnly.test.ts" name="DateOnly &gt; today &gt; should create DateOnly for current date" time="0.005213917">
            <failure message="expected &apos;2023-12-01&apos; to be &apos;2023-12-25&apos; // Object.is equality" type="AssertionError">
AssertionError: expected &apos;2023-12-01&apos; to be &apos;2023-12-25&apos; // Object.is equality

Expected: &quot;2023-12-25&quot;
Received: &quot;2023-12-01&quot;

 ❯ src/shared/domain/value-objects/__tests__/DateOnly.test.ts:49:27
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/DateOnly.test.ts" name="DateOnly &gt; fromDate &gt; should create DateOnly from Date object" time="0.000239417">
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/DateOnly.test.ts" name="DateOnly &gt; fromDate &gt; should handle different timezones correctly" time="0.000062667">
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/DateOnly.test.ts" name="DateOnly &gt; fromString &gt; should create DateOnly from valid string" time="0.000209542">
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/DateOnly.test.ts" name="DateOnly &gt; fromString &gt; should throw for invalid string" time="0.000237334">
            <failure message="[vitest] No &quot;InvalidDateOnlyError&quot; export is defined on the &quot;../shared/domain/value-objects/DateOnly&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:
" type="Error">
Error: [vitest] No &quot;InvalidDateOnlyError&quot; export is defined on the &quot;../shared/domain/value-objects/DateOnly&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:

vi.mock(import(&quot;../shared/domain/value-objects/DateOnly&quot;), async (importOriginal) =&gt; {
  const actual = await importOriginal()
  return {
    ...actual,
    // your mocked methods
  }
})

 ❯ src/shared/domain/value-objects/__tests__/DateOnly.test.ts:80:9
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/DateOnly.test.ts" name="DateOnly &gt; toDate &gt; should convert to Date object at midnight UTC" time="0.000142625">
            <failure message="dateOnly.toDate is not a function" type="TypeError">
TypeError: dateOnly.toDate is not a function
 ❯ src/shared/domain/value-objects/__tests__/DateOnly.test.ts:88:29
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/DateOnly.test.ts" name="DateOnly &gt; addDays &gt; should add days correctly" time="0.000153958">
            <failure message="dateOnly.addDays is not a function" type="TypeError">
TypeError: dateOnly.addDays is not a function
 ❯ src/shared/domain/value-objects/__tests__/DateOnly.test.ts:103:32
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/DateOnly.test.ts" name="DateOnly &gt; addDays &gt; should handle month boundaries" time="0.000174">
            <failure message="dateOnly.addDays is not a function" type="TypeError">
TypeError: dateOnly.addDays is not a function
 ❯ src/shared/domain/value-objects/__tests__/DateOnly.test.ts:110:32
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/DateOnly.test.ts" name="DateOnly &gt; addDays &gt; should handle year boundaries" time="0.000108">
            <failure message="dateOnly.addDays is not a function" type="TypeError">
TypeError: dateOnly.addDays is not a function
 ❯ src/shared/domain/value-objects/__tests__/DateOnly.test.ts:117:32
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/DateOnly.test.ts" name="DateOnly &gt; subtractDays &gt; should subtract days correctly" time="0.000087">
            <failure message="dateOnly.subtractDays is not a function" type="TypeError">
TypeError: dateOnly.subtractDays is not a function
 ❯ src/shared/domain/value-objects/__tests__/DateOnly.test.ts:126:32
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/DateOnly.test.ts" name="DateOnly &gt; isBefore &gt; should return true when date is before another" time="0.000088375">
            <failure message="date1.isBefore is not a function" type="TypeError">
TypeError: date1.isBefore is not a function
 ❯ src/shared/domain/value-objects/__tests__/DateOnly.test.ts:137:20
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/DateOnly.test.ts" name="DateOnly &gt; isBefore &gt; should return false for same dates" time="0.000087875">
            <failure message="date1.isBefore is not a function" type="TypeError">
TypeError: date1.isBefore is not a function
 ❯ src/shared/domain/value-objects/__tests__/DateOnly.test.ts:145:20
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/DateOnly.test.ts" name="DateOnly &gt; isAfter &gt; should return true when date is after another" time="0.000129125">
            <failure message="date1.isAfter is not a function" type="TypeError">
TypeError: date1.isAfter is not a function
 ❯ src/shared/domain/value-objects/__tests__/DateOnly.test.ts:154:20
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/DateOnly.test.ts" name="DateOnly &gt; isAfter &gt; should return false for same dates" time="0.000081625">
            <failure message="date1.isAfter is not a function" type="TypeError">
TypeError: date1.isAfter is not a function
 ❯ src/shared/domain/value-objects/__tests__/DateOnly.test.ts:162:20
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/DateOnly.test.ts" name="DateOnly &gt; daysDifference &gt; should calculate days difference correctly" time="0.000087792">
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/DateOnly.test.ts" name="DateOnly &gt; daysDifference &gt; should return 0 for same dates" time="0.000105875">
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/DateOnly.test.ts" name="DateOnly &gt; equals &gt; should return true for same date values" time="0.000043208">
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/DateOnly.test.ts" name="DateOnly &gt; equals &gt; should return false for different date values" time="0.000034084">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts" timestamp="2025-08-09T13:38:10.863Z" hostname="MacBook-Egor.local" tests="23" failures="19" errors="0" skipped="0" time="0.017559291">
        <testcase classname="src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts" name="NonEmptyTitle &gt; constructor &gt; should create NonEmptyTitle with valid string" time="0.000854708">
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts" name="NonEmptyTitle &gt; constructor &gt; should trim whitespace from title" time="0.007013291">
            <failure message="expected &apos;  Trimmed Title  &apos; to be &apos;Trimmed Title&apos; // Object.is equality" type="AssertionError">
AssertionError: expected &apos;  Trimmed Title  &apos; to be &apos;Trimmed Title&apos; // Object.is equality

Expected: &quot;Trimmed Title&quot;
Received: &quot;  Trimmed Title  &quot;

 ❯ src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts:15:27
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts" name="NonEmptyTitle &gt; constructor &gt; should throw InvalidTitleError for empty string" time="0.003789084">
            <failure message="[vitest] No &quot;InvalidTitleError&quot; export is defined on the &quot;../shared/domain/value-objects/NonEmptyTitle&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:
" type="Error">
Error: [vitest] No &quot;InvalidTitleError&quot; export is defined on the &quot;../shared/domain/value-objects/NonEmptyTitle&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:

vi.mock(import(&quot;../shared/domain/value-objects/NonEmptyTitle&quot;), async (importOriginal) =&gt; {
  const actual = await importOriginal()
  return {
    ...actual,
    // your mocked methods
  }
})

 ❯ src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts:19:51
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts" name="NonEmptyTitle &gt; constructor &gt; should throw InvalidTitleError for whitespace-only string" time="0.000383">
            <failure message="[vitest] No &quot;InvalidTitleError&quot; export is defined on the &quot;../shared/domain/value-objects/NonEmptyTitle&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:
" type="Error">
Error: [vitest] No &quot;InvalidTitleError&quot; export is defined on the &quot;../shared/domain/value-objects/NonEmptyTitle&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:

vi.mock(import(&quot;../shared/domain/value-objects/NonEmptyTitle&quot;), async (importOriginal) =&gt; {
  const actual = await importOriginal()
  return {
    ...actual,
    // your mocked methods
  }
})

 ❯ src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts:23:54
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts" name="NonEmptyTitle &gt; constructor &gt; should throw InvalidTitleError for non-string values" time="0.000279042">
            <failure message="[vitest] No &quot;InvalidTitleError&quot; export is defined on the &quot;../shared/domain/value-objects/NonEmptyTitle&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:
" type="Error">
Error: [vitest] No &quot;InvalidTitleError&quot; export is defined on the &quot;../shared/domain/value-objects/NonEmptyTitle&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:

vi.mock(import(&quot;../shared/domain/value-objects/NonEmptyTitle&quot;), async (importOriginal) =&gt; {
  const actual = await importOriginal()
  return {
    ...actual,
    // your mocked methods
  }
})

 ❯ src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts:28:60
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts" name="NonEmptyTitle &gt; constructor &gt; should accept single character after trimming" time="0.000508792">
            <failure message="expected &apos; a &apos; to be &apos;a&apos; // Object.is equality" type="AssertionError">
AssertionError: expected &apos; a &apos; to be &apos;a&apos; // Object.is equality

Expected: &quot;a&quot;
Received: &quot; a &quot;

 ❯ src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts:39:27
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts" name="NonEmptyTitle &gt; fromString &gt; should create NonEmptyTitle from valid string" time="0.000076417">
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts" name="NonEmptyTitle &gt; fromString &gt; should throw for invalid string" time="0.000223458">
            <failure message="[vitest] No &quot;InvalidTitleError&quot; export is defined on the &quot;../shared/domain/value-objects/NonEmptyTitle&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:
" type="Error">
Error: [vitest] No &quot;InvalidTitleError&quot; export is defined on the &quot;../shared/domain/value-objects/NonEmptyTitle&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:

vi.mock(import(&quot;../shared/domain/value-objects/NonEmptyTitle&quot;), async (importOriginal) =&gt; {
  const actual = await importOriginal()
  return {
    ...actual,
    // your mocked methods
  }
})

 ❯ src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts:51:58
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts" name="NonEmptyTitle &gt; length &gt; should return the length of the title" time="0.000639292">
            <failure message="expected undefined to be 11 // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be 11 // Object.is equality

- Expected: 
11

+ Received: 
undefined

 ❯ src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts:59:28
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts" name="NonEmptyTitle &gt; length &gt; should return length after trimming" time="0.000273042">
            <failure message="expected undefined to be 5 // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be 5 // Object.is equality

- Expected: 
5

+ Received: 
undefined

 ❯ src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts:65:28
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts" name="NonEmptyTitle &gt; contains &gt; should return true when title contains substring (case-insensitive)" time="0.000191208">
            <failure message="title.contains is not a function" type="TypeError">
TypeError: title.contains is not a function
 ❯ src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts:73:20
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts" name="NonEmptyTitle &gt; contains &gt; should return false when title does not contain substring" time="0.000106542">
            <failure message="title.contains is not a function" type="TypeError">
TypeError: title.contains is not a function
 ❯ src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts:82:20
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts" name="NonEmptyTitle &gt; contains &gt; should handle empty substring" time="0.000152375">
            <failure message="title.contains is not a function" type="TypeError">
TypeError: title.contains is not a function
 ❯ src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts:89:20
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts" name="NonEmptyTitle &gt; toUpperCase &gt; should return title in uppercase" time="0.000090042">
            <failure message="title.toUpperCase is not a function" type="TypeError">
TypeError: title.toUpperCase is not a function
 ❯ src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts:97:20
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts" name="NonEmptyTitle &gt; toLowerCase &gt; should return title in lowercase" time="0.000078834">
            <failure message="title.toLowerCase is not a function" type="TypeError">
TypeError: title.toLowerCase is not a function
 ❯ src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts:105:20
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts" name="NonEmptyTitle &gt; truncate &gt; should return original title when shorter than max length" time="0.000091791">
            <failure message="title.truncate is not a function" type="TypeError">
TypeError: title.truncate is not a function
 ❯ src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts:113:20
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts" name="NonEmptyTitle &gt; truncate &gt; should truncate and add ellipsis when longer than max length" time="0.000091458">
            <failure message="title.truncate is not a function" type="TypeError">
TypeError: title.truncate is not a function
 ❯ src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts:121:20
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts" name="NonEmptyTitle &gt; truncate &gt; should handle edge case where max length is 3" time="0.000078334">
            <failure message="title.truncate is not a function" type="TypeError">
TypeError: title.truncate is not a function
 ❯ src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts:127:20
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts" name="NonEmptyTitle &gt; truncate &gt; should handle max length equal to title length" time="0.000075209">
            <failure message="title.truncate is not a function" type="TypeError">
TypeError: title.truncate is not a function
 ❯ src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts:133:20
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts" name="NonEmptyTitle &gt; equals &gt; should return true for titles with same value" time="0.000055167">
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts" name="NonEmptyTitle &gt; equals &gt; should return true for titles with same value after trimming" time="0.000760417">
            <failure message="expected false to be true // Object.is equality" type="AssertionError">
AssertionError: expected false to be true // Object.is equality

- Expected
+ Received

- true
+ false

 ❯ src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts:149:37
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts" name="NonEmptyTitle &gt; equals &gt; should return false for titles with different values" time="0.000105917">
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts" name="NonEmptyTitle &gt; toString &gt; should return the title string" time="0.000457375">
            <failure message="expected &apos;[object Object]&apos; to be &apos;Task Title&apos; // Object.is equality" type="AssertionError">
AssertionError: expected &apos;[object Object]&apos; to be &apos;Task Title&apos; // Object.is equality

Expected: &quot;Task Title&quot;
Received: &quot;[object Object]&quot;

 ❯ src/shared/domain/value-objects/__tests__/NonEmptyTitle.test.ts:164:32
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/shared/domain/value-objects/__tests__/TaskId.test.ts" timestamp="2025-08-09T13:38:10.872Z" hostname="MacBook-Egor.local" tests="13" failures="7" errors="0" skipped="0" time="0.028335958">
        <testcase classname="src/shared/domain/value-objects/__tests__/TaskId.test.ts" name="TaskId &gt; constructor &gt; should create TaskId with valid ULID" time="0.005289125">
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/TaskId.test.ts" name="TaskId &gt; constructor &gt; should throw InvalidTaskIdError for empty string" time="0.008906625">
            <failure message="[vitest] No &quot;InvalidTaskIdError&quot; export is defined on the &quot;../shared/domain/value-objects/TaskId&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:
" type="Error">
Error: [vitest] No &quot;InvalidTaskIdError&quot; export is defined on the &quot;../shared/domain/value-objects/TaskId&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:

vi.mock(import(&quot;../shared/domain/value-objects/TaskId&quot;), async (importOriginal) =&gt; {
  const actual = await importOriginal()
  return {
    ...actual,
    // your mocked methods
  }
})

 ❯ src/shared/domain/value-objects/__tests__/TaskId.test.ts:15:44
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/TaskId.test.ts" name="TaskId &gt; constructor &gt; should throw InvalidTaskIdError for null/undefined" time="0.001016208">
            <failure message="[vitest] No &quot;InvalidTaskIdError&quot; export is defined on the &quot;../shared/domain/value-objects/TaskId&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:
" type="Error">
Error: [vitest] No &quot;InvalidTaskIdError&quot; export is defined on the &quot;../shared/domain/value-objects/TaskId&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:

vi.mock(import(&quot;../shared/domain/value-objects/TaskId&quot;), async (importOriginal) =&gt; {
  const actual = await importOriginal()
  return {
    ...actual,
    // your mocked methods
  }
})

 ❯ src/shared/domain/value-objects/__tests__/TaskId.test.ts:19:53
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/TaskId.test.ts" name="TaskId &gt; constructor &gt; should throw InvalidTaskIdError for invalid ULID format" time="0.000339917">
            <failure message="[vitest] No &quot;InvalidTaskIdError&quot; export is defined on the &quot;../shared/domain/value-objects/TaskId&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:
" type="Error">
Error: [vitest] No &quot;InvalidTaskIdError&quot; export is defined on the &quot;../shared/domain/value-objects/TaskId&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:

vi.mock(import(&quot;../shared/domain/value-objects/TaskId&quot;), async (importOriginal) =&gt; {
  const actual = await importOriginal()
  return {
    ...actual,
    // your mocked methods
  }
})

 ❯ src/shared/domain/value-objects/__tests__/TaskId.test.ts:24:56
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/TaskId.test.ts" name="TaskId &gt; constructor &gt; should throw InvalidTaskIdError for non-string values" time="0.000275">
            <failure message="[vitest] No &quot;InvalidTaskIdError&quot; export is defined on the &quot;../shared/domain/value-objects/TaskId&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:
" type="Error">
Error: [vitest] No &quot;InvalidTaskIdError&quot; export is defined on the &quot;../shared/domain/value-objects/TaskId&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:

vi.mock(import(&quot;../shared/domain/value-objects/TaskId&quot;), async (importOriginal) =&gt; {
  const actual = await importOriginal()
  return {
    ...actual,
    // your mocked methods
  }
})

 ❯ src/shared/domain/value-objects/__tests__/TaskId.test.ts:32:52
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/TaskId.test.ts" name="TaskId &gt; generate &gt; should generate valid TaskId" time="0.00070225">
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/TaskId.test.ts" name="TaskId &gt; generate &gt; should generate unique TaskIds" time="0.004736583">
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/TaskId.test.ts" name="TaskId &gt; fromString &gt; should create TaskId from valid ULID string" time="0.000538458">
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/TaskId.test.ts" name="TaskId &gt; fromString &gt; should throw for invalid ULID string" time="0.000774625">
            <failure message="[vitest] No &quot;InvalidTaskIdError&quot; export is defined on the &quot;../shared/domain/value-objects/TaskId&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:
" type="Error">
Error: [vitest] No &quot;InvalidTaskIdError&quot; export is defined on the &quot;../shared/domain/value-objects/TaskId&quot; mock. Did you forget to return it from &quot;vi.mock&quot;?
If you need to partially mock a module, you can use &quot;importOriginal&quot; helper inside:

vi.mock(import(&quot;../shared/domain/value-objects/TaskId&quot;), async (importOriginal) =&gt; {
  const actual = await importOriginal()
  return {
    ...actual,
    // your mocked methods
  }
})

 ❯ src/shared/domain/value-objects/__tests__/TaskId.test.ts:62:58
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/TaskId.test.ts" name="TaskId &gt; getTimestamp &gt; should extract timestamp from ULID" time="0.000196042">
            <failure message="taskId.getTimestamp is not a function" type="TypeError">
TypeError: taskId.getTimestamp is not a function
 ❯ src/shared/domain/value-objects/__tests__/TaskId.test.ts:72:32
            </failure>
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/TaskId.test.ts" name="TaskId &gt; equals &gt; should return true for TaskIds with same value" time="0.000155375">
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/TaskId.test.ts" name="TaskId &gt; equals &gt; should return false for TaskIds with different values" time="0.000047208">
        </testcase>
        <testcase classname="src/shared/domain/value-objects/__tests__/TaskId.test.ts" name="TaskId &gt; toString &gt; should return the ULID string" time="0.002365042">
            <failure message="expected &apos;[object Object]&apos; to be &apos;01K27GV0TS700FVQANPTG9Z09C&apos; // Object.is equality" type="AssertionError">
AssertionError: expected &apos;[object Object]&apos; to be &apos;01K27GV0TS700FVQANPTG9Z09C&apos; // Object.is equality

Expected: &quot;01K27GV0TS700FVQANPTG9Z09C&quot;
Received: &quot;[object Object]&quot;

 ❯ src/shared/domain/value-objects/__tests__/TaskId.test.ts:101:33
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts" timestamp="2025-08-09T13:38:10.875Z" hostname="MacBook-Egor.local" tests="18" failures="0" errors="0" skipped="0" time="0.700006167">
        <testcase classname="src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts" name="TodoDatabase &gt; Database Initialization &gt; should initialize database successfully" time="0.064970916">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts" name="TodoDatabase &gt; Database Initialization &gt; should create all required tables" time="0.035371958">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts" name="TodoDatabase &gt; Tasks Table &gt; should create task with automatic timestamps" time="0.020575333">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts" name="TodoDatabase &gt; Tasks Table &gt; should update task with automatic timestamp" time="0.075164417">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts" name="TodoDatabase &gt; Tasks Table &gt; should filter by category" time="0.033187084">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts" name="TodoDatabase &gt; Tasks Table &gt; should filter by status" time="0.060330625">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts" name="TodoDatabase &gt; Daily Selection Entries Table &gt; should create daily selection entry with automatic timestamp" time="0.203495417">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts" name="TodoDatabase &gt; Daily Selection Entries Table &gt; should enforce unique constraint on date+taskId combination" time="0.018746834">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts" name="TodoDatabase &gt; Daily Selection Entries Table &gt; should filter by date" time="0.032558875">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts" name="TodoDatabase &gt; Task Logs Table &gt; should create task log with automatic timestamp" time="0.012848">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts" name="TodoDatabase &gt; Task Logs Table &gt; should create custom log without taskId" time="0.021746041">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts" name="TodoDatabase &gt; Task Logs Table &gt; should filter logs by taskId" time="0.024141708">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts" name="TodoDatabase &gt; Task Logs Table &gt; should filter logs by type" time="0.014844958">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts" name="TodoDatabase &gt; User Settings Table &gt; should create and update user settings" time="0.015450791">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts" name="TodoDatabase &gt; Sync Queue Table &gt; should create sync queue entry" time="0.013476875">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts" name="TodoDatabase &gt; Stats Daily Table &gt; should create daily stats entry" time="0.013179208">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts" name="TodoDatabase &gt; Error Handling &gt; should handle database connection errors gracefully" time="0.021323625">
            <system-out>
Database initialized successfully

            </system-out>
            <system-err>
Unhandled rejection: DatabaseClosedError: Database has been closed
    at tempTransaction (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/functions/temp-transaction.ts:25:26)
    at Table._trans (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/classes/table/table.ts:64:9)
    at Collection._read (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/classes/collection/collection.ts:49:17)
    at Collection.toArray (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/classes/collection/collection.ts:165:17)
    at TodoDatabase.isHealthy (/Users/esmirnov/projects/lift-v2/src/shared/infrastructure/database/TodoDatabase.ts:398:33)
    at /Users/esmirnov/projects/lift-v2/src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts:432:37
    at file:///Users/esmirnov/projects/lift-v2/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20
From previous: 
    at DexiePromise.then (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/helpers/promise.js:183:22)
    at Collection._read (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/classes/collection/collection.ts:49:40)
    at Collection.toArray (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/classes/collection/collection.ts:165:17)
    at TodoDatabase.isHealthy (/Users/esmirnov/projects/lift-v2/src/shared/infrastructure/database/TodoDatabase.ts:398:33)
    at /Users/esmirnov/projects/lift-v2/src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts:432:37
    at file:///Users/esmirnov/projects/lift-v2/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20
From previous: DatabaseClosedError: Database has been closed
    at tempTransaction (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/functions/temp-transaction.ts:25:26)
    at Table._trans (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/classes/table/table.ts:64:9)
    at Collection._read (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/classes/collection/collection.ts:49:17)
    at Collection.toArray (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/classes/collection/collection.ts:165:17)
    at TodoDatabase.isHealthy (/Users/esmirnov/projects/lift-v2/src/shared/infrastructure/database/TodoDatabase.ts:398:33)
    at /Users/esmirnov/projects/lift-v2/src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts:432:37
    at file:///Users/esmirnov/projects/lift-v2/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20
From previous: 
    at PromiseReject (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/helpers/promise.js:637:12)
    at tempTransaction (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/functions/temp-transaction.ts:25:16)
    at Table._trans (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/classes/table/table.ts:64:9)
    at Collection._read (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/classes/collection/collection.ts:49:17)
    at Collection.toArray (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/classes/collection/collection.ts:165:17)
    at TodoDatabase.isHealthy (/Users/esmirnov/projects/lift-v2/src/shared/infrastructure/database/TodoDatabase.ts:398:33)
    at /Users/esmirnov/projects/lift-v2/src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts:432:37
    at file:///Users/esmirnov/projects/lift-v2/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20

Database health check failed: [36m&lt;ref *1&gt;[39m DexieError [DatabaseClosedError]: Database has been closed
    at tempTransaction [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/functions/temp-transaction.ts:25:26[90m)[39m
    at Table._trans [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/table/table.ts:64:9[90m)[39m
    at Collection._read [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/collection/collection.ts:49:17[90m)[39m
    at Collection.toArray [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/collection/collection.ts:165:17[90m)[39m
    at TodoDatabase.isHealthy [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:398:33[90m)[39m
    at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/__tests__/TodoDatabase.test.ts:432:37
    at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
From previous: 
    at DexiePromise.then [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:183:22[90m)[39m
    at Collection._read [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/collection/collection.ts:49:40[90m)[39m
    at Collection.toArray [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/collection/collection.ts:165:17[90m)[39m
    at TodoDatabase.isHealthy [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:398:33[90m)[39m
    at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/__tests__/TodoDatabase.test.ts:432:37
    at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
From previous: DatabaseClosedError: Database has been closed
    at tempTransaction [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/functions/temp-transaction.ts:25:26[90m)[39m
    at Table._trans [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/table/table.ts:64:9[90m)[39m
    at Collection._read [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/collection/collection.ts:49:17[90m)[39m
    at Collection.toArray [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/collection/collection.ts:165:17[90m)[39m
    at TodoDatabase.isHealthy [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:398:33[90m)[39m
    at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/__tests__/TodoDatabase.test.ts:432:37
    at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
From previous: 
    at PromiseReject [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:637:12[90m)[39m
    at tempTransaction [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/functions/temp-transaction.ts:25:16[90m)[39m
    at Table._trans [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/table/table.ts:64:9[90m)[39m
    at Collection._read [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/collection/collection.ts:49:17[90m)[39m
    at Collection.toArray [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/collection/collection.ts:165:17[90m)[39m
    at TodoDatabase.isHealthy [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:398:33[90m)[39m
    at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/__tests__/TodoDatabase.test.ts:432:37
    at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  _e: Error: 
      at getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
      at new DexieError [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/errors/errors.js:125:19[90m)[39m
      at tempTransaction [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/functions/temp-transaction.ts:25:26[90m)[39m
      at Table._trans [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/table/table.ts:64:9[90m)[39m
      at Collection._read [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/collection/collection.ts:49:17[90m)[39m
      at Collection.toArray [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/collection/collection.ts:165:17[90m)[39m
      at TodoDatabase.isHealthy [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:398:33[90m)[39m
      at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/__tests__/TodoDatabase.test.ts:432:37
      at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20,
  inner: [1mnull[22m,
  _promise: DexiePromise [Dexie.Promise] {
    _listeners: [],
    onuncatched: [36m[Function: nop][39m,
    _lib: [33mfalse[39m,
    _PSD: {
      id: [32m&apos;global&apos;[39m,
      global: [33mtrue[39m,
      ref: [33m-64[39m,
      unhandleds: [],
      onunhandled: [36m[Function: globalError][39m,
      pgp: [33mfalse[39m,
      env: [36m[Object][39m,
      finalize: [36m[Function: finalize][39m
    },
    _stackHolder: Error: 
        at getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
        at DexiePromise [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:153:29[90m)[39m
        at DexiePromise.then [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:183:22[90m)[39m
        at Collection._read [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/collection/collection.ts:49:40[90m)[39m
        at Collection.toArray [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/collection/collection.ts:165:17[90m)[39m
        at TodoDatabase.isHealthy [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:398:33[90m)[39m
        at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/__tests__/TodoDatabase.test.ts:432:37
        at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20,
    _prev: DexiePromise [Dexie.Promise] {
      _listeners: [],
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at new DexiePromise [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:153:29[90m)[39m
          at PromiseReject [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:637:12[90m)[39m
          at tempTransaction [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/functions/temp-transaction.ts:25:16[90m)[39m
          at Table._trans [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/table/table.ts:64:9[90m)[39m
          at Collection._read [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/collection/collection.ts:49:17[90m)[39m
          at Collection.toArray [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/collection/collection.ts:165:17[90m)[39m
          at TodoDatabase.isHealthy [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:398:33[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/__tests__/TodoDatabase.test.ts:432:37
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [33mfalse[39m,
      _value: [36m[Circular *1][39m
    },
    _numPrev: [33m1[39m,
    _state: [33mfalse[39m,
    _value: [36m[Circular *1][39m,
    _stack: [32m&apos;DatabaseClosedError: Database has been closed\n&apos;[39m +
      [32m&apos;    at tempTransaction (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/functions/temp-transaction.ts:25:26)\n&apos;[39m +
      [32m&apos;    at Table._trans (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/classes/table/table.ts:64:9)\n&apos;[39m +
      [32m&apos;    at Collection._read (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/classes/collection/collection.ts:49:17)\n&apos;[39m +
      [32m&apos;    at Collection.toArray (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/classes/collection/collection.ts:165:17)\n&apos;[39m +
      [32m&apos;    at TodoDatabase.isHealthy (/Users/esmirnov/projects/lift-v2/src/shared/infrastructure/database/TodoDatabase.ts:398:33)\n&apos;[39m +
      [32m&apos;    at /Users/esmirnov/projects/lift-v2/src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts:432:37\n&apos;[39m +
      [32m&apos;    at file:///Users/esmirnov/projects/lift-v2/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20\n&apos;[39m +
      [32m&apos;From previous: \n&apos;[39m +
      [32m&apos;    at DexiePromise.then (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/helpers/promise.js:183:22)\n&apos;[39m +
      [32m&apos;    at Collection._read (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/classes/collection/collection.ts:49:40)\n&apos;[39m +
      [32m&apos;    at Collection.toArray (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/classes/collection/collection.ts:165:17)\n&apos;[39m +
      [32m&apos;    at TodoDatabase.isHealthy (/Users/esmirnov/projects/lift-v2/src/shared/infrastructure/database/TodoDatabase.ts:398:33)\n&apos;[39m +
      [32m&apos;    at /Users/esmirnov/projects/lift-v2/src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts:432:37\n&apos;[39m +
      [32m&apos;    at file:///Users/esmirnov/projects/lift-v2/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20\n&apos;[39m +
      [32m&apos;From previous: DatabaseClosedError: Database has been closed\n&apos;[39m +
      [32m&apos;    at tempTransaction (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/functions/temp-transaction.ts:25:26)\n&apos;[39m +
      [32m&apos;    at Table._trans (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/classes/table/table.ts:64:9)\n&apos;[39m +
      [32m&apos;    at Collection._read (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/classes/collection/collection.ts:49:17)\n&apos;[39m +
      [32m&apos;    at Collection.toArray (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/classes/collection/collection.ts:165:17)\n&apos;[39m +
      [32m&apos;    at TodoDatabase.isHealthy (/Users/esmirnov/projects/lift-v2/src/shared/infrastructure/database/TodoDatabase.ts:398:33)\n&apos;[39m +
      [32m&apos;    at /Users/esmirnov/projects/lift-v2/src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts:432:37\n&apos;[39m +
      [32m&apos;    at file:///Users/esmirnov/projects/lift-v2/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20\n&apos;[39m +
      [32m&apos;From previous: \n&apos;[39m +
      [32m&apos;    at PromiseReject (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/helpers/promise.js:637:12)\n&apos;[39m +
      [32m&apos;    at tempTransaction (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/functions/temp-transaction.ts:25:16)\n&apos;[39m +
      [32m&apos;    at Table._trans (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/classes/table/table.ts:64:9)\n&apos;[39m +
      [32m&apos;    at Collection._read (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/classes/collection/collection.ts:49:17)\n&apos;[39m +
      [32m&apos;    at Collection.toArray (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/classes/collection/collection.ts:165:17)\n&apos;[39m +
      [32m&apos;    at TodoDatabase.isHealthy (/Users/esmirnov/projects/lift-v2/src/shared/infrastructure/database/TodoDatabase.ts:398:33)\n&apos;[39m +
      [32m&apos;    at /Users/esmirnov/projects/lift-v2/src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts:432:37\n&apos;[39m +
      [32m&apos;    at file:///Users/esmirnov/projects/lift-v2/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20&apos;[39m
  },
  _stack: [32m&apos;DatabaseClosedError: Database has been closed\n&apos;[39m +
    [32m&apos;    at tempTransaction (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/functions/temp-transaction.ts:25:26)\n&apos;[39m +
    [32m&apos;    at Table._trans (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/classes/table/table.ts:64:9)\n&apos;[39m +
    [32m&apos;    at Collection._read (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/classes/collection/collection.ts:49:17)\n&apos;[39m +
    [32m&apos;    at Collection.toArray (/Users/esmirnov/projects/lift-v2/node_modules/dexie/src/classes/collection/collection.ts:165:17)\n&apos;[39m +
    [32m&apos;    at TodoDatabase.isHealthy (/Users/esmirnov/projects/lift-v2/src/shared/infrastructure/database/TodoDatabase.ts:398:33)\n&apos;[39m +
    [32m&apos;    at /Users/esmirnov/projects/lift-v2/src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts:432:37\n&apos;[39m +
    [32m&apos;    at file:///Users/esmirnov/projects/lift-v2/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20&apos;[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/shared/infrastructure/database/__tests__/TodoDatabase.test.ts" name="TodoDatabase &gt; Data Clearing &gt; should clear all data successfully" time="0.015342459">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/shared/infrastructure/di/__tests__/container.test.ts" timestamp="2025-08-09T13:38:10.879Z" hostname="MacBook-Egor.local" tests="6" failures="3" errors="0" skipped="0" time="0.027455167">
        <testcase classname="src/shared/infrastructure/di/__tests__/container.test.ts" name="DI Container &gt; should resolve database instance" time="0.003369166">
        </testcase>
        <testcase classname="src/shared/infrastructure/di/__tests__/container.test.ts" name="DI Container &gt; should resolve task repository instance" time="0.005439208">
            <system-out>
[36m&lt;ref *1&gt;[39m TodoDatabase {
  _middlewares: { dbcore: [ [36m[Object][39m, [36m[Object][39m, [36m[Object][39m, [36m[Object][39m ] },
  verno: [33m8[39m,
  _options: {
    addons: [],
    autoOpen: [33mtrue[39m,
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: Map(0) {} },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _deps: {
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: Map(0) {} },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _dbSchema: {
    tasks: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    dailySelectionEntries: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    taskLogs: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    userSettings: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    syncQueue: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    statsDaily: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    eventStore: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    handledEvents: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    locks: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    }
  },
  _versions: [
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m }
  ],
  _storeNames: [
    [32m&apos;tasks&apos;[39m,
    [32m&apos;dailySelectionEntries&apos;[39m,
    [32m&apos;taskLogs&apos;[39m,
    [32m&apos;userSettings&apos;[39m,
    [32m&apos;syncQueue&apos;[39m,
    [32m&apos;statsDaily&apos;[39m,
    [32m&apos;eventStore&apos;[39m,
    [32m&apos;handledEvents&apos;[39m,
    [32m&apos;locks&apos;[39m
  ],
  _allTables: {
    tasks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m
    },
    dailySelectionEntries: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m
    },
    taskLogs: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m
    },
    userSettings: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m
    },
    syncQueue: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m
    },
    statsDaily: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m
    },
    eventStore: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m
    },
    handledEvents: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m
    },
    locks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m
    }
  },
  idbdb: [1mnull[22m,
  _novip: [36m[Circular *1][39m,
  _state: {
    dbOpenError: [1mnull[22m,
    isBeingOpened: [33mfalse[39m,
    onReadyBeingFired: [1mnull[22m,
    openComplete: [33mfalse[39m,
    dbReadyResolve: [36m[Function (anonymous)][39m,
    dbReadyPromise: DexiePromise [Dexie.Promise] {
      _listeners: [],
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at new DexiePromise [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:153:29[90m)[39m
          at new Dexie [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:127:28[90m)[39m
          at new TodoDatabase [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:104:5[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:295:28
          at InternalDependencyContainer.construct [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:303:11[90m)[39m
          at InternalDependencyContainer.resolveRegistration [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:169:51[90m)[39m
          at InternalDependencyContainer.resolve [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:112:33[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:321:36
          at Array.map (&lt;anonymous&gt;),
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [1mnull[22m,
      _value: [1mnull[22m
    },
    cancelOpen: [36m[Function: bound handleRejection][39m,
    openCanceller: DexiePromise [Dexie.Promise] {
      _listeners: [],
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at new DexiePromise [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:153:29[90m)[39m
          at new Dexie [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:130:27[90m)[39m
          at new TodoDatabase [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:104:5[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:295:28
          at InternalDependencyContainer.construct [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:303:11[90m)[39m
          at InternalDependencyContainer.resolveRegistration [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:169:51[90m)[39m
          at InternalDependencyContainer.resolve [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:112:33[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:321:36
          at Array.map (&lt;anonymous&gt;),
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [1mnull[22m,
      _value: [1mnull[22m
    },
    autoSchema: [33mfalse[39m,
    PR1398_maxLoop: [33m3[39m
  },
  name: [32m&apos;TodoDatabase&apos;[39m,
  on: [Function: rv] {
    addEventType: [36m[Function: add][39m,
    populate: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    blocked: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    versionchange: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    close: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    ready: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function (anonymous)][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    }
  },
  Collection: [36m[Function: Collection][39m,
  Table: [36m[Function: Table][39m,
  Transaction: [36m[Function: Transaction][39m,
  Version: [36m[Function: Version][39m,
  WhereClause: [36m[Function: WhereClause][39m,
  _maxKey: [ [] ],
  _createTransaction: [36m[Function (anonymous)][39m,
  _fireOnBlocked: [36m[Function (anonymous)][39m,
  vip: TodoDatabase {},
  tasks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;tasks&apos;[39m,
    schema: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    }
  },
  dailySelectionEntries: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;dailySelectionEntries&apos;[39m,
    schema: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    }
  },
  taskLogs: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;taskLogs&apos;[39m,
    schema: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    }
  },
  userSettings: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;userSettings&apos;[39m,
    schema: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    }
  },
  syncQueue: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;syncQueue&apos;[39m,
    schema: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    }
  },
  statsDaily: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;statsDaily&apos;[39m,
    schema: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    }
  },
  eventStore: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;eventStore&apos;[39m,
    schema: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    }
  },
  handledEvents: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;handledEvents&apos;[39m,
    schema: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    }
  },
  locks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;locks&apos;[39m,
    schema: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/di/__tests__/container.test.ts" name="DI Container &gt; should resolve create task use case instance" time="0.004264417">
            <system-out>
[36m&lt;ref *1&gt;[39m TodoDatabase {
  _middlewares: { dbcore: [ [36m[Object][39m, [36m[Object][39m, [36m[Object][39m, [36m[Object][39m ] },
  verno: [33m8[39m,
  _options: {
    addons: [],
    autoOpen: [33mtrue[39m,
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: Map(0) {} },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _deps: {
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: Map(0) {} },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _dbSchema: {
    tasks: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    dailySelectionEntries: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    taskLogs: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    userSettings: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    syncQueue: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    statsDaily: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    eventStore: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    handledEvents: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    locks: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    }
  },
  _versions: [
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m }
  ],
  _storeNames: [
    [32m&apos;tasks&apos;[39m,
    [32m&apos;dailySelectionEntries&apos;[39m,
    [32m&apos;taskLogs&apos;[39m,
    [32m&apos;userSettings&apos;[39m,
    [32m&apos;syncQueue&apos;[39m,
    [32m&apos;statsDaily&apos;[39m,
    [32m&apos;eventStore&apos;[39m,
    [32m&apos;handledEvents&apos;[39m,
    [32m&apos;locks&apos;[39m
  ],
  _allTables: {
    tasks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m
    },
    dailySelectionEntries: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m
    },
    taskLogs: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m
    },
    userSettings: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m
    },
    syncQueue: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m
    },
    statsDaily: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m
    },
    eventStore: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m
    },
    handledEvents: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m
    },
    locks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m
    }
  },
  idbdb: [1mnull[22m,
  _novip: [36m[Circular *1][39m,
  _state: {
    dbOpenError: [1mnull[22m,
    isBeingOpened: [33mfalse[39m,
    onReadyBeingFired: [1mnull[22m,
    openComplete: [33mfalse[39m,
    dbReadyResolve: [36m[Function (anonymous)][39m,
    dbReadyPromise: DexiePromise [Dexie.Promise] {
      _listeners: [],
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at new DexiePromise [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:153:29[90m)[39m
          at new Dexie [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:127:28[90m)[39m
          at new TodoDatabase [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:104:5[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:295:28
          at InternalDependencyContainer.construct [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:303:11[90m)[39m
          at InternalDependencyContainer.resolveRegistration [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:169:51[90m)[39m
          at InternalDependencyContainer.resolve [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:112:33[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:321:36
          at Array.map (&lt;anonymous&gt;),
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [1mnull[22m,
      _value: [1mnull[22m
    },
    cancelOpen: [36m[Function: bound handleRejection][39m,
    openCanceller: DexiePromise [Dexie.Promise] {
      _listeners: [],
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at new DexiePromise [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:153:29[90m)[39m
          at new Dexie [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:130:27[90m)[39m
          at new TodoDatabase [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:104:5[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:295:28
          at InternalDependencyContainer.construct [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:303:11[90m)[39m
          at InternalDependencyContainer.resolveRegistration [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:169:51[90m)[39m
          at InternalDependencyContainer.resolve [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:112:33[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:321:36
          at Array.map (&lt;anonymous&gt;),
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [1mnull[22m,
      _value: [1mnull[22m
    },
    autoSchema: [33mfalse[39m,
    PR1398_maxLoop: [33m3[39m
  },
  name: [32m&apos;TodoDatabase&apos;[39m,
  on: [Function: rv] {
    addEventType: [36m[Function: add][39m,
    populate: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    blocked: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    versionchange: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    close: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    ready: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function (anonymous)][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    }
  },
  Collection: [36m[Function: Collection][39m,
  Table: [36m[Function: Table][39m,
  Transaction: [36m[Function: Transaction][39m,
  Version: [36m[Function: Version][39m,
  WhereClause: [36m[Function: WhereClause][39m,
  _maxKey: [ [] ],
  _createTransaction: [36m[Function (anonymous)][39m,
  _fireOnBlocked: [36m[Function (anonymous)][39m,
  vip: TodoDatabase {},
  tasks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;tasks&apos;[39m,
    schema: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    }
  },
  dailySelectionEntries: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;dailySelectionEntries&apos;[39m,
    schema: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    }
  },
  taskLogs: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;taskLogs&apos;[39m,
    schema: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    }
  },
  userSettings: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;userSettings&apos;[39m,
    schema: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    }
  },
  syncQueue: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;syncQueue&apos;[39m,
    schema: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    }
  },
  statsDaily: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;statsDaily&apos;[39m,
    schema: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    }
  },
  eventStore: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;eventStore&apos;[39m,
    schema: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    }
  },
  handledEvents: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;handledEvents&apos;[39m,
    schema: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    }
  },
  locks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;locks&apos;[39m,
    schema: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    }
  }
}

            </system-out>
            <failure message="Cannot inject the dependency &quot;debouncedSyncService&quot; at position #3 of &quot;CreateTaskUseCase&quot; constructor. Reason:
    Cannot inject the dependency &quot;syncService&quot; at position #0 of &quot;DebouncedSyncService&quot; constructor. Reason:
        Cannot inject the dependency &quot;syncRepository&quot; at position #1 of &quot;SyncService&quot; constructor. Reason:
            Supabase client not initialized. Call initialize() first." type="Error">
Error: Cannot inject the dependency &quot;debouncedSyncService&quot; at position #3 of &quot;CreateTaskUseCase&quot; constructor. Reason:
    Cannot inject the dependency &quot;syncService&quot; at position #0 of &quot;DebouncedSyncService&quot; constructor. Reason:
        Cannot inject the dependency &quot;syncRepository&quot; at position #1 of &quot;SyncService&quot; constructor. Reason:
            Supabase client not initialized. Call initialize() first.
 ❯ node_modules/tsyringe/dist/cjs/dependency-container.js:330:23
 ❯ node_modules/tsyringe/dist/cjs/dependency-container.js:301:38
 ❯ InternalDependencyContainer.construct node_modules/tsyringe/dist/cjs/dependency-container.js:303:11
 ❯ InternalDependencyContainer.resolveRegistration node_modules/tsyringe/dist/cjs/dependency-container.js:169:51
 ❯ InternalDependencyContainer.resolve node_modules/tsyringe/dist/cjs/dependency-container.js:112:33
 ❯ src/shared/infrastructure/di/__tests__/container.test.ts:25:41
            </failure>
        </testcase>
        <testcase classname="src/shared/infrastructure/di/__tests__/container.test.ts" name="DI Container &gt; should resolve log service instance" time="0.0003225">
            <failure message="Attempted to construct an undefined constructor. Could mean a circular dependency problem. Try using `delay` function." type="Error">
Error: Attempted to construct an undefined constructor. Could mean a circular dependency problem. Try using `delay` function.
 ❯ InternalDependencyContainer.resolve node_modules/tsyringe/dist/cjs/dependency-container.js:121:15
 ❯ src/shared/infrastructure/di/__tests__/container.test.ts:32:34
            </failure>
        </testcase>
        <testcase classname="src/shared/infrastructure/di/__tests__/container.test.ts" name="DI Container &gt; should return same instance for singletons" time="0.004225958">
        </testcase>
        <testcase classname="src/shared/infrastructure/di/__tests__/container.test.ts" name="DI Container &gt; should inject dependencies correctly" time="0.0075985">
            <system-out>
[36m&lt;ref *1&gt;[39m TodoDatabase {
  _middlewares: { dbcore: [ [36m[Object][39m, [36m[Object][39m, [36m[Object][39m, [36m[Object][39m ] },
  verno: [33m8[39m,
  _options: {
    addons: [],
    autoOpen: [33mtrue[39m,
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: Map(0) {} },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _deps: {
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: Map(0) {} },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _dbSchema: {
    tasks: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    dailySelectionEntries: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    taskLogs: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    userSettings: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    syncQueue: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    statsDaily: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    eventStore: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    handledEvents: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    locks: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    }
  },
  _versions: [
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m }
  ],
  _storeNames: [
    [32m&apos;tasks&apos;[39m,
    [32m&apos;dailySelectionEntries&apos;[39m,
    [32m&apos;taskLogs&apos;[39m,
    [32m&apos;userSettings&apos;[39m,
    [32m&apos;syncQueue&apos;[39m,
    [32m&apos;statsDaily&apos;[39m,
    [32m&apos;eventStore&apos;[39m,
    [32m&apos;handledEvents&apos;[39m,
    [32m&apos;locks&apos;[39m
  ],
  _allTables: {
    tasks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m
    },
    dailySelectionEntries: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m
    },
    taskLogs: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m
    },
    userSettings: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m
    },
    syncQueue: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m
    },
    statsDaily: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m
    },
    eventStore: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m
    },
    handledEvents: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m
    },
    locks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m
    }
  },
  idbdb: [1mnull[22m,
  _novip: [36m[Circular *1][39m,
  _state: {
    dbOpenError: [1mnull[22m,
    isBeingOpened: [33mfalse[39m,
    onReadyBeingFired: [1mnull[22m,
    openComplete: [33mfalse[39m,
    dbReadyResolve: [36m[Function (anonymous)][39m,
    dbReadyPromise: DexiePromise [Dexie.Promise] {
      _listeners: [],
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at new DexiePromise [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:153:29[90m)[39m
          at new Dexie [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:127:28[90m)[39m
          at new TodoDatabase [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:104:5[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:295:28
          at InternalDependencyContainer.construct [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:303:11[90m)[39m
          at InternalDependencyContainer.resolveRegistration [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:169:51[90m)[39m
          at InternalDependencyContainer.resolve [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:112:33[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:321:36
          at Array.map (&lt;anonymous&gt;),
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [1mnull[22m,
      _value: [1mnull[22m
    },
    cancelOpen: [36m[Function: bound handleRejection][39m,
    openCanceller: DexiePromise [Dexie.Promise] {
      _listeners: [],
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at new DexiePromise [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:153:29[90m)[39m
          at new Dexie [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:130:27[90m)[39m
          at new TodoDatabase [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:104:5[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:295:28
          at InternalDependencyContainer.construct [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:303:11[90m)[39m
          at InternalDependencyContainer.resolveRegistration [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:169:51[90m)[39m
          at InternalDependencyContainer.resolve [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:112:33[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mtsyringe[24m/dist/cjs/dependency-container.js:321:36
          at Array.map (&lt;anonymous&gt;),
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [1mnull[22m,
      _value: [1mnull[22m
    },
    autoSchema: [33mfalse[39m,
    PR1398_maxLoop: [33m3[39m
  },
  name: [32m&apos;TodoDatabase&apos;[39m,
  on: [Function: rv] {
    addEventType: [36m[Function: add][39m,
    populate: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    blocked: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    versionchange: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    close: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    ready: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function (anonymous)][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    }
  },
  Collection: [36m[Function: Collection][39m,
  Table: [36m[Function: Table][39m,
  Transaction: [36m[Function: Transaction][39m,
  Version: [36m[Function: Version][39m,
  WhereClause: [36m[Function: WhereClause][39m,
  _maxKey: [ [] ],
  _createTransaction: [36m[Function (anonymous)][39m,
  _fireOnBlocked: [36m[Function (anonymous)][39m,
  vip: TodoDatabase {},
  tasks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;tasks&apos;[39m,
    schema: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    }
  },
  dailySelectionEntries: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;dailySelectionEntries&apos;[39m,
    schema: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    }
  },
  taskLogs: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;taskLogs&apos;[39m,
    schema: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    }
  },
  userSettings: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;userSettings&apos;[39m,
    schema: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    }
  },
  syncQueue: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;syncQueue&apos;[39m,
    schema: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    }
  },
  statsDaily: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;statsDaily&apos;[39m,
    schema: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    }
  },
  eventStore: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;eventStore&apos;[39m,
    schema: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    }
  },
  handledEvents: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;handledEvents&apos;[39m,
    schema: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    }
  },
  locks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;locks&apos;[39m,
    schema: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    }
  }
}

            </system-out>
            <failure message="Cannot inject the dependency &quot;debouncedSyncService&quot; at position #3 of &quot;CreateTaskUseCase&quot; constructor. Reason:
    Cannot inject the dependency &quot;syncService&quot; at position #0 of &quot;DebouncedSyncService&quot; constructor. Reason:
        Cannot inject the dependency &quot;syncRepository&quot; at position #1 of &quot;SyncService&quot; constructor. Reason:
            Supabase client not initialized. Call initialize() first." type="Error">
Error: Cannot inject the dependency &quot;debouncedSyncService&quot; at position #3 of &quot;CreateTaskUseCase&quot; constructor. Reason:
    Cannot inject the dependency &quot;syncService&quot; at position #0 of &quot;DebouncedSyncService&quot; constructor. Reason:
        Cannot inject the dependency &quot;syncRepository&quot; at position #1 of &quot;SyncService&quot; constructor. Reason:
            Supabase client not initialized. Call initialize() first.
 ❯ node_modules/tsyringe/dist/cjs/dependency-container.js:330:23
 ❯ node_modules/tsyringe/dist/cjs/dependency-container.js:301:38
 ❯ InternalDependencyContainer.construct node_modules/tsyringe/dist/cjs/dependency-container.js:303:11
 ❯ InternalDependencyContainer.resolveRegistration node_modules/tsyringe/dist/cjs/dependency-container.js:169:51
 ❯ InternalDependencyContainer.resolve node_modules/tsyringe/dist/cjs/dependency-container.js:112:33
 ❯ src/shared/infrastructure/di/__tests__/container.test.ts:43:41
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" timestamp="2025-08-09T13:38:10.882Z" hostname="MacBook-Egor.local" tests="30" failures="0" errors="0" skipped="0" time="1.073969">
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; addTaskToDay and isTaskSelectedForDay &gt; should add a task to daily selection" time="0.066111">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; addTaskToDay and isTaskSelectedForDay &gt; should be idempotent - adding same task twice should not create duplicates" time="0.028453209">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; addTaskToDay and isTaskSelectedForDay &gt; should return false for non-selected task" time="0.017285625">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; removeTaskFromDay &gt; should remove a task from daily selection" time="0.022982833">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; removeTaskFromDay &gt; should not throw error when removing non-existent task" time="0.011671208">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; getTasksForDay and getTaskIdsForDay &gt; should return all tasks selected for a specific day" time="0.076787708">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; getTasksForDay and getTaskIdsForDay &gt; should return empty array for day with no selections" time="0.0232835">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; markTaskCompleted and getTaskCompletionStatus &gt; should mark task as completed and retrieve completion status" time="0.053299541">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; markTaskCompleted and getTaskCompletionStatus &gt; should return null for completion status of non-selected task" time="0.055589875">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; getDailySelectionsForRange &gt; should return selections within date range" time="0.240818042">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; getDailySelectionsForRange &gt; should return empty array for range with no selections" time="0.033109459">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; clearDay &gt; should clear all selections for a specific day" time="0.032405833">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; countTasksForDay &gt; should count tasks selected for a specific day" time="0.02602225">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; getLastSelectionDateForTask &gt; should return the most recent selection date for a task" time="0.017108416">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; getLastSelectionDateForTask &gt; should return null for task that was never selected" time="0.0087165">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; unique constraint handling &gt; should handle UNIQUE(date, taskId) constraint properly" time="0.018008834">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; unique constraint handling &gt; should allow same task on different dates" time="0.01882325">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; unique constraint handling &gt; should allow different tasks on same date" time="0.014368333">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; completion flag behavior &gt; should initialize completion flag as false when adding task" time="0.010153042">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; completion flag behavior &gt; should preserve completion flag when task is re-added" time="0.026015542">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; soft delete behavior &gt; should exclude soft-deleted entries from getTasksForDay" time="0.018672167">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; soft delete behavior &gt; should exclude soft-deleted entries from isTaskSelectedForDay" time="0.028765625">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; soft delete behavior &gt; should exclude soft-deleted entries from countTasksForDay" time="0.047216917">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; soft delete behavior &gt; should exclude soft-deleted entries from getDailySelectionsForRange" time="0.044725792">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; soft delete behavior &gt; should exclude soft-deleted entries from getLastSelectionDateForTask" time="0.0220485">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; soft delete behavior &gt; should allow re-adding task after soft delete" time="0.017346167">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; soft delete behavior &gt; should soft delete all entries when clearing day" time="0.019976625">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; removeTaskFromAllDays &gt; should soft delete task from all daily selections" time="0.035264375">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; removeTaskFromAllDays &gt; should handle removeTaskFromAllDays for non-existent task" time="0.017763083">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/DailySelectionRepositoryImpl.test.ts" name="DailySelectionRepositoryImpl &gt; removeTaskFromAllDays &gt; should handle removeTaskFromAllDays for already soft-deleted task" time="0.017811125">
            <system-out>
Database initialized successfully

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/shared/infrastructure/repositories/__tests__/SupabaseSyncRepository.test.ts" timestamp="2025-08-09T13:38:10.886Z" hostname="MacBook-Egor.local" tests="2" failures="2" errors="0" skipped="0" time="0.002957709">
        <testcase classname="src/shared/infrastructure/repositories/__tests__/SupabaseSyncRepository.test.ts" name="SupabaseSyncRepository - First Device Login Fix &gt; should not call pushTasks when localTasks is empty (first device login)" time="0.00202225">
            <failure message="this.clientFactory.getClient is not a function" type="TypeError">
TypeError: this.clientFactory.getClient is not a function
 ❯ new SupabaseSyncRepository src/shared/infrastructure/repositories/SupabaseSyncRepository.ts:44:38
 ❯ src/shared/infrastructure/repositories/__tests__/SupabaseSyncRepository.test.ts:43:18
            </failure>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/SupabaseSyncRepository.test.ts" name="SupabaseSyncRepository - First Device Login Fix &gt; should call pushTasks when localTasks is not empty" time="0.000331125">
            <failure message="this.clientFactory.getClient is not a function" type="TypeError">
TypeError: this.clientFactory.getClient is not a function
 ❯ new SupabaseSyncRepository src/shared/infrastructure/repositories/SupabaseSyncRepository.ts:44:38
 ❯ src/shared/infrastructure/repositories/__tests__/SupabaseSyncRepository.test.ts:43:18
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts" timestamp="2025-08-09T13:38:10.887Z" hostname="MacBook-Egor.local" tests="18" failures="2" errors="0" skipped="0" time="0.369876333">
        <testcase classname="src/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts" name="TaskRepositoryImpl &gt; save and findById &gt; should save and retrieve a task" time="0.042446833">
            <system-out>
Database initialized successfully

[36m&lt;ref *1&gt;[39m TodoDatabase {
  _middlewares: { dbcore: [ [36m[Object][39m, [36m[Object][39m, [36m[Object][39m, [36m[Object][39m ] },
  verno: [33m8[39m,
  _options: {
    addons: [],
    autoOpen: [33mtrue[39m,
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _deps: {
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _dbSchema: {
    tasks: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    dailySelectionEntries: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    taskLogs: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    userSettings: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    syncQueue: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    statsDaily: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    eventStore: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    handledEvents: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    locks: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    }
  },
  _versions: [
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m }
  ],
  _storeNames: [
    [32m&apos;tasks&apos;[39m,
    [32m&apos;dailySelectionEntries&apos;[39m,
    [32m&apos;taskLogs&apos;[39m,
    [32m&apos;userSettings&apos;[39m,
    [32m&apos;syncQueue&apos;[39m,
    [32m&apos;statsDaily&apos;[39m,
    [32m&apos;eventStore&apos;[39m,
    [32m&apos;handledEvents&apos;[39m,
    [32m&apos;locks&apos;[39m
  ],
  _allTables: {
    tasks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    dailySelectionEntries: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    taskLogs: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    userSettings: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    syncQueue: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    statsDaily: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    eventStore: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    handledEvents: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    locks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    }
  },
  idbdb: FDBDatabase {
    listeners: [],
    _closePending: [33mfalse[39m,
    _closed: [33mfalse[39m,
    _runningVersionchangeTransaction: [33mfalse[39m,
    _rawDatabase: Database {
      deletePending: [33mfalse[39m,
      transactions: [36m[Array][39m,
      rawObjectStores: [36m[Map][39m,
      connections: [36m[Array][39m,
      name: [32m&apos;TodoDatabase&apos;[39m,
      version: [33m80[39m,
      processTransactions: [36m[Function: bound processTransactions][39m
    },
    name: [32m&apos;TodoDatabase&apos;[39m,
    version: [33m80[39m,
    objectStoreNames: FakeDOMStringList(9) [
      [32m&apos;dailySelectionEntries&apos;[39m,
      [32m&apos;eventStore&apos;[39m,
      [32m&apos;handledEvents&apos;[39m,
      [32m&apos;locks&apos;[39m,
      [32m&apos;statsDaily&apos;[39m,
      [32m&apos;syncQueue&apos;[39m,
      [32m&apos;taskLogs&apos;[39m,
      [32m&apos;tasks&apos;[39m,
      [32m&apos;userSettings&apos;[39m
    ],
    onversionchange: [36m[Function (anonymous)][39m,
    onclose: [36m[Function (anonymous)][39m
  },
  _novip: [36m[Circular *1][39m,
  _state: {
    dbOpenError: [1mnull[22m,
    isBeingOpened: [33mfalse[39m,
    onReadyBeingFired: [1mnull[22m,
    openComplete: [33mtrue[39m,
    dbReadyResolve: [36m[Function (anonymous)][39m,
    dbReadyPromise: DexiePromise [Dexie.Promise] {
      _listeners: [],
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at new DexiePromise [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:153:29[90m)[39m
          at new Dexie [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:127:28[90m)[39m
          at new TodoDatabase [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:104:5[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:15:10
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [33mtrue[39m,
      _value: [90mundefined[39m
    },
    cancelOpen: [36m[Function: bound handleRejection][39m,
    openCanceller: DexiePromise [Dexie.Promise] {
      _listeners: [36m[Array][39m,
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at Debug.getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at dexieOpen [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie-open.ts:24:54[90m)[39m
          at TodoDatabase.Dexie.open [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:285:12[90m)[39m
          at TodoDatabase.initialize [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:384:18[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:16:14
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [1mnull[22m,
      _value: [1mnull[22m
    },
    autoSchema: [33mfalse[39m,
    PR1398_maxLoop: [33m3[39m
  },
  name: [32m&apos;TodoDatabase&apos;[39m,
  on: [Function: rv] {
    addEventType: [36m[Function: add][39m,
    populate: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    blocked: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    versionchange: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    close: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    ready: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function (anonymous)][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    }
  },
  Collection: [36m[Function: Collection][39m,
  Table: [36m[Function: Table][39m,
  Transaction: [36m[Function: Transaction][39m,
  Version: [36m[Function: Version][39m,
  WhereClause: [36m[Function: WhereClause][39m,
  _maxKey: [ [] ],
  _createTransaction: [36m[Function (anonymous)][39m,
  _fireOnBlocked: [36m[Function (anonymous)][39m,
  vip: TodoDatabase {},
  tasks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;tasks&apos;[39m,
    schema: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  dailySelectionEntries: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;dailySelectionEntries&apos;[39m,
    schema: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  taskLogs: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;taskLogs&apos;[39m,
    schema: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  userSettings: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;userSettings&apos;[39m,
    schema: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  syncQueue: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;syncQueue&apos;[39m,
    schema: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  statsDaily: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;statsDaily&apos;[39m,
    schema: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  eventStore: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;eventStore&apos;[39m,
    schema: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  handledEvents: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;handledEvents&apos;[39m,
    schema: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  locks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;locks&apos;[39m,
    schema: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  core: {
    stack: [32m&apos;dbcore&apos;[39m,
    transaction: [36m[Function: bound transaction][39m,
    table: [36m[Function: table][39m,
    MIN_KEY: [33m-Infinity[39m,
    MAX_KEY: [ [] ],
    schema: { name: [32m&apos;TodoDatabase&apos;[39m, tables: [36m[FakeDOMStringList][39m }
  },
  _hasGetAll: [33mtrue[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts" name="TaskRepositoryImpl &gt; save and findById &gt; should return null for non-existent task" time="0.023694458">
            <system-out>
Database initialized successfully

[36m&lt;ref *1&gt;[39m TodoDatabase {
  _middlewares: { dbcore: [ [36m[Object][39m, [36m[Object][39m, [36m[Object][39m, [36m[Object][39m ] },
  verno: [33m8[39m,
  _options: {
    addons: [],
    autoOpen: [33mtrue[39m,
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _deps: {
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _dbSchema: {
    tasks: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    dailySelectionEntries: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    taskLogs: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    userSettings: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    syncQueue: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    statsDaily: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    eventStore: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    handledEvents: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    locks: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    }
  },
  _versions: [
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m }
  ],
  _storeNames: [
    [32m&apos;tasks&apos;[39m,
    [32m&apos;dailySelectionEntries&apos;[39m,
    [32m&apos;taskLogs&apos;[39m,
    [32m&apos;userSettings&apos;[39m,
    [32m&apos;syncQueue&apos;[39m,
    [32m&apos;statsDaily&apos;[39m,
    [32m&apos;eventStore&apos;[39m,
    [32m&apos;handledEvents&apos;[39m,
    [32m&apos;locks&apos;[39m
  ],
  _allTables: {
    tasks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    dailySelectionEntries: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    taskLogs: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    userSettings: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    syncQueue: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    statsDaily: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    eventStore: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    handledEvents: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    locks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    }
  },
  idbdb: FDBDatabase {
    listeners: [],
    _closePending: [33mfalse[39m,
    _closed: [33mfalse[39m,
    _runningVersionchangeTransaction: [33mfalse[39m,
    _rawDatabase: Database {
      deletePending: [33mfalse[39m,
      transactions: [36m[Array][39m,
      rawObjectStores: [36m[Map][39m,
      connections: [36m[Array][39m,
      name: [32m&apos;TodoDatabase&apos;[39m,
      version: [33m80[39m,
      processTransactions: [36m[Function: bound processTransactions][39m
    },
    name: [32m&apos;TodoDatabase&apos;[39m,
    version: [33m80[39m,
    objectStoreNames: FakeDOMStringList(9) [
      [32m&apos;dailySelectionEntries&apos;[39m,
      [32m&apos;eventStore&apos;[39m,
      [32m&apos;handledEvents&apos;[39m,
      [32m&apos;locks&apos;[39m,
      [32m&apos;statsDaily&apos;[39m,
      [32m&apos;syncQueue&apos;[39m,
      [32m&apos;taskLogs&apos;[39m,
      [32m&apos;tasks&apos;[39m,
      [32m&apos;userSettings&apos;[39m
    ],
    onversionchange: [36m[Function (anonymous)][39m,
    onclose: [36m[Function (anonymous)][39m
  },
  _novip: [36m[Circular *1][39m,
  _state: {
    dbOpenError: [1mnull[22m,
    isBeingOpened: [33mfalse[39m,
    onReadyBeingFired: [1mnull[22m,
    openComplete: [33mtrue[39m,
    dbReadyResolve: [36m[Function (anonymous)][39m,
    dbReadyPromise: DexiePromise [Dexie.Promise] {
      _listeners: [],
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at new DexiePromise [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:153:29[90m)[39m
          at new Dexie [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:127:28[90m)[39m
          at new TodoDatabase [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:104:5[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:15:10
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [33mtrue[39m,
      _value: [90mundefined[39m
    },
    cancelOpen: [36m[Function: bound handleRejection][39m,
    openCanceller: DexiePromise [Dexie.Promise] {
      _listeners: [36m[Array][39m,
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at Debug.getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at dexieOpen [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie-open.ts:24:54[90m)[39m
          at TodoDatabase.Dexie.open [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:285:12[90m)[39m
          at TodoDatabase.initialize [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:384:18[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:16:14
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [1mnull[22m,
      _value: [1mnull[22m
    },
    autoSchema: [33mfalse[39m,
    PR1398_maxLoop: [33m3[39m
  },
  name: [32m&apos;TodoDatabase&apos;[39m,
  on: [Function: rv] {
    addEventType: [36m[Function: add][39m,
    populate: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    blocked: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    versionchange: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    close: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    ready: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function (anonymous)][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    }
  },
  Collection: [36m[Function: Collection][39m,
  Table: [36m[Function: Table][39m,
  Transaction: [36m[Function: Transaction][39m,
  Version: [36m[Function: Version][39m,
  WhereClause: [36m[Function: WhereClause][39m,
  _maxKey: [ [] ],
  _createTransaction: [36m[Function (anonymous)][39m,
  _fireOnBlocked: [36m[Function (anonymous)][39m,
  vip: TodoDatabase {},
  tasks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;tasks&apos;[39m,
    schema: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  dailySelectionEntries: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;dailySelectionEntries&apos;[39m,
    schema: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  taskLogs: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;taskLogs&apos;[39m,
    schema: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  userSettings: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;userSettings&apos;[39m,
    schema: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  syncQueue: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;syncQueue&apos;[39m,
    schema: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  statsDaily: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;statsDaily&apos;[39m,
    schema: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  eventStore: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;eventStore&apos;[39m,
    schema: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  handledEvents: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;handledEvents&apos;[39m,
    schema: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  locks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;locks&apos;[39m,
    schema: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  _hasGetAll: [33mtrue[39m,
  core: {
    stack: [32m&apos;dbcore&apos;[39m,
    transaction: [36m[Function: bound transaction][39m,
    table: [36m[Function: table][39m,
    MIN_KEY: [33m-Infinity[39m,
    MAX_KEY: [ [] ],
    schema: { name: [32m&apos;TodoDatabase&apos;[39m, tables: [36m[FakeDOMStringList][39m }
  }
}

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts" name="TaskRepositoryImpl &gt; save and findById &gt; should return null for soft-deleted task" time="0.032200458">
            <system-out>
Database initialized successfully

[36m&lt;ref *1&gt;[39m TodoDatabase {
  _middlewares: { dbcore: [ [36m[Object][39m, [36m[Object][39m, [36m[Object][39m, [36m[Object][39m ] },
  verno: [33m8[39m,
  _options: {
    addons: [],
    autoOpen: [33mtrue[39m,
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _deps: {
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _dbSchema: {
    tasks: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    dailySelectionEntries: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    taskLogs: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    userSettings: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    syncQueue: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    statsDaily: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    eventStore: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    handledEvents: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    locks: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    }
  },
  _versions: [
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m }
  ],
  _storeNames: [
    [32m&apos;tasks&apos;[39m,
    [32m&apos;dailySelectionEntries&apos;[39m,
    [32m&apos;taskLogs&apos;[39m,
    [32m&apos;userSettings&apos;[39m,
    [32m&apos;syncQueue&apos;[39m,
    [32m&apos;statsDaily&apos;[39m,
    [32m&apos;eventStore&apos;[39m,
    [32m&apos;handledEvents&apos;[39m,
    [32m&apos;locks&apos;[39m
  ],
  _allTables: {
    tasks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    dailySelectionEntries: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    taskLogs: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    userSettings: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    syncQueue: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    statsDaily: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    eventStore: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    handledEvents: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    locks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    }
  },
  idbdb: FDBDatabase {
    listeners: [],
    _closePending: [33mfalse[39m,
    _closed: [33mfalse[39m,
    _runningVersionchangeTransaction: [33mfalse[39m,
    _rawDatabase: Database {
      deletePending: [33mfalse[39m,
      transactions: [36m[Array][39m,
      rawObjectStores: [36m[Map][39m,
      connections: [36m[Array][39m,
      name: [32m&apos;TodoDatabase&apos;[39m,
      version: [33m80[39m,
      processTransactions: [36m[Function: bound processTransactions][39m
    },
    name: [32m&apos;TodoDatabase&apos;[39m,
    version: [33m80[39m,
    objectStoreNames: FakeDOMStringList(9) [
      [32m&apos;dailySelectionEntries&apos;[39m,
      [32m&apos;eventStore&apos;[39m,
      [32m&apos;handledEvents&apos;[39m,
      [32m&apos;locks&apos;[39m,
      [32m&apos;statsDaily&apos;[39m,
      [32m&apos;syncQueue&apos;[39m,
      [32m&apos;taskLogs&apos;[39m,
      [32m&apos;tasks&apos;[39m,
      [32m&apos;userSettings&apos;[39m
    ],
    onversionchange: [36m[Function (anonymous)][39m,
    onclose: [36m[Function (anonymous)][39m
  },
  _novip: [36m[Circular *1][39m,
  _state: {
    dbOpenError: [1mnull[22m,
    isBeingOpened: [33mfalse[39m,
    onReadyBeingFired: [1mnull[22m,
    openComplete: [33mtrue[39m,
    dbReadyResolve: [36m[Function (anonymous)][39m,
    dbReadyPromise: DexiePromise [Dexie.Promise] {
      _listeners: [],
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at new DexiePromise [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:153:29[90m)[39m
          at new Dexie [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:127:28[90m)[39m
          at new TodoDatabase [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:104:5[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:15:10
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [33mtrue[39m,
      _value: [90mundefined[39m
    },
    cancelOpen: [36m[Function: bound handleRejection][39m,
    openCanceller: DexiePromise [Dexie.Promise] {
      _listeners: [36m[Array][39m,
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at Debug.getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at dexieOpen [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie-open.ts:24:54[90m)[39m
          at TodoDatabase.Dexie.open [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:285:12[90m)[39m
          at TodoDatabase.initialize [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:384:18[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:16:14
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [1mnull[22m,
      _value: [1mnull[22m
    },
    autoSchema: [33mfalse[39m,
    PR1398_maxLoop: [33m3[39m
  },
  name: [32m&apos;TodoDatabase&apos;[39m,
  on: [Function: rv] {
    addEventType: [36m[Function: add][39m,
    populate: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    blocked: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    versionchange: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    close: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    ready: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function (anonymous)][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    }
  },
  Collection: [36m[Function: Collection][39m,
  Table: [36m[Function: Table][39m,
  Transaction: [36m[Function: Transaction][39m,
  Version: [36m[Function: Version][39m,
  WhereClause: [36m[Function: WhereClause][39m,
  _maxKey: [ [] ],
  _createTransaction: [36m[Function (anonymous)][39m,
  _fireOnBlocked: [36m[Function (anonymous)][39m,
  vip: TodoDatabase {},
  tasks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;tasks&apos;[39m,
    schema: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  dailySelectionEntries: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;dailySelectionEntries&apos;[39m,
    schema: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  taskLogs: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;taskLogs&apos;[39m,
    schema: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  userSettings: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;userSettings&apos;[39m,
    schema: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  syncQueue: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;syncQueue&apos;[39m,
    schema: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  statsDaily: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;statsDaily&apos;[39m,
    schema: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  eventStore: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;eventStore&apos;[39m,
    schema: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  handledEvents: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;handledEvents&apos;[39m,
    schema: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  locks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;locks&apos;[39m,
    schema: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  _hasGetAll: [33mtrue[39m,
  core: {
    stack: [32m&apos;dbcore&apos;[39m,
    transaction: [36m[Function: bound transaction][39m,
    table: [36m[Function: table][39m,
    MIN_KEY: [33m-Infinity[39m,
    MAX_KEY: [ [] ],
    schema: { name: [32m&apos;TodoDatabase&apos;[39m, tables: [36m[FakeDOMStringList][39m }
  }
}

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts" name="TaskRepositoryImpl &gt; findAll &gt; should return all active tasks" time="0.014896083">
            <system-out>
Database initialized successfully

[36m&lt;ref *1&gt;[39m TodoDatabase {
  _middlewares: { dbcore: [ [36m[Object][39m, [36m[Object][39m, [36m[Object][39m, [36m[Object][39m ] },
  verno: [33m8[39m,
  _options: {
    addons: [],
    autoOpen: [33mtrue[39m,
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _deps: {
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _dbSchema: {
    tasks: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    dailySelectionEntries: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    taskLogs: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    userSettings: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    syncQueue: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    statsDaily: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    eventStore: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    handledEvents: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    locks: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    }
  },
  _versions: [
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m }
  ],
  _storeNames: [
    [32m&apos;tasks&apos;[39m,
    [32m&apos;dailySelectionEntries&apos;[39m,
    [32m&apos;taskLogs&apos;[39m,
    [32m&apos;userSettings&apos;[39m,
    [32m&apos;syncQueue&apos;[39m,
    [32m&apos;statsDaily&apos;[39m,
    [32m&apos;eventStore&apos;[39m,
    [32m&apos;handledEvents&apos;[39m,
    [32m&apos;locks&apos;[39m
  ],
  _allTables: {
    tasks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    dailySelectionEntries: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    taskLogs: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    userSettings: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    syncQueue: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    statsDaily: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    eventStore: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    handledEvents: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    locks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    }
  },
  idbdb: FDBDatabase {
    listeners: [],
    _closePending: [33mfalse[39m,
    _closed: [33mfalse[39m,
    _runningVersionchangeTransaction: [33mfalse[39m,
    _rawDatabase: Database {
      deletePending: [33mfalse[39m,
      transactions: [36m[Array][39m,
      rawObjectStores: [36m[Map][39m,
      connections: [36m[Array][39m,
      name: [32m&apos;TodoDatabase&apos;[39m,
      version: [33m80[39m,
      processTransactions: [36m[Function: bound processTransactions][39m
    },
    name: [32m&apos;TodoDatabase&apos;[39m,
    version: [33m80[39m,
    objectStoreNames: FakeDOMStringList(9) [
      [32m&apos;dailySelectionEntries&apos;[39m,
      [32m&apos;eventStore&apos;[39m,
      [32m&apos;handledEvents&apos;[39m,
      [32m&apos;locks&apos;[39m,
      [32m&apos;statsDaily&apos;[39m,
      [32m&apos;syncQueue&apos;[39m,
      [32m&apos;taskLogs&apos;[39m,
      [32m&apos;tasks&apos;[39m,
      [32m&apos;userSettings&apos;[39m
    ],
    onversionchange: [36m[Function (anonymous)][39m,
    onclose: [36m[Function (anonymous)][39m
  },
  _novip: [36m[Circular *1][39m,
  _state: {
    dbOpenError: [1mnull[22m,
    isBeingOpened: [33mfalse[39m,
    onReadyBeingFired: [1mnull[22m,
    openComplete: [33mtrue[39m,
    dbReadyResolve: [36m[Function (anonymous)][39m,
    dbReadyPromise: DexiePromise [Dexie.Promise] {
      _listeners: [],
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at new DexiePromise [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:153:29[90m)[39m
          at new Dexie [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:127:28[90m)[39m
          at new TodoDatabase [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:104:5[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:15:10
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [33mtrue[39m,
      _value: [90mundefined[39m
    },
    cancelOpen: [36m[Function: bound handleRejection][39m,
    openCanceller: DexiePromise [Dexie.Promise] {
      _listeners: [36m[Array][39m,
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at Debug.getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at dexieOpen [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie-open.ts:24:54[90m)[39m
          at TodoDatabase.Dexie.open [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:285:12[90m)[39m
          at TodoDatabase.initialize [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:384:18[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:16:14
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [1mnull[22m,
      _value: [1mnull[22m
    },
    autoSchema: [33mfalse[39m,
    PR1398_maxLoop: [33m3[39m
  },
  name: [32m&apos;TodoDatabase&apos;[39m,
  on: [Function: rv] {
    addEventType: [36m[Function: add][39m,
    populate: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    blocked: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    versionchange: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    close: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    ready: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function (anonymous)][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    }
  },
  Collection: [36m[Function: Collection][39m,
  Table: [36m[Function: Table][39m,
  Transaction: [36m[Function: Transaction][39m,
  Version: [36m[Function: Version][39m,
  WhereClause: [36m[Function: WhereClause][39m,
  _maxKey: [ [] ],
  _createTransaction: [36m[Function (anonymous)][39m,
  _fireOnBlocked: [36m[Function (anonymous)][39m,
  vip: TodoDatabase {},
  tasks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;tasks&apos;[39m,
    schema: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  dailySelectionEntries: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;dailySelectionEntries&apos;[39m,
    schema: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  taskLogs: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;taskLogs&apos;[39m,
    schema: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  userSettings: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;userSettings&apos;[39m,
    schema: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  syncQueue: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;syncQueue&apos;[39m,
    schema: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  statsDaily: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;statsDaily&apos;[39m,
    schema: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  eventStore: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;eventStore&apos;[39m,
    schema: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  handledEvents: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;handledEvents&apos;[39m,
    schema: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  locks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;locks&apos;[39m,
    schema: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  _hasGetAll: [33mtrue[39m,
  core: {
    stack: [32m&apos;dbcore&apos;[39m,
    transaction: [36m[Function: bound transaction][39m,
    table: [36m[Function: table][39m,
    MIN_KEY: [33m-Infinity[39m,
    MAX_KEY: [ [] ],
    schema: { name: [32m&apos;TodoDatabase&apos;[39m, tables: [36m[FakeDOMStringList][39m }
  }
}

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts" name="TaskRepositoryImpl &gt; findAll &gt; should return empty array when no tasks exist" time="0.010772333">
            <system-out>
Database initialized successfully

[36m&lt;ref *1&gt;[39m TodoDatabase {
  _middlewares: { dbcore: [ [36m[Object][39m, [36m[Object][39m, [36m[Object][39m, [36m[Object][39m ] },
  verno: [33m8[39m,
  _options: {
    addons: [],
    autoOpen: [33mtrue[39m,
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _deps: {
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _dbSchema: {
    tasks: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    dailySelectionEntries: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    taskLogs: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    userSettings: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    syncQueue: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    statsDaily: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    eventStore: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    handledEvents: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    locks: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    }
  },
  _versions: [
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m }
  ],
  _storeNames: [
    [32m&apos;tasks&apos;[39m,
    [32m&apos;dailySelectionEntries&apos;[39m,
    [32m&apos;taskLogs&apos;[39m,
    [32m&apos;userSettings&apos;[39m,
    [32m&apos;syncQueue&apos;[39m,
    [32m&apos;statsDaily&apos;[39m,
    [32m&apos;eventStore&apos;[39m,
    [32m&apos;handledEvents&apos;[39m,
    [32m&apos;locks&apos;[39m
  ],
  _allTables: {
    tasks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    dailySelectionEntries: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    taskLogs: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    userSettings: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    syncQueue: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    statsDaily: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    eventStore: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    handledEvents: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    locks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    }
  },
  idbdb: FDBDatabase {
    listeners: [],
    _closePending: [33mfalse[39m,
    _closed: [33mfalse[39m,
    _runningVersionchangeTransaction: [33mfalse[39m,
    _rawDatabase: Database {
      deletePending: [33mfalse[39m,
      transactions: [36m[Array][39m,
      rawObjectStores: [36m[Map][39m,
      connections: [36m[Array][39m,
      name: [32m&apos;TodoDatabase&apos;[39m,
      version: [33m80[39m,
      processTransactions: [36m[Function: bound processTransactions][39m
    },
    name: [32m&apos;TodoDatabase&apos;[39m,
    version: [33m80[39m,
    objectStoreNames: FakeDOMStringList(9) [
      [32m&apos;dailySelectionEntries&apos;[39m,
      [32m&apos;eventStore&apos;[39m,
      [32m&apos;handledEvents&apos;[39m,
      [32m&apos;locks&apos;[39m,
      [32m&apos;statsDaily&apos;[39m,
      [32m&apos;syncQueue&apos;[39m,
      [32m&apos;taskLogs&apos;[39m,
      [32m&apos;tasks&apos;[39m,
      [32m&apos;userSettings&apos;[39m
    ],
    onversionchange: [36m[Function (anonymous)][39m,
    onclose: [36m[Function (anonymous)][39m
  },
  _novip: [36m[Circular *1][39m,
  _state: {
    dbOpenError: [1mnull[22m,
    isBeingOpened: [33mfalse[39m,
    onReadyBeingFired: [1mnull[22m,
    openComplete: [33mtrue[39m,
    dbReadyResolve: [36m[Function (anonymous)][39m,
    dbReadyPromise: DexiePromise [Dexie.Promise] {
      _listeners: [],
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at new DexiePromise [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:153:29[90m)[39m
          at new Dexie [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:127:28[90m)[39m
          at new TodoDatabase [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:104:5[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:15:10
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [33mtrue[39m,
      _value: [90mundefined[39m
    },
    cancelOpen: [36m[Function: bound handleRejection][39m,
    openCanceller: DexiePromise [Dexie.Promise] {
      _listeners: [36m[Array][39m,
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at Debug.getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at dexieOpen [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie-open.ts:24:54[90m)[39m
          at TodoDatabase.Dexie.open [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:285:12[90m)[39m
          at TodoDatabase.initialize [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:384:18[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:16:14
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [1mnull[22m,
      _value: [1mnull[22m
    },
    autoSchema: [33mfalse[39m,
    PR1398_maxLoop: [33m3[39m
  },
  name: [32m&apos;TodoDatabase&apos;[39m,
  on: [Function: rv] {
    addEventType: [36m[Function: add][39m,
    populate: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    blocked: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    versionchange: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    close: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    ready: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function (anonymous)][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    }
  },
  Collection: [36m[Function: Collection][39m,
  Table: [36m[Function: Table][39m,
  Transaction: [36m[Function: Transaction][39m,
  Version: [36m[Function: Version][39m,
  WhereClause: [36m[Function: WhereClause][39m,
  _maxKey: [ [] ],
  _createTransaction: [36m[Function (anonymous)][39m,
  _fireOnBlocked: [36m[Function (anonymous)][39m,
  vip: TodoDatabase {},
  tasks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;tasks&apos;[39m,
    schema: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  dailySelectionEntries: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;dailySelectionEntries&apos;[39m,
    schema: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  taskLogs: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;taskLogs&apos;[39m,
    schema: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  userSettings: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;userSettings&apos;[39m,
    schema: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  syncQueue: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;syncQueue&apos;[39m,
    schema: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  statsDaily: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;statsDaily&apos;[39m,
    schema: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  eventStore: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;eventStore&apos;[39m,
    schema: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  handledEvents: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;handledEvents&apos;[39m,
    schema: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  locks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;locks&apos;[39m,
    schema: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  _hasGetAll: [33mtrue[39m,
  core: {
    stack: [32m&apos;dbcore&apos;[39m,
    transaction: [36m[Function: bound transaction][39m,
    table: [36m[Function: table][39m,
    MIN_KEY: [33m-Infinity[39m,
    MAX_KEY: [ [] ],
    schema: { name: [32m&apos;TodoDatabase&apos;[39m, tables: [36m[FakeDOMStringList][39m }
  }
}

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts" name="TaskRepositoryImpl &gt; findByCategory &gt; should return tasks filtered by category" time="0.011619667">
            <system-out>
Database initialized successfully

[36m&lt;ref *1&gt;[39m TodoDatabase {
  _middlewares: { dbcore: [ [36m[Object][39m, [36m[Object][39m, [36m[Object][39m, [36m[Object][39m ] },
  verno: [33m8[39m,
  _options: {
    addons: [],
    autoOpen: [33mtrue[39m,
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _deps: {
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _dbSchema: {
    tasks: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    dailySelectionEntries: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    taskLogs: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    userSettings: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    syncQueue: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    statsDaily: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    eventStore: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    handledEvents: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    locks: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    }
  },
  _versions: [
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m }
  ],
  _storeNames: [
    [32m&apos;tasks&apos;[39m,
    [32m&apos;dailySelectionEntries&apos;[39m,
    [32m&apos;taskLogs&apos;[39m,
    [32m&apos;userSettings&apos;[39m,
    [32m&apos;syncQueue&apos;[39m,
    [32m&apos;statsDaily&apos;[39m,
    [32m&apos;eventStore&apos;[39m,
    [32m&apos;handledEvents&apos;[39m,
    [32m&apos;locks&apos;[39m
  ],
  _allTables: {
    tasks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    dailySelectionEntries: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    taskLogs: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    userSettings: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    syncQueue: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    statsDaily: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    eventStore: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    handledEvents: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    locks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    }
  },
  idbdb: FDBDatabase {
    listeners: [],
    _closePending: [33mfalse[39m,
    _closed: [33mfalse[39m,
    _runningVersionchangeTransaction: [33mfalse[39m,
    _rawDatabase: Database {
      deletePending: [33mfalse[39m,
      transactions: [36m[Array][39m,
      rawObjectStores: [36m[Map][39m,
      connections: [36m[Array][39m,
      name: [32m&apos;TodoDatabase&apos;[39m,
      version: [33m80[39m,
      processTransactions: [36m[Function: bound processTransactions][39m
    },
    name: [32m&apos;TodoDatabase&apos;[39m,
    version: [33m80[39m,
    objectStoreNames: FakeDOMStringList(9) [
      [32m&apos;dailySelectionEntries&apos;[39m,
      [32m&apos;eventStore&apos;[39m,
      [32m&apos;handledEvents&apos;[39m,
      [32m&apos;locks&apos;[39m,
      [32m&apos;statsDaily&apos;[39m,
      [32m&apos;syncQueue&apos;[39m,
      [32m&apos;taskLogs&apos;[39m,
      [32m&apos;tasks&apos;[39m,
      [32m&apos;userSettings&apos;[39m
    ],
    onversionchange: [36m[Function (anonymous)][39m,
    onclose: [36m[Function (anonymous)][39m
  },
  _novip: [36m[Circular *1][39m,
  _state: {
    dbOpenError: [1mnull[22m,
    isBeingOpened: [33mfalse[39m,
    onReadyBeingFired: [1mnull[22m,
    openComplete: [33mtrue[39m,
    dbReadyResolve: [36m[Function (anonymous)][39m,
    dbReadyPromise: DexiePromise [Dexie.Promise] {
      _listeners: [],
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at new DexiePromise [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:153:29[90m)[39m
          at new Dexie [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:127:28[90m)[39m
          at new TodoDatabase [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:104:5[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:15:10
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [33mtrue[39m,
      _value: [90mundefined[39m
    },
    cancelOpen: [36m[Function: bound handleRejection][39m,
    openCanceller: DexiePromise [Dexie.Promise] {
      _listeners: [36m[Array][39m,
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at Debug.getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at dexieOpen [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie-open.ts:24:54[90m)[39m
          at TodoDatabase.Dexie.open [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:285:12[90m)[39m
          at TodoDatabase.initialize [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:384:18[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:16:14
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [1mnull[22m,
      _value: [1mnull[22m
    },
    autoSchema: [33mfalse[39m,
    PR1398_maxLoop: [33m3[39m
  },
  name: [32m&apos;TodoDatabase&apos;[39m,
  on: [Function: rv] {
    addEventType: [36m[Function: add][39m,
    populate: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    blocked: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    versionchange: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    close: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    ready: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function (anonymous)][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    }
  },
  Collection: [36m[Function: Collection][39m,
  Table: [36m[Function: Table][39m,
  Transaction: [36m[Function: Transaction][39m,
  Version: [36m[Function: Version][39m,
  WhereClause: [36m[Function: WhereClause][39m,
  _maxKey: [ [] ],
  _createTransaction: [36m[Function (anonymous)][39m,
  _fireOnBlocked: [36m[Function (anonymous)][39m,
  vip: TodoDatabase {},
  tasks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;tasks&apos;[39m,
    schema: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  dailySelectionEntries: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;dailySelectionEntries&apos;[39m,
    schema: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  taskLogs: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;taskLogs&apos;[39m,
    schema: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  userSettings: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;userSettings&apos;[39m,
    schema: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  syncQueue: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;syncQueue&apos;[39m,
    schema: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  statsDaily: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;statsDaily&apos;[39m,
    schema: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  eventStore: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;eventStore&apos;[39m,
    schema: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  handledEvents: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;handledEvents&apos;[39m,
    schema: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  locks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;locks&apos;[39m,
    schema: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  _hasGetAll: [33mtrue[39m,
  core: {
    stack: [32m&apos;dbcore&apos;[39m,
    transaction: [36m[Function: bound transaction][39m,
    table: [36m[Function: table][39m,
    MIN_KEY: [33m-Infinity[39m,
    MAX_KEY: [ [] ],
    schema: { name: [32m&apos;TodoDatabase&apos;[39m, tables: [36m[FakeDOMStringList][39m }
  }
}

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts" name="TaskRepositoryImpl &gt; findByCategory &gt; should exclude soft-deleted tasks from category filter" time="0.031348125">
            <system-out>
Database initialized successfully

[36m&lt;ref *1&gt;[39m TodoDatabase {
  _middlewares: { dbcore: [ [36m[Object][39m, [36m[Object][39m, [36m[Object][39m, [36m[Object][39m ] },
  verno: [33m8[39m,
  _options: {
    addons: [],
    autoOpen: [33mtrue[39m,
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _deps: {
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _dbSchema: {
    tasks: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    dailySelectionEntries: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    taskLogs: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    userSettings: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    syncQueue: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    statsDaily: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    eventStore: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    handledEvents: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    locks: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    }
  },
  _versions: [
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m }
  ],
  _storeNames: [
    [32m&apos;tasks&apos;[39m,
    [32m&apos;dailySelectionEntries&apos;[39m,
    [32m&apos;taskLogs&apos;[39m,
    [32m&apos;userSettings&apos;[39m,
    [32m&apos;syncQueue&apos;[39m,
    [32m&apos;statsDaily&apos;[39m,
    [32m&apos;eventStore&apos;[39m,
    [32m&apos;handledEvents&apos;[39m,
    [32m&apos;locks&apos;[39m
  ],
  _allTables: {
    tasks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    dailySelectionEntries: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    taskLogs: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    userSettings: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    syncQueue: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    statsDaily: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    eventStore: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    handledEvents: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    locks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    }
  },
  idbdb: FDBDatabase {
    listeners: [],
    _closePending: [33mfalse[39m,
    _closed: [33mfalse[39m,
    _runningVersionchangeTransaction: [33mfalse[39m,
    _rawDatabase: Database {
      deletePending: [33mfalse[39m,
      transactions: [36m[Array][39m,
      rawObjectStores: [36m[Map][39m,
      connections: [36m[Array][39m,
      name: [32m&apos;TodoDatabase&apos;[39m,
      version: [33m80[39m,
      processTransactions: [36m[Function: bound processTransactions][39m
    },
    name: [32m&apos;TodoDatabase&apos;[39m,
    version: [33m80[39m,
    objectStoreNames: FakeDOMStringList(9) [
      [32m&apos;dailySelectionEntries&apos;[39m,
      [32m&apos;eventStore&apos;[39m,
      [32m&apos;handledEvents&apos;[39m,
      [32m&apos;locks&apos;[39m,
      [32m&apos;statsDaily&apos;[39m,
      [32m&apos;syncQueue&apos;[39m,
      [32m&apos;taskLogs&apos;[39m,
      [32m&apos;tasks&apos;[39m,
      [32m&apos;userSettings&apos;[39m
    ],
    onversionchange: [36m[Function (anonymous)][39m,
    onclose: [36m[Function (anonymous)][39m
  },
  _novip: [36m[Circular *1][39m,
  _state: {
    dbOpenError: [1mnull[22m,
    isBeingOpened: [33mfalse[39m,
    onReadyBeingFired: [1mnull[22m,
    openComplete: [33mtrue[39m,
    dbReadyResolve: [36m[Function (anonymous)][39m,
    dbReadyPromise: DexiePromise [Dexie.Promise] {
      _listeners: [],
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at new DexiePromise [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:153:29[90m)[39m
          at new Dexie [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:127:28[90m)[39m
          at new TodoDatabase [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:104:5[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:15:10
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [33mtrue[39m,
      _value: [90mundefined[39m
    },
    cancelOpen: [36m[Function: bound handleRejection][39m,
    openCanceller: DexiePromise [Dexie.Promise] {
      _listeners: [36m[Array][39m,
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at Debug.getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at dexieOpen [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie-open.ts:24:54[90m)[39m
          at TodoDatabase.Dexie.open [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:285:12[90m)[39m
          at TodoDatabase.initialize [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:384:18[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:16:14
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [1mnull[22m,
      _value: [1mnull[22m
    },
    autoSchema: [33mfalse[39m,
    PR1398_maxLoop: [33m3[39m
  },
  name: [32m&apos;TodoDatabase&apos;[39m,
  on: [Function: rv] {
    addEventType: [36m[Function: add][39m,
    populate: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    blocked: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    versionchange: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    close: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    ready: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function (anonymous)][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    }
  },
  Collection: [36m[Function: Collection][39m,
  Table: [36m[Function: Table][39m,
  Transaction: [36m[Function: Transaction][39m,
  Version: [36m[Function: Version][39m,
  WhereClause: [36m[Function: WhereClause][39m,
  _maxKey: [ [] ],
  _createTransaction: [36m[Function (anonymous)][39m,
  _fireOnBlocked: [36m[Function (anonymous)][39m,
  vip: TodoDatabase {},
  tasks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;tasks&apos;[39m,
    schema: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  dailySelectionEntries: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;dailySelectionEntries&apos;[39m,
    schema: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  taskLogs: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;taskLogs&apos;[39m,
    schema: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  userSettings: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;userSettings&apos;[39m,
    schema: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  syncQueue: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;syncQueue&apos;[39m,
    schema: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  statsDaily: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;statsDaily&apos;[39m,
    schema: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  eventStore: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;eventStore&apos;[39m,
    schema: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  handledEvents: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;handledEvents&apos;[39m,
    schema: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  locks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;locks&apos;[39m,
    schema: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  _hasGetAll: [33mtrue[39m,
  core: {
    stack: [32m&apos;dbcore&apos;[39m,
    transaction: [36m[Function: bound transaction][39m,
    table: [36m[Function: table][39m,
    MIN_KEY: [33m-Infinity[39m,
    MAX_KEY: [ [] ],
    schema: { name: [32m&apos;TodoDatabase&apos;[39m, tables: [36m[FakeDOMStringList][39m }
  }
}

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts" name="TaskRepositoryImpl &gt; findByStatus &gt; should return tasks filtered by status" time="0.018446791">
            <system-out>
Database initialized successfully

[36m&lt;ref *1&gt;[39m TodoDatabase {
  _middlewares: { dbcore: [ [36m[Object][39m, [36m[Object][39m, [36m[Object][39m, [36m[Object][39m ] },
  verno: [33m8[39m,
  _options: {
    addons: [],
    autoOpen: [33mtrue[39m,
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _deps: {
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _dbSchema: {
    tasks: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    dailySelectionEntries: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    taskLogs: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    userSettings: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    syncQueue: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    statsDaily: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    eventStore: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    handledEvents: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    locks: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    }
  },
  _versions: [
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m }
  ],
  _storeNames: [
    [32m&apos;tasks&apos;[39m,
    [32m&apos;dailySelectionEntries&apos;[39m,
    [32m&apos;taskLogs&apos;[39m,
    [32m&apos;userSettings&apos;[39m,
    [32m&apos;syncQueue&apos;[39m,
    [32m&apos;statsDaily&apos;[39m,
    [32m&apos;eventStore&apos;[39m,
    [32m&apos;handledEvents&apos;[39m,
    [32m&apos;locks&apos;[39m
  ],
  _allTables: {
    tasks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    dailySelectionEntries: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    taskLogs: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    userSettings: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    syncQueue: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    statsDaily: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    eventStore: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    handledEvents: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    locks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    }
  },
  idbdb: FDBDatabase {
    listeners: [],
    _closePending: [33mfalse[39m,
    _closed: [33mfalse[39m,
    _runningVersionchangeTransaction: [33mfalse[39m,
    _rawDatabase: Database {
      deletePending: [33mfalse[39m,
      transactions: [36m[Array][39m,
      rawObjectStores: [36m[Map][39m,
      connections: [36m[Array][39m,
      name: [32m&apos;TodoDatabase&apos;[39m,
      version: [33m80[39m,
      processTransactions: [36m[Function: bound processTransactions][39m
    },
    name: [32m&apos;TodoDatabase&apos;[39m,
    version: [33m80[39m,
    objectStoreNames: FakeDOMStringList(9) [
      [32m&apos;dailySelectionEntries&apos;[39m,
      [32m&apos;eventStore&apos;[39m,
      [32m&apos;handledEvents&apos;[39m,
      [32m&apos;locks&apos;[39m,
      [32m&apos;statsDaily&apos;[39m,
      [32m&apos;syncQueue&apos;[39m,
      [32m&apos;taskLogs&apos;[39m,
      [32m&apos;tasks&apos;[39m,
      [32m&apos;userSettings&apos;[39m
    ],
    onversionchange: [36m[Function (anonymous)][39m,
    onclose: [36m[Function (anonymous)][39m
  },
  _novip: [36m[Circular *1][39m,
  _state: {
    dbOpenError: [1mnull[22m,
    isBeingOpened: [33mfalse[39m,
    onReadyBeingFired: [1mnull[22m,
    openComplete: [33mtrue[39m,
    dbReadyResolve: [36m[Function (anonymous)][39m,
    dbReadyPromise: DexiePromise [Dexie.Promise] {
      _listeners: [],
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at new DexiePromise [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:153:29[90m)[39m
          at new Dexie [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:127:28[90m)[39m
          at new TodoDatabase [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:104:5[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:15:10
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [33mtrue[39m,
      _value: [90mundefined[39m
    },
    cancelOpen: [36m[Function: bound handleRejection][39m,
    openCanceller: DexiePromise [Dexie.Promise] {
      _listeners: [36m[Array][39m,
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at Debug.getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at dexieOpen [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie-open.ts:24:54[90m)[39m
          at TodoDatabase.Dexie.open [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:285:12[90m)[39m
          at TodoDatabase.initialize [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:384:18[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:16:14
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [1mnull[22m,
      _value: [1mnull[22m
    },
    autoSchema: [33mfalse[39m,
    PR1398_maxLoop: [33m3[39m
  },
  name: [32m&apos;TodoDatabase&apos;[39m,
  on: [Function: rv] {
    addEventType: [36m[Function: add][39m,
    populate: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    blocked: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    versionchange: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    close: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    ready: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function (anonymous)][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    }
  },
  Collection: [36m[Function: Collection][39m,
  Table: [36m[Function: Table][39m,
  Transaction: [36m[Function: Transaction][39m,
  Version: [36m[Function: Version][39m,
  WhereClause: [36m[Function: WhereClause][39m,
  _maxKey: [ [] ],
  _createTransaction: [36m[Function (anonymous)][39m,
  _fireOnBlocked: [36m[Function (anonymous)][39m,
  vip: TodoDatabase {},
  tasks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;tasks&apos;[39m,
    schema: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  dailySelectionEntries: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;dailySelectionEntries&apos;[39m,
    schema: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  taskLogs: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;taskLogs&apos;[39m,
    schema: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  userSettings: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;userSettings&apos;[39m,
    schema: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  syncQueue: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;syncQueue&apos;[39m,
    schema: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  statsDaily: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;statsDaily&apos;[39m,
    schema: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  eventStore: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;eventStore&apos;[39m,
    schema: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  handledEvents: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;handledEvents&apos;[39m,
    schema: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  locks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;locks&apos;[39m,
    schema: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  _hasGetAll: [33mtrue[39m,
  core: {
    stack: [32m&apos;dbcore&apos;[39m,
    transaction: [36m[Function: bound transaction][39m,
    table: [36m[Function: table][39m,
    MIN_KEY: [33m-Infinity[39m,
    MAX_KEY: [ [] ],
    schema: { name: [32m&apos;TodoDatabase&apos;[39m, tables: [36m[FakeDOMStringList][39m }
  }
}

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts" name="TaskRepositoryImpl &gt; findByCategoryAndStatus &gt; should return tasks filtered by both category and status" time="0.0196205">
            <system-out>
Database initialized successfully

[36m&lt;ref *1&gt;[39m TodoDatabase {
  _middlewares: { dbcore: [ [36m[Object][39m, [36m[Object][39m, [36m[Object][39m, [36m[Object][39m ] },
  verno: [33m8[39m,
  _options: {
    addons: [],
    autoOpen: [33mtrue[39m,
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _deps: {
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _dbSchema: {
    tasks: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    dailySelectionEntries: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    taskLogs: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    userSettings: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    syncQueue: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    statsDaily: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    eventStore: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    handledEvents: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    locks: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    }
  },
  _versions: [
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m }
  ],
  _storeNames: [
    [32m&apos;tasks&apos;[39m,
    [32m&apos;dailySelectionEntries&apos;[39m,
    [32m&apos;taskLogs&apos;[39m,
    [32m&apos;userSettings&apos;[39m,
    [32m&apos;syncQueue&apos;[39m,
    [32m&apos;statsDaily&apos;[39m,
    [32m&apos;eventStore&apos;[39m,
    [32m&apos;handledEvents&apos;[39m,
    [32m&apos;locks&apos;[39m
  ],
  _allTables: {
    tasks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    dailySelectionEntries: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    taskLogs: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    userSettings: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    syncQueue: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    statsDaily: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    eventStore: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    handledEvents: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    locks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    }
  },
  idbdb: FDBDatabase {
    listeners: [],
    _closePending: [33mfalse[39m,
    _closed: [33mfalse[39m,
    _runningVersionchangeTransaction: [33mfalse[39m,
    _rawDatabase: Database {
      deletePending: [33mfalse[39m,
      transactions: [36m[Array][39m,
      rawObjectStores: [36m[Map][39m,
      connections: [36m[Array][39m,
      name: [32m&apos;TodoDatabase&apos;[39m,
      version: [33m80[39m,
      processTransactions: [36m[Function: bound processTransactions][39m
    },
    name: [32m&apos;TodoDatabase&apos;[39m,
    version: [33m80[39m,
    objectStoreNames: FakeDOMStringList(9) [
      [32m&apos;dailySelectionEntries&apos;[39m,
      [32m&apos;eventStore&apos;[39m,
      [32m&apos;handledEvents&apos;[39m,
      [32m&apos;locks&apos;[39m,
      [32m&apos;statsDaily&apos;[39m,
      [32m&apos;syncQueue&apos;[39m,
      [32m&apos;taskLogs&apos;[39m,
      [32m&apos;tasks&apos;[39m,
      [32m&apos;userSettings&apos;[39m
    ],
    onversionchange: [36m[Function (anonymous)][39m,
    onclose: [36m[Function (anonymous)][39m
  },
  _novip: [36m[Circular *1][39m,
  _state: {
    dbOpenError: [1mnull[22m,
    isBeingOpened: [33mfalse[39m,
    onReadyBeingFired: [1mnull[22m,
    openComplete: [33mtrue[39m,
    dbReadyResolve: [36m[Function (anonymous)][39m,
    dbReadyPromise: DexiePromise [Dexie.Promise] {
      _listeners: [],
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at new DexiePromise [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:153:29[90m)[39m
          at new Dexie [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:127:28[90m)[39m
          at new TodoDatabase [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:104:5[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:15:10
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [33mtrue[39m,
      _value: [90mundefined[39m
    },
    cancelOpen: [36m[Function: bound handleRejection][39m,
    openCanceller: DexiePromise [Dexie.Promise] {
      _listeners: [36m[Array][39m,
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at Debug.getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at dexieOpen [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie-open.ts:24:54[90m)[39m
          at TodoDatabase.Dexie.open [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:285:12[90m)[39m
          at TodoDatabase.initialize [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:384:18[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:16:14
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [1mnull[22m,
      _value: [1mnull[22m
    },
    autoSchema: [33mfalse[39m,
    PR1398_maxLoop: [33m3[39m
  },
  name: [32m&apos;TodoDatabase&apos;[39m,
  on: [Function: rv] {
    addEventType: [36m[Function: add][39m,
    populate: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    blocked: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    versionchange: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    close: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    ready: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function (anonymous)][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    }
  },
  Collection: [36m[Function: Collection][39m,
  Table: [36m[Function: Table][39m,
  Transaction: [36m[Function: Transaction][39m,
  Version: [36m[Function: Version][39m,
  WhereClause: [36m[Function: WhereClause][39m,
  _maxKey: [ [] ],
  _createTransaction: [36m[Function (anonymous)][39m,
  _fireOnBlocked: [36m[Function (anonymous)][39m,
  vip: TodoDatabase {},
  tasks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;tasks&apos;[39m,
    schema: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  dailySelectionEntries: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;dailySelectionEntries&apos;[39m,
    schema: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  taskLogs: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;taskLogs&apos;[39m,
    schema: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  userSettings: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;userSettings&apos;[39m,
    schema: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  syncQueue: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;syncQueue&apos;[39m,
    schema: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  statsDaily: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;statsDaily&apos;[39m,
    schema: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  eventStore: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;eventStore&apos;[39m,
    schema: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  handledEvents: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;handledEvents&apos;[39m,
    schema: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  locks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;locks&apos;[39m,
    schema: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  _hasGetAll: [33mtrue[39m,
  core: {
    stack: [32m&apos;dbcore&apos;[39m,
    transaction: [36m[Function: bound transaction][39m,
    table: [36m[Function: table][39m,
    MIN_KEY: [33m-Infinity[39m,
    MAX_KEY: [ [] ],
    schema: { name: [32m&apos;TodoDatabase&apos;[39m, tables: [36m[FakeDOMStringList][39m }
  }
}

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts" name="TaskRepositoryImpl &gt; findOverdueTasks &gt; should return overdue inbox tasks" time="0.01924775">
            <system-out>
Database initialized successfully

[36m&lt;ref *1&gt;[39m TodoDatabase {
  _middlewares: { dbcore: [ [36m[Object][39m, [36m[Object][39m, [36m[Object][39m, [36m[Object][39m ] },
  verno: [33m8[39m,
  _options: {
    addons: [],
    autoOpen: [33mtrue[39m,
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _deps: {
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _dbSchema: {
    tasks: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    dailySelectionEntries: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    taskLogs: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    userSettings: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    syncQueue: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    statsDaily: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    eventStore: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    handledEvents: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    locks: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    }
  },
  _versions: [
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m }
  ],
  _storeNames: [
    [32m&apos;tasks&apos;[39m,
    [32m&apos;dailySelectionEntries&apos;[39m,
    [32m&apos;taskLogs&apos;[39m,
    [32m&apos;userSettings&apos;[39m,
    [32m&apos;syncQueue&apos;[39m,
    [32m&apos;statsDaily&apos;[39m,
    [32m&apos;eventStore&apos;[39m,
    [32m&apos;handledEvents&apos;[39m,
    [32m&apos;locks&apos;[39m
  ],
  _allTables: {
    tasks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    dailySelectionEntries: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    taskLogs: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    userSettings: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    syncQueue: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    statsDaily: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    eventStore: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    handledEvents: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    locks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    }
  },
  idbdb: FDBDatabase {
    listeners: [],
    _closePending: [33mfalse[39m,
    _closed: [33mfalse[39m,
    _runningVersionchangeTransaction: [33mfalse[39m,
    _rawDatabase: Database {
      deletePending: [33mfalse[39m,
      transactions: [36m[Array][39m,
      rawObjectStores: [36m[Map][39m,
      connections: [36m[Array][39m,
      name: [32m&apos;TodoDatabase&apos;[39m,
      version: [33m80[39m,
      processTransactions: [36m[Function: bound processTransactions][39m
    },
    name: [32m&apos;TodoDatabase&apos;[39m,
    version: [33m80[39m,
    objectStoreNames: FakeDOMStringList(9) [
      [32m&apos;dailySelectionEntries&apos;[39m,
      [32m&apos;eventStore&apos;[39m,
      [32m&apos;handledEvents&apos;[39m,
      [32m&apos;locks&apos;[39m,
      [32m&apos;statsDaily&apos;[39m,
      [32m&apos;syncQueue&apos;[39m,
      [32m&apos;taskLogs&apos;[39m,
      [32m&apos;tasks&apos;[39m,
      [32m&apos;userSettings&apos;[39m
    ],
    onversionchange: [36m[Function (anonymous)][39m,
    onclose: [36m[Function (anonymous)][39m
  },
  _novip: [36m[Circular *1][39m,
  _state: {
    dbOpenError: [1mnull[22m,
    isBeingOpened: [33mfalse[39m,
    onReadyBeingFired: [1mnull[22m,
    openComplete: [33mtrue[39m,
    dbReadyResolve: [36m[Function (anonymous)][39m,
    dbReadyPromise: DexiePromise [Dexie.Promise] {
      _listeners: [],
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at new DexiePromise [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:153:29[90m)[39m
          at new Dexie [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:127:28[90m)[39m
          at new TodoDatabase [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:104:5[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:15:10
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [33mtrue[39m,
      _value: [90mundefined[39m
    },
    cancelOpen: [36m[Function: bound handleRejection][39m,
    openCanceller: DexiePromise [Dexie.Promise] {
      _listeners: [36m[Array][39m,
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at Debug.getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at dexieOpen [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie-open.ts:24:54[90m)[39m
          at TodoDatabase.Dexie.open [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:285:12[90m)[39m
          at TodoDatabase.initialize [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:384:18[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:16:14
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [1mnull[22m,
      _value: [1mnull[22m
    },
    autoSchema: [33mfalse[39m,
    PR1398_maxLoop: [33m3[39m
  },
  name: [32m&apos;TodoDatabase&apos;[39m,
  on: [Function: rv] {
    addEventType: [36m[Function: add][39m,
    populate: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    blocked: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    versionchange: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    close: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    ready: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function (anonymous)][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    }
  },
  Collection: [36m[Function: Collection][39m,
  Table: [36m[Function: Table][39m,
  Transaction: [36m[Function: Transaction][39m,
  Version: [36m[Function: Version][39m,
  WhereClause: [36m[Function: WhereClause][39m,
  _maxKey: [ [] ],
  _createTransaction: [36m[Function (anonymous)][39m,
  _fireOnBlocked: [36m[Function (anonymous)][39m,
  vip: TodoDatabase {},
  tasks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;tasks&apos;[39m,
    schema: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  dailySelectionEntries: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;dailySelectionEntries&apos;[39m,
    schema: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  taskLogs: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;taskLogs&apos;[39m,
    schema: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  userSettings: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;userSettings&apos;[39m,
    schema: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  syncQueue: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;syncQueue&apos;[39m,
    schema: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  statsDaily: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;statsDaily&apos;[39m,
    schema: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  eventStore: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;eventStore&apos;[39m,
    schema: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  handledEvents: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;handledEvents&apos;[39m,
    schema: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  locks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;locks&apos;[39m,
    schema: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  _hasGetAll: [33mtrue[39m,
  core: {
    stack: [32m&apos;dbcore&apos;[39m,
    transaction: [36m[Function: bound transaction][39m,
    table: [36m[Function: table][39m,
    MIN_KEY: [33m-Infinity[39m,
    MAX_KEY: [ [] ],
    schema: { name: [32m&apos;TodoDatabase&apos;[39m, tables: [36m[FakeDOMStringList][39m }
  }
}

            </system-out>
            <failure message="DateOnly.getCurrentDate is not a function" type="TypeError">
TypeError: DateOnly.getCurrentDate is not a function
 ❯ TaskRepositoryImpl.findOverdueTasks src/shared/infrastructure/repositories/TaskRepositoryImpl.ts:71:33
 ❯ src/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:315:45
            </failure>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts" name="TaskRepositoryImpl &gt; findOverdueTasks &gt; should respect mocked date in dev mode" time="0.040992208">
            <system-out>
Database initialized successfully

[36m&lt;ref *1&gt;[39m TodoDatabase {
  _middlewares: { dbcore: [ [36m[Object][39m, [36m[Object][39m, [36m[Object][39m, [36m[Object][39m ] },
  verno: [33m8[39m,
  _options: {
    addons: [],
    autoOpen: [33mtrue[39m,
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _deps: {
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _dbSchema: {
    tasks: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    dailySelectionEntries: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    taskLogs: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    userSettings: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    syncQueue: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    statsDaily: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    eventStore: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    handledEvents: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    locks: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    }
  },
  _versions: [
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m }
  ],
  _storeNames: [
    [32m&apos;tasks&apos;[39m,
    [32m&apos;dailySelectionEntries&apos;[39m,
    [32m&apos;taskLogs&apos;[39m,
    [32m&apos;userSettings&apos;[39m,
    [32m&apos;syncQueue&apos;[39m,
    [32m&apos;statsDaily&apos;[39m,
    [32m&apos;eventStore&apos;[39m,
    [32m&apos;handledEvents&apos;[39m,
    [32m&apos;locks&apos;[39m
  ],
  _allTables: {
    tasks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    dailySelectionEntries: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    taskLogs: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    userSettings: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    syncQueue: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    statsDaily: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    eventStore: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    handledEvents: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    locks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    }
  },
  idbdb: FDBDatabase {
    listeners: [],
    _closePending: [33mfalse[39m,
    _closed: [33mfalse[39m,
    _runningVersionchangeTransaction: [33mfalse[39m,
    _rawDatabase: Database {
      deletePending: [33mfalse[39m,
      transactions: [36m[Array][39m,
      rawObjectStores: [36m[Map][39m,
      connections: [36m[Array][39m,
      name: [32m&apos;TodoDatabase&apos;[39m,
      version: [33m80[39m,
      processTransactions: [36m[Function: bound processTransactions][39m
    },
    name: [32m&apos;TodoDatabase&apos;[39m,
    version: [33m80[39m,
    objectStoreNames: FakeDOMStringList(9) [
      [32m&apos;dailySelectionEntries&apos;[39m,
      [32m&apos;eventStore&apos;[39m,
      [32m&apos;handledEvents&apos;[39m,
      [32m&apos;locks&apos;[39m,
      [32m&apos;statsDaily&apos;[39m,
      [32m&apos;syncQueue&apos;[39m,
      [32m&apos;taskLogs&apos;[39m,
      [32m&apos;tasks&apos;[39m,
      [32m&apos;userSettings&apos;[39m
    ],
    onversionchange: [36m[Function (anonymous)][39m,
    onclose: [36m[Function (anonymous)][39m
  },
  _novip: [36m[Circular *1][39m,
  _state: {
    dbOpenError: [1mnull[22m,
    isBeingOpened: [33mfalse[39m,
    onReadyBeingFired: [1mnull[22m,
    openComplete: [33mtrue[39m,
    dbReadyResolve: [36m[Function (anonymous)][39m,
    dbReadyPromise: DexiePromise [Dexie.Promise] {
      _listeners: [],
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at new DexiePromise [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:153:29[90m)[39m
          at new Dexie [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:127:28[90m)[39m
          at new TodoDatabase [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:104:5[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:15:10
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [33mtrue[39m,
      _value: [90mundefined[39m
    },
    cancelOpen: [36m[Function: bound handleRejection][39m,
    openCanceller: DexiePromise [Dexie.Promise] {
      _listeners: [36m[Array][39m,
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at Debug.getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at dexieOpen [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie-open.ts:24:54[90m)[39m
          at TodoDatabase.Dexie.open [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:285:12[90m)[39m
          at TodoDatabase.initialize [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:384:18[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:16:14
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [1mnull[22m,
      _value: [1mnull[22m
    },
    autoSchema: [33mfalse[39m,
    PR1398_maxLoop: [33m3[39m
  },
  name: [32m&apos;TodoDatabase&apos;[39m,
  on: [Function: rv] {
    addEventType: [36m[Function: add][39m,
    populate: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    blocked: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    versionchange: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    close: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    ready: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function (anonymous)][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    }
  },
  Collection: [36m[Function: Collection][39m,
  Table: [36m[Function: Table][39m,
  Transaction: [36m[Function: Transaction][39m,
  Version: [36m[Function: Version][39m,
  WhereClause: [36m[Function: WhereClause][39m,
  _maxKey: [ [] ],
  _createTransaction: [36m[Function (anonymous)][39m,
  _fireOnBlocked: [36m[Function (anonymous)][39m,
  vip: TodoDatabase {},
  tasks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;tasks&apos;[39m,
    schema: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  dailySelectionEntries: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;dailySelectionEntries&apos;[39m,
    schema: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  taskLogs: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;taskLogs&apos;[39m,
    schema: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  userSettings: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;userSettings&apos;[39m,
    schema: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  syncQueue: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;syncQueue&apos;[39m,
    schema: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  statsDaily: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;statsDaily&apos;[39m,
    schema: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  eventStore: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;eventStore&apos;[39m,
    schema: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  handledEvents: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;handledEvents&apos;[39m,
    schema: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  locks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;locks&apos;[39m,
    schema: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  _hasGetAll: [33mtrue[39m,
  core: {
    stack: [32m&apos;dbcore&apos;[39m,
    transaction: [36m[Function: bound transaction][39m,
    table: [36m[Function: table][39m,
    MIN_KEY: [33m-Infinity[39m,
    MAX_KEY: [ [] ],
    schema: { name: [32m&apos;TodoDatabase&apos;[39m, tables: [36m[FakeDOMStringList][39m }
  }
}

            </system-out>
            <failure message="DateOnly.getCurrentDate is not a function" type="TypeError">
TypeError: DateOnly.getCurrentDate is not a function
 ❯ TaskRepositoryImpl.findOverdueTasks src/shared/infrastructure/repositories/TaskRepositoryImpl.ts:71:33
 ❯ src/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:353:45
            </failure>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts" name="TaskRepositoryImpl &gt; count and countByCategory &gt; should count tasks correctly" time="0.014938375">
            <system-out>
Database initialized successfully

[36m&lt;ref *1&gt;[39m TodoDatabase {
  _middlewares: { dbcore: [ [36m[Object][39m, [36m[Object][39m, [36m[Object][39m, [36m[Object][39m ] },
  verno: [33m8[39m,
  _options: {
    addons: [],
    autoOpen: [33mtrue[39m,
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _deps: {
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _dbSchema: {
    tasks: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    dailySelectionEntries: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    taskLogs: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    userSettings: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    syncQueue: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    statsDaily: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    eventStore: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    handledEvents: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    locks: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    }
  },
  _versions: [
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m }
  ],
  _storeNames: [
    [32m&apos;tasks&apos;[39m,
    [32m&apos;dailySelectionEntries&apos;[39m,
    [32m&apos;taskLogs&apos;[39m,
    [32m&apos;userSettings&apos;[39m,
    [32m&apos;syncQueue&apos;[39m,
    [32m&apos;statsDaily&apos;[39m,
    [32m&apos;eventStore&apos;[39m,
    [32m&apos;handledEvents&apos;[39m,
    [32m&apos;locks&apos;[39m
  ],
  _allTables: {
    tasks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    dailySelectionEntries: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    taskLogs: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    userSettings: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    syncQueue: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    statsDaily: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    eventStore: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    handledEvents: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    locks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    }
  },
  idbdb: FDBDatabase {
    listeners: [],
    _closePending: [33mfalse[39m,
    _closed: [33mfalse[39m,
    _runningVersionchangeTransaction: [33mfalse[39m,
    _rawDatabase: Database {
      deletePending: [33mfalse[39m,
      transactions: [36m[Array][39m,
      rawObjectStores: [36m[Map][39m,
      connections: [36m[Array][39m,
      name: [32m&apos;TodoDatabase&apos;[39m,
      version: [33m80[39m,
      processTransactions: [36m[Function: bound processTransactions][39m
    },
    name: [32m&apos;TodoDatabase&apos;[39m,
    version: [33m80[39m,
    objectStoreNames: FakeDOMStringList(9) [
      [32m&apos;dailySelectionEntries&apos;[39m,
      [32m&apos;eventStore&apos;[39m,
      [32m&apos;handledEvents&apos;[39m,
      [32m&apos;locks&apos;[39m,
      [32m&apos;statsDaily&apos;[39m,
      [32m&apos;syncQueue&apos;[39m,
      [32m&apos;taskLogs&apos;[39m,
      [32m&apos;tasks&apos;[39m,
      [32m&apos;userSettings&apos;[39m
    ],
    onversionchange: [36m[Function (anonymous)][39m,
    onclose: [36m[Function (anonymous)][39m
  },
  _novip: [36m[Circular *1][39m,
  _state: {
    dbOpenError: [1mnull[22m,
    isBeingOpened: [33mfalse[39m,
    onReadyBeingFired: [1mnull[22m,
    openComplete: [33mtrue[39m,
    dbReadyResolve: [36m[Function (anonymous)][39m,
    dbReadyPromise: DexiePromise [Dexie.Promise] {
      _listeners: [],
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at new DexiePromise [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:153:29[90m)[39m
          at new Dexie [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:127:28[90m)[39m
          at new TodoDatabase [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:104:5[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:15:10
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [33mtrue[39m,
      _value: [90mundefined[39m
    },
    cancelOpen: [36m[Function: bound handleRejection][39m,
    openCanceller: DexiePromise [Dexie.Promise] {
      _listeners: [36m[Array][39m,
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at Debug.getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at dexieOpen [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie-open.ts:24:54[90m)[39m
          at TodoDatabase.Dexie.open [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:285:12[90m)[39m
          at TodoDatabase.initialize [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:384:18[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:16:14
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [1mnull[22m,
      _value: [1mnull[22m
    },
    autoSchema: [33mfalse[39m,
    PR1398_maxLoop: [33m3[39m
  },
  name: [32m&apos;TodoDatabase&apos;[39m,
  on: [Function: rv] {
    addEventType: [36m[Function: add][39m,
    populate: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    blocked: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    versionchange: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    close: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    ready: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function (anonymous)][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    }
  },
  Collection: [36m[Function: Collection][39m,
  Table: [36m[Function: Table][39m,
  Transaction: [36m[Function: Transaction][39m,
  Version: [36m[Function: Version][39m,
  WhereClause: [36m[Function: WhereClause][39m,
  _maxKey: [ [] ],
  _createTransaction: [36m[Function (anonymous)][39m,
  _fireOnBlocked: [36m[Function (anonymous)][39m,
  vip: TodoDatabase {},
  tasks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;tasks&apos;[39m,
    schema: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  dailySelectionEntries: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;dailySelectionEntries&apos;[39m,
    schema: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  taskLogs: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;taskLogs&apos;[39m,
    schema: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  userSettings: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;userSettings&apos;[39m,
    schema: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  syncQueue: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;syncQueue&apos;[39m,
    schema: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  statsDaily: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;statsDaily&apos;[39m,
    schema: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  eventStore: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;eventStore&apos;[39m,
    schema: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  handledEvents: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;handledEvents&apos;[39m,
    schema: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  locks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;locks&apos;[39m,
    schema: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  _hasGetAll: [33mtrue[39m,
  core: {
    stack: [32m&apos;dbcore&apos;[39m,
    transaction: [36m[Function: bound transaction][39m,
    table: [36m[Function: table][39m,
    MIN_KEY: [33m-Infinity[39m,
    MAX_KEY: [ [] ],
    schema: { name: [32m&apos;TodoDatabase&apos;[39m, tables: [36m[FakeDOMStringList][39m }
  }
}

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts" name="TaskRepositoryImpl &gt; exists &gt; should return true for existing active task" time="0.014753875">
            <system-out>
Database initialized successfully

[36m&lt;ref *1&gt;[39m TodoDatabase {
  _middlewares: { dbcore: [ [36m[Object][39m, [36m[Object][39m, [36m[Object][39m, [36m[Object][39m ] },
  verno: [33m8[39m,
  _options: {
    addons: [],
    autoOpen: [33mtrue[39m,
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _deps: {
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _dbSchema: {
    tasks: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    dailySelectionEntries: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    taskLogs: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    userSettings: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    syncQueue: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    statsDaily: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    eventStore: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    handledEvents: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    locks: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    }
  },
  _versions: [
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m }
  ],
  _storeNames: [
    [32m&apos;tasks&apos;[39m,
    [32m&apos;dailySelectionEntries&apos;[39m,
    [32m&apos;taskLogs&apos;[39m,
    [32m&apos;userSettings&apos;[39m,
    [32m&apos;syncQueue&apos;[39m,
    [32m&apos;statsDaily&apos;[39m,
    [32m&apos;eventStore&apos;[39m,
    [32m&apos;handledEvents&apos;[39m,
    [32m&apos;locks&apos;[39m
  ],
  _allTables: {
    tasks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    dailySelectionEntries: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    taskLogs: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    userSettings: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    syncQueue: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    statsDaily: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    eventStore: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    handledEvents: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    locks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    }
  },
  idbdb: FDBDatabase {
    listeners: [],
    _closePending: [33mfalse[39m,
    _closed: [33mfalse[39m,
    _runningVersionchangeTransaction: [33mfalse[39m,
    _rawDatabase: Database {
      deletePending: [33mfalse[39m,
      transactions: [36m[Array][39m,
      rawObjectStores: [36m[Map][39m,
      connections: [36m[Array][39m,
      name: [32m&apos;TodoDatabase&apos;[39m,
      version: [33m80[39m,
      processTransactions: [36m[Function: bound processTransactions][39m
    },
    name: [32m&apos;TodoDatabase&apos;[39m,
    version: [33m80[39m,
    objectStoreNames: FakeDOMStringList(9) [
      [32m&apos;dailySelectionEntries&apos;[39m,
      [32m&apos;eventStore&apos;[39m,
      [32m&apos;handledEvents&apos;[39m,
      [32m&apos;locks&apos;[39m,
      [32m&apos;statsDaily&apos;[39m,
      [32m&apos;syncQueue&apos;[39m,
      [32m&apos;taskLogs&apos;[39m,
      [32m&apos;tasks&apos;[39m,
      [32m&apos;userSettings&apos;[39m
    ],
    onversionchange: [36m[Function (anonymous)][39m,
    onclose: [36m[Function (anonymous)][39m
  },
  _novip: [36m[Circular *1][39m,
  _state: {
    dbOpenError: [1mnull[22m,
    isBeingOpened: [33mfalse[39m,
    onReadyBeingFired: [1mnull[22m,
    openComplete: [33mtrue[39m,
    dbReadyResolve: [36m[Function (anonymous)][39m,
    dbReadyPromise: DexiePromise [Dexie.Promise] {
      _listeners: [],
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at new DexiePromise [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:153:29[90m)[39m
          at new Dexie [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:127:28[90m)[39m
          at new TodoDatabase [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:104:5[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:15:10
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [33mtrue[39m,
      _value: [90mundefined[39m
    },
    cancelOpen: [36m[Function: bound handleRejection][39m,
    openCanceller: DexiePromise [Dexie.Promise] {
      _listeners: [36m[Array][39m,
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at Debug.getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at dexieOpen [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie-open.ts:24:54[90m)[39m
          at TodoDatabase.Dexie.open [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:285:12[90m)[39m
          at TodoDatabase.initialize [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:384:18[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:16:14
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [1mnull[22m,
      _value: [1mnull[22m
    },
    autoSchema: [33mfalse[39m,
    PR1398_maxLoop: [33m3[39m
  },
  name: [32m&apos;TodoDatabase&apos;[39m,
  on: [Function: rv] {
    addEventType: [36m[Function: add][39m,
    populate: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    blocked: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    versionchange: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    close: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    ready: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function (anonymous)][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    }
  },
  Collection: [36m[Function: Collection][39m,
  Table: [36m[Function: Table][39m,
  Transaction: [36m[Function: Transaction][39m,
  Version: [36m[Function: Version][39m,
  WhereClause: [36m[Function: WhereClause][39m,
  _maxKey: [ [] ],
  _createTransaction: [36m[Function (anonymous)][39m,
  _fireOnBlocked: [36m[Function (anonymous)][39m,
  vip: TodoDatabase {},
  tasks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;tasks&apos;[39m,
    schema: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  dailySelectionEntries: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;dailySelectionEntries&apos;[39m,
    schema: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  taskLogs: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;taskLogs&apos;[39m,
    schema: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  userSettings: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;userSettings&apos;[39m,
    schema: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  syncQueue: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;syncQueue&apos;[39m,
    schema: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  statsDaily: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;statsDaily&apos;[39m,
    schema: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  eventStore: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;eventStore&apos;[39m,
    schema: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  handledEvents: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;handledEvents&apos;[39m,
    schema: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  locks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;locks&apos;[39m,
    schema: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  _hasGetAll: [33mtrue[39m,
  core: {
    stack: [32m&apos;dbcore&apos;[39m,
    transaction: [36m[Function: bound transaction][39m,
    table: [36m[Function: table][39m,
    MIN_KEY: [33m-Infinity[39m,
    MAX_KEY: [ [] ],
    schema: { name: [32m&apos;TodoDatabase&apos;[39m, tables: [36m[FakeDOMStringList][39m }
  }
}

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts" name="TaskRepositoryImpl &gt; exists &gt; should return false for non-existent task" time="0.009113166">
            <system-out>
Database initialized successfully

[36m&lt;ref *1&gt;[39m TodoDatabase {
  _middlewares: { dbcore: [ [36m[Object][39m, [36m[Object][39m, [36m[Object][39m, [36m[Object][39m ] },
  verno: [33m8[39m,
  _options: {
    addons: [],
    autoOpen: [33mtrue[39m,
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _deps: {
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _dbSchema: {
    tasks: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    dailySelectionEntries: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    taskLogs: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    userSettings: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    syncQueue: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    statsDaily: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    eventStore: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    handledEvents: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    locks: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    }
  },
  _versions: [
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m }
  ],
  _storeNames: [
    [32m&apos;tasks&apos;[39m,
    [32m&apos;dailySelectionEntries&apos;[39m,
    [32m&apos;taskLogs&apos;[39m,
    [32m&apos;userSettings&apos;[39m,
    [32m&apos;syncQueue&apos;[39m,
    [32m&apos;statsDaily&apos;[39m,
    [32m&apos;eventStore&apos;[39m,
    [32m&apos;handledEvents&apos;[39m,
    [32m&apos;locks&apos;[39m
  ],
  _allTables: {
    tasks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    dailySelectionEntries: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    taskLogs: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    userSettings: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    syncQueue: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    statsDaily: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    eventStore: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    handledEvents: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    locks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    }
  },
  idbdb: FDBDatabase {
    listeners: [],
    _closePending: [33mfalse[39m,
    _closed: [33mfalse[39m,
    _runningVersionchangeTransaction: [33mfalse[39m,
    _rawDatabase: Database {
      deletePending: [33mfalse[39m,
      transactions: [36m[Array][39m,
      rawObjectStores: [36m[Map][39m,
      connections: [36m[Array][39m,
      name: [32m&apos;TodoDatabase&apos;[39m,
      version: [33m80[39m,
      processTransactions: [36m[Function: bound processTransactions][39m
    },
    name: [32m&apos;TodoDatabase&apos;[39m,
    version: [33m80[39m,
    objectStoreNames: FakeDOMStringList(9) [
      [32m&apos;dailySelectionEntries&apos;[39m,
      [32m&apos;eventStore&apos;[39m,
      [32m&apos;handledEvents&apos;[39m,
      [32m&apos;locks&apos;[39m,
      [32m&apos;statsDaily&apos;[39m,
      [32m&apos;syncQueue&apos;[39m,
      [32m&apos;taskLogs&apos;[39m,
      [32m&apos;tasks&apos;[39m,
      [32m&apos;userSettings&apos;[39m
    ],
    onversionchange: [36m[Function (anonymous)][39m,
    onclose: [36m[Function (anonymous)][39m
  },
  _novip: [36m[Circular *1][39m,
  _state: {
    dbOpenError: [1mnull[22m,
    isBeingOpened: [33mfalse[39m,
    onReadyBeingFired: [1mnull[22m,
    openComplete: [33mtrue[39m,
    dbReadyResolve: [36m[Function (anonymous)][39m,
    dbReadyPromise: DexiePromise [Dexie.Promise] {
      _listeners: [],
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at new DexiePromise [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:153:29[90m)[39m
          at new Dexie [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:127:28[90m)[39m
          at new TodoDatabase [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:104:5[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:15:10
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [33mtrue[39m,
      _value: [90mundefined[39m
    },
    cancelOpen: [36m[Function: bound handleRejection][39m,
    openCanceller: DexiePromise [Dexie.Promise] {
      _listeners: [36m[Array][39m,
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at Debug.getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at dexieOpen [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie-open.ts:24:54[90m)[39m
          at TodoDatabase.Dexie.open [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:285:12[90m)[39m
          at TodoDatabase.initialize [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:384:18[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:16:14
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [1mnull[22m,
      _value: [1mnull[22m
    },
    autoSchema: [33mfalse[39m,
    PR1398_maxLoop: [33m3[39m
  },
  name: [32m&apos;TodoDatabase&apos;[39m,
  on: [Function: rv] {
    addEventType: [36m[Function: add][39m,
    populate: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    blocked: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    versionchange: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    close: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    ready: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function (anonymous)][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    }
  },
  Collection: [36m[Function: Collection][39m,
  Table: [36m[Function: Table][39m,
  Transaction: [36m[Function: Transaction][39m,
  Version: [36m[Function: Version][39m,
  WhereClause: [36m[Function: WhereClause][39m,
  _maxKey: [ [] ],
  _createTransaction: [36m[Function (anonymous)][39m,
  _fireOnBlocked: [36m[Function (anonymous)][39m,
  vip: TodoDatabase {},
  tasks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;tasks&apos;[39m,
    schema: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  dailySelectionEntries: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;dailySelectionEntries&apos;[39m,
    schema: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  taskLogs: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;taskLogs&apos;[39m,
    schema: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  userSettings: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;userSettings&apos;[39m,
    schema: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  syncQueue: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;syncQueue&apos;[39m,
    schema: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  statsDaily: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;statsDaily&apos;[39m,
    schema: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  eventStore: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;eventStore&apos;[39m,
    schema: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  handledEvents: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;handledEvents&apos;[39m,
    schema: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  locks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;locks&apos;[39m,
    schema: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  _hasGetAll: [33mtrue[39m,
  core: {
    stack: [32m&apos;dbcore&apos;[39m,
    transaction: [36m[Function: bound transaction][39m,
    table: [36m[Function: table][39m,
    MIN_KEY: [33m-Infinity[39m,
    MAX_KEY: [ [] ],
    schema: { name: [32m&apos;TodoDatabase&apos;[39m, tables: [36m[FakeDOMStringList][39m }
  }
}

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts" name="TaskRepositoryImpl &gt; exists &gt; should return false for soft-deleted task" time="0.006103666">
            <system-out>
Database initialized successfully

[36m&lt;ref *1&gt;[39m TodoDatabase {
  _middlewares: { dbcore: [ [36m[Object][39m, [36m[Object][39m, [36m[Object][39m, [36m[Object][39m ] },
  verno: [33m8[39m,
  _options: {
    addons: [],
    autoOpen: [33mtrue[39m,
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _deps: {
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _dbSchema: {
    tasks: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    dailySelectionEntries: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    taskLogs: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    userSettings: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    syncQueue: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    statsDaily: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    eventStore: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    handledEvents: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    locks: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    }
  },
  _versions: [
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m }
  ],
  _storeNames: [
    [32m&apos;tasks&apos;[39m,
    [32m&apos;dailySelectionEntries&apos;[39m,
    [32m&apos;taskLogs&apos;[39m,
    [32m&apos;userSettings&apos;[39m,
    [32m&apos;syncQueue&apos;[39m,
    [32m&apos;statsDaily&apos;[39m,
    [32m&apos;eventStore&apos;[39m,
    [32m&apos;handledEvents&apos;[39m,
    [32m&apos;locks&apos;[39m
  ],
  _allTables: {
    tasks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    dailySelectionEntries: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    taskLogs: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    userSettings: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    syncQueue: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    statsDaily: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    eventStore: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    handledEvents: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    locks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    }
  },
  idbdb: FDBDatabase {
    listeners: [],
    _closePending: [33mfalse[39m,
    _closed: [33mfalse[39m,
    _runningVersionchangeTransaction: [33mfalse[39m,
    _rawDatabase: Database {
      deletePending: [33mfalse[39m,
      transactions: [36m[Array][39m,
      rawObjectStores: [36m[Map][39m,
      connections: [36m[Array][39m,
      name: [32m&apos;TodoDatabase&apos;[39m,
      version: [33m80[39m,
      processTransactions: [36m[Function: bound processTransactions][39m
    },
    name: [32m&apos;TodoDatabase&apos;[39m,
    version: [33m80[39m,
    objectStoreNames: FakeDOMStringList(9) [
      [32m&apos;dailySelectionEntries&apos;[39m,
      [32m&apos;eventStore&apos;[39m,
      [32m&apos;handledEvents&apos;[39m,
      [32m&apos;locks&apos;[39m,
      [32m&apos;statsDaily&apos;[39m,
      [32m&apos;syncQueue&apos;[39m,
      [32m&apos;taskLogs&apos;[39m,
      [32m&apos;tasks&apos;[39m,
      [32m&apos;userSettings&apos;[39m
    ],
    onversionchange: [36m[Function (anonymous)][39m,
    onclose: [36m[Function (anonymous)][39m
  },
  _novip: [36m[Circular *1][39m,
  _state: {
    dbOpenError: [1mnull[22m,
    isBeingOpened: [33mfalse[39m,
    onReadyBeingFired: [1mnull[22m,
    openComplete: [33mtrue[39m,
    dbReadyResolve: [36m[Function (anonymous)][39m,
    dbReadyPromise: DexiePromise [Dexie.Promise] {
      _listeners: [],
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at new DexiePromise [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:153:29[90m)[39m
          at new Dexie [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:127:28[90m)[39m
          at new TodoDatabase [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:104:5[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:15:10
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [33mtrue[39m,
      _value: [90mundefined[39m
    },
    cancelOpen: [36m[Function: bound handleRejection][39m,
    openCanceller: DexiePromise [Dexie.Promise] {
      _listeners: [36m[Array][39m,
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at Debug.getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at dexieOpen [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie-open.ts:24:54[90m)[39m
          at TodoDatabase.Dexie.open [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:285:12[90m)[39m
          at TodoDatabase.initialize [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:384:18[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:16:14
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [1mnull[22m,
      _value: [1mnull[22m
    },
    autoSchema: [33mfalse[39m,
    PR1398_maxLoop: [33m3[39m
  },
  name: [32m&apos;TodoDatabase&apos;[39m,
  on: [Function: rv] {
    addEventType: [36m[Function: add][39m,
    populate: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    blocked: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    versionchange: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    close: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    ready: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function (anonymous)][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    }
  },
  Collection: [36m[Function: Collection][39m,
  Table: [36m[Function: Table][39m,
  Transaction: [36m[Function: Transaction][39m,
  Version: [36m[Function: Version][39m,
  WhereClause: [36m[Function: WhereClause][39m,
  _maxKey: [ [] ],
  _createTransaction: [36m[Function (anonymous)][39m,
  _fireOnBlocked: [36m[Function (anonymous)][39m,
  vip: TodoDatabase {},
  tasks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;tasks&apos;[39m,
    schema: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  dailySelectionEntries: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;dailySelectionEntries&apos;[39m,
    schema: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  taskLogs: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;taskLogs&apos;[39m,
    schema: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  userSettings: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;userSettings&apos;[39m,
    schema: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  syncQueue: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;syncQueue&apos;[39m,
    schema: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  statsDaily: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;statsDaily&apos;[39m,
    schema: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  eventStore: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;eventStore&apos;[39m,
    schema: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  handledEvents: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;handledEvents&apos;[39m,
    schema: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  locks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;locks&apos;[39m,
    schema: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  _hasGetAll: [33mtrue[39m,
  core: {
    stack: [32m&apos;dbcore&apos;[39m,
    transaction: [36m[Function: bound transaction][39m,
    table: [36m[Function: table][39m,
    MIN_KEY: [33m-Infinity[39m,
    MAX_KEY: [ [] ],
    schema: { name: [32m&apos;TodoDatabase&apos;[39m, tables: [36m[FakeDOMStringList][39m }
  }
}

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts" name="TaskRepositoryImpl &gt; delete (hard delete) &gt; should permanently delete a task" time="0.011101125">
            <system-out>
Database initialized successfully

[36m&lt;ref *1&gt;[39m TodoDatabase {
  _middlewares: { dbcore: [ [36m[Object][39m, [36m[Object][39m, [36m[Object][39m, [36m[Object][39m ] },
  verno: [33m8[39m,
  _options: {
    addons: [],
    autoOpen: [33mtrue[39m,
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _deps: {
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _dbSchema: {
    tasks: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    dailySelectionEntries: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    taskLogs: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    userSettings: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    syncQueue: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    statsDaily: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    eventStore: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    handledEvents: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    locks: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    }
  },
  _versions: [
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m }
  ],
  _storeNames: [
    [32m&apos;tasks&apos;[39m,
    [32m&apos;dailySelectionEntries&apos;[39m,
    [32m&apos;taskLogs&apos;[39m,
    [32m&apos;userSettings&apos;[39m,
    [32m&apos;syncQueue&apos;[39m,
    [32m&apos;statsDaily&apos;[39m,
    [32m&apos;eventStore&apos;[39m,
    [32m&apos;handledEvents&apos;[39m,
    [32m&apos;locks&apos;[39m
  ],
  _allTables: {
    tasks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    dailySelectionEntries: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    taskLogs: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    userSettings: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    syncQueue: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    statsDaily: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    eventStore: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    handledEvents: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    locks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    }
  },
  idbdb: FDBDatabase {
    listeners: [],
    _closePending: [33mfalse[39m,
    _closed: [33mfalse[39m,
    _runningVersionchangeTransaction: [33mfalse[39m,
    _rawDatabase: Database {
      deletePending: [33mfalse[39m,
      transactions: [36m[Array][39m,
      rawObjectStores: [36m[Map][39m,
      connections: [36m[Array][39m,
      name: [32m&apos;TodoDatabase&apos;[39m,
      version: [33m80[39m,
      processTransactions: [36m[Function: bound processTransactions][39m
    },
    name: [32m&apos;TodoDatabase&apos;[39m,
    version: [33m80[39m,
    objectStoreNames: FakeDOMStringList(9) [
      [32m&apos;dailySelectionEntries&apos;[39m,
      [32m&apos;eventStore&apos;[39m,
      [32m&apos;handledEvents&apos;[39m,
      [32m&apos;locks&apos;[39m,
      [32m&apos;statsDaily&apos;[39m,
      [32m&apos;syncQueue&apos;[39m,
      [32m&apos;taskLogs&apos;[39m,
      [32m&apos;tasks&apos;[39m,
      [32m&apos;userSettings&apos;[39m
    ],
    onversionchange: [36m[Function (anonymous)][39m,
    onclose: [36m[Function (anonymous)][39m
  },
  _novip: [36m[Circular *1][39m,
  _state: {
    dbOpenError: [1mnull[22m,
    isBeingOpened: [33mfalse[39m,
    onReadyBeingFired: [1mnull[22m,
    openComplete: [33mtrue[39m,
    dbReadyResolve: [36m[Function (anonymous)][39m,
    dbReadyPromise: DexiePromise [Dexie.Promise] {
      _listeners: [],
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at new DexiePromise [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:153:29[90m)[39m
          at new Dexie [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:127:28[90m)[39m
          at new TodoDatabase [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:104:5[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:15:10
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [33mtrue[39m,
      _value: [90mundefined[39m
    },
    cancelOpen: [36m[Function: bound handleRejection][39m,
    openCanceller: DexiePromise [Dexie.Promise] {
      _listeners: [36m[Array][39m,
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at Debug.getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at dexieOpen [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie-open.ts:24:54[90m)[39m
          at TodoDatabase.Dexie.open [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:285:12[90m)[39m
          at TodoDatabase.initialize [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:384:18[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:16:14
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [1mnull[22m,
      _value: [1mnull[22m
    },
    autoSchema: [33mfalse[39m,
    PR1398_maxLoop: [33m3[39m
  },
  name: [32m&apos;TodoDatabase&apos;[39m,
  on: [Function: rv] {
    addEventType: [36m[Function: add][39m,
    populate: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    blocked: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    versionchange: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    close: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    ready: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function (anonymous)][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    }
  },
  Collection: [36m[Function: Collection][39m,
  Table: [36m[Function: Table][39m,
  Transaction: [36m[Function: Transaction][39m,
  Version: [36m[Function: Version][39m,
  WhereClause: [36m[Function: WhereClause][39m,
  _maxKey: [ [] ],
  _createTransaction: [36m[Function (anonymous)][39m,
  _fireOnBlocked: [36m[Function (anonymous)][39m,
  vip: TodoDatabase {},
  tasks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;tasks&apos;[39m,
    schema: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  dailySelectionEntries: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;dailySelectionEntries&apos;[39m,
    schema: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  taskLogs: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;taskLogs&apos;[39m,
    schema: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  userSettings: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;userSettings&apos;[39m,
    schema: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  syncQueue: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;syncQueue&apos;[39m,
    schema: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  statsDaily: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;statsDaily&apos;[39m,
    schema: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  eventStore: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;eventStore&apos;[39m,
    schema: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  handledEvents: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;handledEvents&apos;[39m,
    schema: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  locks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;locks&apos;[39m,
    schema: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  _hasGetAll: [33mtrue[39m,
  core: {
    stack: [32m&apos;dbcore&apos;[39m,
    transaction: [36m[Function: bound transaction][39m,
    table: [36m[Function: table][39m,
    MIN_KEY: [33m-Infinity[39m,
    MAX_KEY: [ [] ],
    schema: { name: [32m&apos;TodoDatabase&apos;[39m, tables: [36m[FakeDOMStringList][39m }
  }
}

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts" name="TaskRepositoryImpl &gt; saveMany &gt; should save multiple tasks in batch" time="0.022552834">
            <system-out>
Database initialized successfully

[36m&lt;ref *1&gt;[39m TodoDatabase {
  _middlewares: { dbcore: [ [36m[Object][39m, [36m[Object][39m, [36m[Object][39m, [36m[Object][39m ] },
  verno: [33m8[39m,
  _options: {
    addons: [],
    autoOpen: [33mtrue[39m,
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _deps: {
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _dbSchema: {
    tasks: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    dailySelectionEntries: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    taskLogs: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    userSettings: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    syncQueue: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    statsDaily: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    eventStore: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    handledEvents: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    locks: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    }
  },
  _versions: [
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m }
  ],
  _storeNames: [
    [32m&apos;tasks&apos;[39m,
    [32m&apos;dailySelectionEntries&apos;[39m,
    [32m&apos;taskLogs&apos;[39m,
    [32m&apos;userSettings&apos;[39m,
    [32m&apos;syncQueue&apos;[39m,
    [32m&apos;statsDaily&apos;[39m,
    [32m&apos;eventStore&apos;[39m,
    [32m&apos;handledEvents&apos;[39m,
    [32m&apos;locks&apos;[39m
  ],
  _allTables: {
    tasks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    dailySelectionEntries: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    taskLogs: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    userSettings: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    syncQueue: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    statsDaily: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    eventStore: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    handledEvents: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    locks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    }
  },
  idbdb: FDBDatabase {
    listeners: [],
    _closePending: [33mfalse[39m,
    _closed: [33mfalse[39m,
    _runningVersionchangeTransaction: [33mfalse[39m,
    _rawDatabase: Database {
      deletePending: [33mfalse[39m,
      transactions: [36m[Array][39m,
      rawObjectStores: [36m[Map][39m,
      connections: [36m[Array][39m,
      name: [32m&apos;TodoDatabase&apos;[39m,
      version: [33m80[39m,
      processTransactions: [36m[Function: bound processTransactions][39m
    },
    name: [32m&apos;TodoDatabase&apos;[39m,
    version: [33m80[39m,
    objectStoreNames: FakeDOMStringList(9) [
      [32m&apos;dailySelectionEntries&apos;[39m,
      [32m&apos;eventStore&apos;[39m,
      [32m&apos;handledEvents&apos;[39m,
      [32m&apos;locks&apos;[39m,
      [32m&apos;statsDaily&apos;[39m,
      [32m&apos;syncQueue&apos;[39m,
      [32m&apos;taskLogs&apos;[39m,
      [32m&apos;tasks&apos;[39m,
      [32m&apos;userSettings&apos;[39m
    ],
    onversionchange: [36m[Function (anonymous)][39m,
    onclose: [36m[Function (anonymous)][39m
  },
  _novip: [36m[Circular *1][39m,
  _state: {
    dbOpenError: [1mnull[22m,
    isBeingOpened: [33mfalse[39m,
    onReadyBeingFired: [1mnull[22m,
    openComplete: [33mtrue[39m,
    dbReadyResolve: [36m[Function (anonymous)][39m,
    dbReadyPromise: DexiePromise [Dexie.Promise] {
      _listeners: [],
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at new DexiePromise [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:153:29[90m)[39m
          at new Dexie [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:127:28[90m)[39m
          at new TodoDatabase [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:104:5[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:15:10
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [33mtrue[39m,
      _value: [90mundefined[39m
    },
    cancelOpen: [36m[Function: bound handleRejection][39m,
    openCanceller: DexiePromise [Dexie.Promise] {
      _listeners: [36m[Array][39m,
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at Debug.getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at dexieOpen [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie-open.ts:24:54[90m)[39m
          at TodoDatabase.Dexie.open [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:285:12[90m)[39m
          at TodoDatabase.initialize [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:384:18[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:16:14
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [1mnull[22m,
      _value: [1mnull[22m
    },
    autoSchema: [33mfalse[39m,
    PR1398_maxLoop: [33m3[39m
  },
  name: [32m&apos;TodoDatabase&apos;[39m,
  on: [Function: rv] {
    addEventType: [36m[Function: add][39m,
    populate: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    blocked: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    versionchange: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    close: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    ready: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function (anonymous)][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    }
  },
  Collection: [36m[Function: Collection][39m,
  Table: [36m[Function: Table][39m,
  Transaction: [36m[Function: Transaction][39m,
  Version: [36m[Function: Version][39m,
  WhereClause: [36m[Function: WhereClause][39m,
  _maxKey: [ [] ],
  _createTransaction: [36m[Function (anonymous)][39m,
  _fireOnBlocked: [36m[Function (anonymous)][39m,
  vip: TodoDatabase {},
  tasks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;tasks&apos;[39m,
    schema: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  dailySelectionEntries: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;dailySelectionEntries&apos;[39m,
    schema: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  taskLogs: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;taskLogs&apos;[39m,
    schema: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  userSettings: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;userSettings&apos;[39m,
    schema: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  syncQueue: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;syncQueue&apos;[39m,
    schema: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  statsDaily: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;statsDaily&apos;[39m,
    schema: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  eventStore: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;eventStore&apos;[39m,
    schema: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  handledEvents: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;handledEvents&apos;[39m,
    schema: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  locks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;locks&apos;[39m,
    schema: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  _hasGetAll: [33mtrue[39m,
  core: {
    stack: [32m&apos;dbcore&apos;[39m,
    transaction: [36m[Function: bound transaction][39m,
    table: [36m[Function: table][39m,
    MIN_KEY: [33m-Infinity[39m,
    MAX_KEY: [ [] ],
    schema: { name: [32m&apos;TodoDatabase&apos;[39m, tables: [36m[FakeDOMStringList][39m }
  }
}

            </system-out>
        </testcase>
        <testcase classname="src/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts" name="TaskRepositoryImpl &gt; task updates &gt; should update existing task when saved again" time="0.019888417">
            <system-out>
Database initialized successfully

[36m&lt;ref *1&gt;[39m TodoDatabase {
  _middlewares: { dbcore: [ [36m[Object][39m, [36m[Object][39m, [36m[Object][39m, [36m[Object][39m ] },
  verno: [33m8[39m,
  _options: {
    addons: [],
    autoOpen: [33mtrue[39m,
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _deps: {
    indexedDB: FDBFactory { cmp: [36m[Function: cmp][39m, _databases: [36m[Map][39m },
    IDBKeyRange: [36m[class FDBKeyRange][39m
  },
  _dbSchema: {
    tasks: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    dailySelectionEntries: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    taskLogs: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    userSettings: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    syncQueue: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    statsDaily: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    eventStore: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    handledEvents: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    locks: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    }
  },
  _versions: [
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m },
    Version { db: [36m[Circular *1][39m, _cfg: [36m[Object][39m }
  ],
  _storeNames: [
    [32m&apos;tasks&apos;[39m,
    [32m&apos;dailySelectionEntries&apos;[39m,
    [32m&apos;taskLogs&apos;[39m,
    [32m&apos;userSettings&apos;[39m,
    [32m&apos;syncQueue&apos;[39m,
    [32m&apos;statsDaily&apos;[39m,
    [32m&apos;eventStore&apos;[39m,
    [32m&apos;handledEvents&apos;[39m,
    [32m&apos;locks&apos;[39m
  ],
  _allTables: {
    tasks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    dailySelectionEntries: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    taskLogs: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    userSettings: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    syncQueue: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    statsDaily: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    eventStore: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    handledEvents: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    },
    locks: Table {
      db: [36m[Circular *1][39m,
      _tx: [90mundefined[39m,
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      hook: [36m[Function][39m,
      core: [36m[Object][39m
    }
  },
  idbdb: FDBDatabase {
    listeners: [],
    _closePending: [33mfalse[39m,
    _closed: [33mfalse[39m,
    _runningVersionchangeTransaction: [33mfalse[39m,
    _rawDatabase: Database {
      deletePending: [33mfalse[39m,
      transactions: [36m[Array][39m,
      rawObjectStores: [36m[Map][39m,
      connections: [36m[Array][39m,
      name: [32m&apos;TodoDatabase&apos;[39m,
      version: [33m80[39m,
      processTransactions: [36m[Function: bound processTransactions][39m
    },
    name: [32m&apos;TodoDatabase&apos;[39m,
    version: [33m80[39m,
    objectStoreNames: FakeDOMStringList(9) [
      [32m&apos;dailySelectionEntries&apos;[39m,
      [32m&apos;eventStore&apos;[39m,
      [32m&apos;handledEvents&apos;[39m,
      [32m&apos;locks&apos;[39m,
      [32m&apos;statsDaily&apos;[39m,
      [32m&apos;syncQueue&apos;[39m,
      [32m&apos;taskLogs&apos;[39m,
      [32m&apos;tasks&apos;[39m,
      [32m&apos;userSettings&apos;[39m
    ],
    onversionchange: [36m[Function (anonymous)][39m,
    onclose: [36m[Function (anonymous)][39m
  },
  _novip: [36m[Circular *1][39m,
  _state: {
    dbOpenError: [1mnull[22m,
    isBeingOpened: [33mfalse[39m,
    onReadyBeingFired: [1mnull[22m,
    openComplete: [33mtrue[39m,
    dbReadyResolve: [36m[Function (anonymous)][39m,
    dbReadyPromise: DexiePromise [Dexie.Promise] {
      _listeners: [],
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at new DexiePromise [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/promise.js:153:29[90m)[39m
          at new Dexie [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:127:28[90m)[39m
          at new TodoDatabase [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:104:5[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:15:10
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [33mtrue[39m,
      _value: [90mundefined[39m
    },
    cancelOpen: [36m[Function: bound handleRejection][39m,
    openCanceller: DexiePromise [Dexie.Promise] {
      _listeners: [36m[Array][39m,
      onuncatched: [36m[Function: nop][39m,
      _lib: [33mfalse[39m,
      _PSD: [36m[Object][39m,
      _stackHolder: Error: 
          at Debug.getErrorWithStack [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/helpers/debug.ts:29:12[90m)[39m
          at dexieOpen [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie-open.ts:24:54[90m)[39m
          at TodoDatabase.Dexie.open [90m(/Users/esmirnov/projects/lift-v2/[39mnode_modules/[4mdexie[24m/src/classes/dexie/dexie.ts:285:12[90m)[39m
          at TodoDatabase.initialize [90m(/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/database/TodoDatabase.ts:384:18[90m)[39m
          at [90m/Users/esmirnov/projects/lift-v2/[39msrc/shared/infrastructure/repositories/__tests__/TaskRepositoryImpl.test.ts:16:14
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
          at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
          at new Promise (&lt;anonymous&gt;)
          at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
          at runHook [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51[90m)[39m,
      _prev: [1mnull[22m,
      _numPrev: [33m0[39m,
      _state: [1mnull[22m,
      _value: [1mnull[22m
    },
    autoSchema: [33mfalse[39m,
    PR1398_maxLoop: [33m3[39m
  },
  name: [32m&apos;TodoDatabase&apos;[39m,
  on: [Function: rv] {
    addEventType: [36m[Function: add][39m,
    populate: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    blocked: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    versionchange: {
      subscribers: [36m[Array][39m,
      fire: [36m[Function (anonymous)][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    close: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function: subscribe][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    },
    ready: {
      subscribers: [],
      fire: [36m[Function: nop][39m,
      subscribe: [36m[Function (anonymous)][39m,
      unsubscribe: [36m[Function: unsubscribe][39m
    }
  },
  Collection: [36m[Function: Collection][39m,
  Table: [36m[Function: Table][39m,
  Transaction: [36m[Function: Transaction][39m,
  Version: [36m[Function: Version][39m,
  WhereClause: [36m[Function: WhereClause][39m,
  _maxKey: [ [] ],
  _createTransaction: [36m[Function (anonymous)][39m,
  _fireOnBlocked: [36m[Function (anonymous)][39m,
  vip: TodoDatabase {},
  tasks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;tasks&apos;[39m,
    schema: {
      name: [32m&apos;tasks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;tasks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  dailySelectionEntries: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;dailySelectionEntries&apos;[39m,
    schema: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;dailySelectionEntries&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  taskLogs: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;taskLogs&apos;[39m,
    schema: {
      name: [32m&apos;taskLogs&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;taskLogs&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  userSettings: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;userSettings&apos;[39m,
    schema: {
      name: [32m&apos;userSettings&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;userSettings&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  syncQueue: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;syncQueue&apos;[39m,
    schema: {
      name: [32m&apos;syncQueue&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;syncQueue&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  statsDaily: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;statsDaily&apos;[39m,
    schema: {
      name: [32m&apos;statsDaily&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;statsDaily&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  eventStore: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;eventStore&apos;[39m,
    schema: {
      name: [32m&apos;eventStore&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;eventStore&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  handledEvents: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;handledEvents&apos;[39m,
    schema: {
      name: [32m&apos;handledEvents&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;handledEvents&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  locks: Table {
    db: [36m[Circular *1][39m,
    _tx: [90mundefined[39m,
    name: [32m&apos;locks&apos;[39m,
    schema: {
      name: [32m&apos;locks&apos;[39m,
      primKey: [36m[Object][39m,
      indexes: [36m[Array][39m,
      mappedClass: [1mnull[22m,
      idxByName: [36m[Object][39m
    },
    hook: [Function: rv] {
      addEventType: [36m[Function: add][39m,
      creating: [36m[Object][39m,
      reading: [36m[Object][39m,
      updating: [36m[Object][39m,
      deleting: [36m[Object][39m
    },
    core: {
      name: [32m&apos;locks&apos;[39m,
      schema: [36m[Object][39m,
      mutate: [36m[Function: mutate][39m,
      getMany: [36m[Function (anonymous)][39m,
      get: [36m[Function (anonymous)][39m,
      query: [36m[Function: query][39m,
      openCursor: [36m[Function: openCursor][39m,
      count: [36m[Function: count][39m
    }
  },
  _hasGetAll: [33mtrue[39m,
  core: {
    stack: [32m&apos;dbcore&apos;[39m,
    transaction: [36m[Function: bound transaction][39m,
    table: [36m[Function: table][39m,
    MIN_KEY: [33m-Infinity[39m,
    MAX_KEY: [ [] ],
    schema: { name: [32m&apos;TodoDatabase&apos;[39m, tables: [36m[FakeDOMStringList][39m }
  }
}

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/shared/infrastructure/services/__tests__/KeyboardShortcutService.test.ts" timestamp="2025-08-09T13:38:10.893Z" hostname="MacBook-Egor.local" tests="17" failures="0" errors="0" skipped="0" time="0.014590875">
        <testcase classname="src/shared/infrastructure/services/__tests__/KeyboardShortcutService.test.ts" name="KeyboardShortcutService &gt; shortcut registration &gt; should register a keyboard shortcut" time="0.002030542">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/KeyboardShortcutService.test.ts" name="KeyboardShortcutService &gt; shortcut registration &gt; should unregister a keyboard shortcut" time="0.000308958">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/KeyboardShortcutService.test.ts" name="KeyboardShortcutService &gt; shortcut registration &gt; should get shortcuts by category" time="0.000363334">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/KeyboardShortcutService.test.ts" name="KeyboardShortcutService &gt; enable/disable functionality &gt; should be enabled by default on desktop" time="0.000119917">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/KeyboardShortcutService.test.ts" name="KeyboardShortcutService &gt; enable/disable functionality &gt; should allow enabling/disabling shortcuts" time="0.0002225">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/KeyboardShortcutService.test.ts" name="KeyboardShortcutService &gt; enable/disable functionality &gt; should be disabled on mobile devices" time="0.000192375">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/KeyboardShortcutService.test.ts" name="KeyboardShortcutService &gt; keyboard event handling &gt; should have event listener set up" time="0.000666166">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/KeyboardShortcutService.test.ts" name="KeyboardShortcutService &gt; keyboard event handling &gt; should not trigger handler when shortcuts are disabled" time="0.000445708">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/KeyboardShortcutService.test.ts" name="KeyboardShortcutService &gt; keyboard event handling &gt; should detect input field targets correctly" time="0.003096875">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/KeyboardShortcutService.test.ts" name="KeyboardShortcutService &gt; keyboard event handling &gt; should handle event listener cleanup" time="0.000438375">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/KeyboardShortcutService.test.ts" name="KeyboardShortcutService &gt; shortcut matching &gt; should match shortcuts with exact modifiers" time="0.003203167">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/KeyboardShortcutService.test.ts" name="KeyboardShortcutService &gt; shortcut matching &gt; should be case insensitive for key matching" time="0.000244875">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/KeyboardShortcutService.test.ts" name="KeyboardShortcutService &gt; shortcut matching &gt; should handle missing modifiers correctly" time="0.000116541">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/KeyboardShortcutService.test.ts" name="KeyboardShortcutService &gt; shortcut formatting &gt; should format shortcut with single key" time="0.000091083">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/KeyboardShortcutService.test.ts" name="KeyboardShortcutService &gt; shortcut formatting &gt; should format shortcut with modifier keys" time="0.000063417">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/KeyboardShortcutService.test.ts" name="KeyboardShortcutService &gt; shortcut formatting &gt; should format shortcut with all modifiers" time="0.000061834">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/KeyboardShortcutService.test.ts" name="KeyboardShortcutService &gt; cleanup &gt; should remove event listeners and clear shortcuts on destroy" time="0.001436625">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/infrastructure/services/__tests__/useTouchGestures.test.ts" timestamp="2025-08-09T13:38:10.895Z" hostname="MacBook-Egor.local" tests="22" failures="0" errors="0" skipped="1" time="0.110733958">
        <testcase classname="src/shared/infrastructure/services/__tests__/useTouchGestures.test.ts" name="useTouchGestures &gt; hook initialization &gt; should initialize without handlers" time="0.011047125">
            <system-err>
Warning: `ReactDOMTestUtils.act` is deprecated in favor of `React.act`. Import `act` from `react` instead of `react-dom/test-utils`. See https://react.dev/warnings/react-dom-test-utils for more info.

            </system-err>
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/useTouchGestures.test.ts" name="useTouchGestures &gt; hook initialization &gt; should initialize with handlers" time="0.0020015">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/useTouchGestures.test.ts" name="useTouchGestures &gt; gesture attachment &gt; should attach event listeners to element" time="0.003372417">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/useTouchGestures.test.ts" name="useTouchGestures &gt; gesture attachment &gt; should return cleanup function" time="0.00149925">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/useTouchGestures.test.ts" name="useTouchGestures &gt; gesture attachment &gt; should handle null element gracefully" time="0.002225916">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/useTouchGestures.test.ts" name="useTouchGestures &gt; swipe detection &gt; should detect horizontal swipe right" time="0.026936625">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/useTouchGestures.test.ts" name="useTouchGestures &gt; swipe detection &gt; should detect horizontal swipe left" time="0.015396834">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/useTouchGestures.test.ts" name="useTouchGestures &gt; swipe detection &gt; should detect vertical swipe up" time="0.001226459">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/useTouchGestures.test.ts" name="useTouchGestures &gt; swipe detection &gt; should detect vertical swipe down" time="0.011314">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/useTouchGestures.test.ts" name="useTouchGestures &gt; tap detection &gt; should detect quick tap" time="0.004067375">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/useTouchGestures.test.ts" name="useTouchGestures &gt; tap detection &gt; should not detect tap if movement is too large" time="0.000832084">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/useTouchGestures.test.ts" name="useTouchGestures &gt; long press detection &gt; should detect long press" time="0.001221125">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/useTouchGestures.test.ts" name="useTouchGestures &gt; long press detection &gt; should cancel long press on touch move" time="0.000699833">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/useTouchGestures.test.ts" name="useTouchGestures &gt; custom thresholds &gt; should use custom swipe threshold" time="0.000725834">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/useTouchGestures.test.ts" name="useTouchGestures &gt; custom thresholds &gt; should use custom long press delay" time="0.010487833">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/useTouchGestures.test.ts" name="device detection utilities &gt; isTouchDevice &gt; should detect touch device by ontouchstart" time="0.000148833">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/useTouchGestures.test.ts" name="device detection utilities &gt; isTouchDevice &gt; should detect touch device by maxTouchPoints" time="0.000050625">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/useTouchGestures.test.ts" name="device detection utilities &gt; isTouchDevice &gt; should detect non-touch device" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/useTouchGestures.test.ts" name="device detection utilities &gt; getDeviceType &gt; should detect mobile device" time="0.000063083">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/useTouchGestures.test.ts" name="device detection utilities &gt; getDeviceType &gt; should detect tablet device" time="0.0000415">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/useTouchGestures.test.ts" name="device detection utilities &gt; getDeviceType &gt; should detect desktop device" time="0.003936583">
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/useTouchGestures.test.ts" name="device detection utilities &gt; getDeviceType &gt; should default to desktop in server environment" time="0.011348708">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/infrastructure/services/__tests__/useTouchGestures.test.tsx" timestamp="2025-08-09T13:38:10.899Z" hostname="MacBook-Egor.local" tests="2" failures="0" errors="0" skipped="0" time="0.064369875">
        <testcase classname="src/shared/infrastructure/services/__tests__/useTouchGestures.test.tsx" name="useTouchGestures &gt; ignores taps on interactive elements" time="0.055926042">
            <system-err>
Warning: `ReactDOMTestUtils.act` is deprecated in favor of `React.act`. Import `act` from `react` instead of `react-dom/test-utils`. See https://react.dev/warnings/react-dom-test-utils for more info.

            </system-err>
        </testcase>
        <testcase classname="src/shared/infrastructure/services/__tests__/useTouchGestures.test.tsx" name="useTouchGestures &gt; detects taps on non-interactive elements" time="0.006743042">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/presentation/hooks/__tests__/useSync.test.tsx" timestamp="2025-08-09T13:38:10.899Z" hostname="MacBook-Egor.local" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/shared/presentation/hooks/__tests__/useSync.test.tsx" name="src/shared/presentation/hooks/__tests__/useSync.test.tsx" time="0">
            <failure message="Failed to resolve import &quot;../../infrastructure/di/syncContainer&quot; from &quot;src/shared/presentation/hooks/__tests__/useSync.test.tsx&quot;. Does the file exist?" type="Error">
Error: Failed to resolve import &quot;../../infrastructure/di/syncContainer&quot; from &quot;src/shared/presentation/hooks/__tests__/useSync.test.tsx&quot;. Does the file exist?
  Plugin: vite:import-analysis
  File: /Users/esmirnov/projects/lift-v2/src/shared/presentation/hooks/__tests__/useSync.test.tsx:62:32
  48 |    let mockRealtimeService;
  49 |    beforeAll(async () =&gt; {
  50 |      const module = await import(&quot;../../infrastructure/di/syncContainer&quot;);
     |                                  ^
  51 |      mockSyncService = module.mockSyncService;
  52 |      mockRealtimeService = module.mockRealtimeService;
 ❯ TransformPluginContext._formatLog node_modules/vitest/node_modules/vite/dist/node/chunks/dep-eRCq8YxU.js:31645:43
 ❯ TransformPluginContext.error node_modules/vitest/node_modules/vite/dist/node/chunks/dep-eRCq8YxU.js:31642:14
 ❯ normalizeUrl node_modules/vitest/node_modules/vite/dist/node/chunks/dep-eRCq8YxU.js:30114:18
 ❯ node_modules/vitest/node_modules/vite/dist/node/chunks/dep-eRCq8YxU.js:30172:32
 ❯ TransformPluginContext.transform node_modules/vitest/node_modules/vite/dist/node/chunks/dep-eRCq8YxU.js:30140:4
 ❯ EnvironmentPluginContainer.transform node_modules/vitest/node_modules/vite/dist/node/chunks/dep-eRCq8YxU.js:31443:14
 ❯ loadAndTransform node_modules/vitest/node_modules/vite/dist/node/chunks/dep-eRCq8YxU.js:26530:26
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/shared/infrastructure/sync/__tests__/SupabaseRealtimeService.test.ts" timestamp="2025-08-09T13:38:10.899Z" hostname="MacBook-Egor.local" tests="16" failures="6" errors="0" skipped="0" time="0.052703583">
        <testcase classname="src/shared/infrastructure/sync/__tests__/SupabaseRealtimeService.test.ts" name="SupabaseRealtimeService &gt; subscribeToTaskChanges &gt; should subscribe to task changes successfully" time="0.0077795">
        </testcase>
        <testcase classname="src/shared/infrastructure/sync/__tests__/SupabaseRealtimeService.test.ts" name="SupabaseRealtimeService &gt; subscribeToTaskChanges &gt; should handle subscription errors" time="0.004110458">
            <system-err>
Real-time connection error: { message: [32m&apos;Subscription failed&apos;[39m }

            </system-err>
        </testcase>
        <testcase classname="src/shared/infrastructure/sync/__tests__/SupabaseRealtimeService.test.ts" name="SupabaseRealtimeService &gt; subscribeToTaskChanges &gt; should not subscribe if already subscribed" time="0.000736042">
        </testcase>
        <testcase classname="src/shared/infrastructure/sync/__tests__/SupabaseRealtimeService.test.ts" name="SupabaseRealtimeService &gt; subscribeToDailySelectionChanges &gt; should subscribe to daily selection changes successfully" time="0.000483667">
        </testcase>
        <testcase classname="src/shared/infrastructure/sync/__tests__/SupabaseRealtimeService.test.ts" name="SupabaseRealtimeService &gt; subscribeToDailySelectionChanges &gt; should not subscribe if already subscribed" time="0.000253583">
        </testcase>
        <testcase classname="src/shared/infrastructure/sync/__tests__/SupabaseRealtimeService.test.ts" name="SupabaseRealtimeService &gt; subscribeToAllChanges &gt; should subscribe to both tasks and daily selection changes" time="0.000806417">
        </testcase>
        <testcase classname="src/shared/infrastructure/sync/__tests__/SupabaseRealtimeService.test.ts" name="SupabaseRealtimeService &gt; unsubscribeFromTaskChanges &gt; should unsubscribe successfully" time="0.000840375">
        </testcase>
        <testcase classname="src/shared/infrastructure/sync/__tests__/SupabaseRealtimeService.test.ts" name="SupabaseRealtimeService &gt; unsubscribeFromTaskChanges &gt; should handle unsubscribe when not subscribed" time="0.026033958">
        </testcase>
        <testcase classname="src/shared/infrastructure/sync/__tests__/SupabaseRealtimeService.test.ts" name="SupabaseRealtimeService &gt; unsubscribeFromAllChanges &gt; should unsubscribe from all channels" time="0.004892458">
        </testcase>
        <testcase classname="src/shared/infrastructure/sync/__tests__/SupabaseRealtimeService.test.ts" name="SupabaseRealtimeService &gt; handleDailySelectionChange &gt; should handle INSERT event for current date" time="0.003191917">
            <failure message="realtimeService.on is not a function" type="TypeError">
TypeError: realtimeService.on is not a function
 ❯ src/shared/infrastructure/sync/__tests__/SupabaseRealtimeService.test.ts:313:23
            </failure>
        </testcase>
        <testcase classname="src/shared/infrastructure/sync/__tests__/SupabaseRealtimeService.test.ts" name="SupabaseRealtimeService &gt; handleDailySelectionChange &gt; should handle UPDATE event for current date" time="0.0003985">
            <failure message="realtimeService.on is not a function" type="TypeError">
TypeError: realtimeService.on is not a function
 ❯ src/shared/infrastructure/sync/__tests__/SupabaseRealtimeService.test.ts:313:23
            </failure>
        </testcase>
        <testcase classname="src/shared/infrastructure/sync/__tests__/SupabaseRealtimeService.test.ts" name="SupabaseRealtimeService &gt; handleDailySelectionChange &gt; should handle soft delete (UPDATE with deleted_at) as DELETE event" time="0.000183667">
            <failure message="realtimeService.on is not a function" type="TypeError">
TypeError: realtimeService.on is not a function
 ❯ src/shared/infrastructure/sync/__tests__/SupabaseRealtimeService.test.ts:313:23
            </failure>
        </testcase>
        <testcase classname="src/shared/infrastructure/sync/__tests__/SupabaseRealtimeService.test.ts" name="SupabaseRealtimeService &gt; handleDailySelectionChange &gt; should ignore soft-deleted records for INSERT events" time="0.000291667">
            <failure message="realtimeService.on is not a function" type="TypeError">
TypeError: realtimeService.on is not a function
 ❯ src/shared/infrastructure/sync/__tests__/SupabaseRealtimeService.test.ts:313:23
            </failure>
        </testcase>
        <testcase classname="src/shared/infrastructure/sync/__tests__/SupabaseRealtimeService.test.ts" name="SupabaseRealtimeService &gt; handleDailySelectionChange &gt; should ignore events for different dates" time="0.000167833">
            <failure message="realtimeService.on is not a function" type="TypeError">
TypeError: realtimeService.on is not a function
 ❯ src/shared/infrastructure/sync/__tests__/SupabaseRealtimeService.test.ts:313:23
            </failure>
        </testcase>
        <testcase classname="src/shared/infrastructure/sync/__tests__/SupabaseRealtimeService.test.ts" name="SupabaseRealtimeService &gt; handleDailySelectionChange &gt; should handle DELETE event for current date" time="0.000128125">
            <failure message="realtimeService.on is not a function" type="TypeError">
TypeError: realtimeService.on is not a function
 ❯ src/shared/infrastructure/sync/__tests__/SupabaseRealtimeService.test.ts:313:23
            </failure>
        </testcase>
        <testcase classname="src/shared/infrastructure/sync/__tests__/SupabaseRealtimeService.test.ts" name="SupabaseRealtimeService &gt; connection status &gt; should return correct connection status" time="0.000258583">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/infrastructure/sync/__tests__/SyncService.test.ts" timestamp="2025-08-09T13:38:10.901Z" hostname="MacBook-Egor.local" tests="9" failures="0" errors="0" skipped="0" time="0.023505084">
        <testcase classname="src/shared/infrastructure/sync/__tests__/SyncService.test.ts" name="SyncService &gt; performSync &gt; should perform successful sync" time="0.002844167">
        </testcase>
        <testcase classname="src/shared/infrastructure/sync/__tests__/SyncService.test.ts" name="SyncService &gt; performSync &gt; should handle offline state" time="0.002011625">
        </testcase>
        <testcase classname="src/shared/infrastructure/sync/__tests__/SyncService.test.ts" name="SyncService &gt; performSync &gt; should handle sync errors" time="0.001818">
        </testcase>
        <testcase classname="src/shared/infrastructure/sync/__tests__/SyncService.test.ts" name="SyncService &gt; performBackgroundSync &gt; should perform background sync when online" time="0.000352375">
        </testcase>
        <testcase classname="src/shared/infrastructure/sync/__tests__/SyncService.test.ts" name="SyncService &gt; performBackgroundSync &gt; should handle background sync errors silently" time="0.000524708">
        </testcase>
        <testcase classname="src/shared/infrastructure/sync/__tests__/SyncService.test.ts" name="SyncService &gt; forcePushLocalChanges &gt; should push local changes successfully" time="0.000920125">
        </testcase>
        <testcase classname="src/shared/infrastructure/sync/__tests__/SyncService.test.ts" name="SyncService &gt; forcePushLocalChanges &gt; should handle push errors" time="0.001058625">
        </testcase>
        <testcase classname="src/shared/infrastructure/sync/__tests__/SyncService.test.ts" name="SyncService &gt; getSyncStatus &gt; should return sync status" time="0.000987875">
        </testcase>
        <testcase classname="src/shared/infrastructure/sync/__tests__/SyncService.test.ts" name="SyncService &gt; getSyncStatus &gt; should handle status errors" time="0.002944834">
        </testcase>
    </testsuite>
    <testsuite name="src/features/logs/presentation/view-models/__tests__/LogViewModel.test.ts" timestamp="2025-08-09T13:38:10.902Z" hostname="MacBook-Egor.local" tests="12" failures="0" errors="0" skipped="0" time="0.105894458">
        <testcase classname="src/features/logs/presentation/view-models/__tests__/LogViewModel.test.ts" name="LogViewModel &gt; Initial State &gt; should have correct initial state" time="0.001488583">
        </testcase>
        <testcase classname="src/features/logs/presentation/view-models/__tests__/LogViewModel.test.ts" name="LogViewModel &gt; loadLogs &gt; should load logs successfully" time="0.002985417">
        </testcase>
        <testcase classname="src/features/logs/presentation/view-models/__tests__/LogViewModel.test.ts" name="LogViewModel &gt; loadLogs &gt; should handle load logs error" time="0.000286541">
        </testcase>
        <testcase classname="src/features/logs/presentation/view-models/__tests__/LogViewModel.test.ts" name="LogViewModel &gt; loadLogs &gt; should set loading state during load" time="0.000149042">
        </testcase>
        <testcase classname="src/features/logs/presentation/view-models/__tests__/LogViewModel.test.ts" name="LogViewModel &gt; createUserLog &gt; should create user log successfully" time="0.00086675">
        </testcase>
        <testcase classname="src/features/logs/presentation/view-models/__tests__/LogViewModel.test.ts" name="LogViewModel &gt; createUserLog &gt; should handle create user log error" time="0.000134791">
        </testcase>
        <testcase classname="src/features/logs/presentation/view-models/__tests__/LogViewModel.test.ts" name="LogViewModel &gt; Pagination &gt; should load next page" time="0.033435542">
        </testcase>
        <testcase classname="src/features/logs/presentation/view-models/__tests__/LogViewModel.test.ts" name="LogViewModel &gt; Pagination &gt; should load previous page" time="0.001338875">
        </testcase>
        <testcase classname="src/features/logs/presentation/view-models/__tests__/LogViewModel.test.ts" name="LogViewModel &gt; Filtering &gt; should set filter and reload logs" time="0.024046542">
        </testcase>
        <testcase classname="src/features/logs/presentation/view-models/__tests__/LogViewModel.test.ts" name="LogViewModel &gt; Computed Properties &gt; should filter logs correctly" time="0.028319917">
        </testcase>
        <testcase classname="src/features/logs/presentation/view-models/__tests__/LogViewModel.test.ts" name="LogViewModel &gt; Computed Properties &gt; should group logs by type" time="0.000362">
        </testcase>
        <testcase classname="src/features/logs/presentation/view-models/__tests__/LogViewModel.test.ts" name="LogViewModel &gt; Computed Properties &gt; should check if has logs" time="0.000075333">
        </testcase>
    </testsuite>
    <testsuite name="src/features/onboarding/application/services/__tests__/OnboardingService.test.ts" timestamp="2025-08-09T13:38:10.903Z" hostname="MacBook-Egor.local" tests="17" failures="0" errors="0" skipped="0" time="0.018612708">
        <testcase classname="src/features/onboarding/application/services/__tests__/OnboardingService.test.ts" name="OnboardingService &gt; isInMorningWindow &gt; should return true when current time is in morning window (6-11 AM)" time="0.006286125">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/OnboardingService.test.ts" name="OnboardingService &gt; isInMorningWindow &gt; should return false when current time is before morning window" time="0.000998209">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/OnboardingService.test.ts" name="OnboardingService &gt; isInMorningWindow &gt; should return false when current time is after morning window" time="0.000542917">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/OnboardingService.test.ts" name="OnboardingService &gt; isInMorningWindow &gt; should return false at exactly 11 AM (end of window)" time="0.000515625">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/OnboardingService.test.ts" name="OnboardingService &gt; getRandomMotivationalMessage &gt; should return a motivational message" time="0.000585125">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/OnboardingService.test.ts" name="OnboardingService &gt; getRandomMotivationalMessage &gt; should return different messages on multiple calls" time="0.000320416">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/OnboardingService.test.ts" name="OnboardingService &gt; getUnfinishedTasksFromYesterday &gt; should return unfinished active tasks from yesterday" time="0.002950792">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/OnboardingService.test.ts" name="OnboardingService &gt; getUnfinishedTasksFromYesterday &gt; should not return completed tasks from yesterday" time="0.001697167">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/OnboardingService.test.ts" name="OnboardingService &gt; getUnfinishedTasksFromYesterday &gt; should not return deleted or completed tasks" time="0.000553459">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/OnboardingService.test.ts" name="OnboardingService &gt; getOverdueInboxTasks &gt; should return overdue inbox tasks" time="0.000373375">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/OnboardingService.test.ts" name="OnboardingService &gt; getRegularInboxTasks &gt; should return regular inbox tasks" time="0.000261875">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/OnboardingService.test.ts" name="OnboardingService &gt; getRegularInboxTasks &gt; should filter out overdue tasks" time="0.0002585">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/OnboardingService.test.ts" name="OnboardingService &gt; aggregateDailyModalData &gt; should aggregate all data for the daily modal" time="0.000518208">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/OnboardingService.test.ts" name="OnboardingService &gt; aggregateDailyModalData &gt; should not show modal outside morning window" time="0.000331833">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/OnboardingService.test.ts" name="OnboardingService &gt; shouldShowDailyModal &gt; should return true when in morning window and has content" time="0.000338041">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/OnboardingService.test.ts" name="OnboardingService &gt; shouldShowDailyModal &gt; should return false when not in morning window" time="0.000179708">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/OnboardingService.test.ts" name="OnboardingService &gt; shouldShowDailyModal &gt; should return false when no content to show" time="0.000170875">
        </testcase>
    </testsuite>
    <testsuite name="src/features/onboarding/application/services/__tests__/UserSettingsService.test.ts" timestamp="2025-08-09T13:38:10.904Z" hostname="MacBook-Egor.local" tests="17" failures="0" errors="0" skipped="0" time="0.043546625">
        <testcase classname="src/features/onboarding/application/services/__tests__/UserSettingsService.test.ts" name="UserSettingsService &gt; getUserSettings &gt; should return settings with defaults when no settings exist" time="0.007287917">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/UserSettingsService.test.ts" name="UserSettingsService &gt; getUserSettings &gt; should return existing settings when they exist" time="0.000268583">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/UserSettingsService.test.ts" name="UserSettingsService &gt; getUserSettings &gt; should merge existing settings with defaults for missing values" time="0.000174708">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/UserSettingsService.test.ts" name="UserSettingsService &gt; updateUserSettings &gt; should update multiple settings" time="0.002244459">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/UserSettingsService.test.ts" name="UserSettingsService &gt; updateUserSettings &gt; should update only provided settings" time="0.00020025">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/UserSettingsService.test.ts" name="UserSettingsService &gt; getInboxOverdueDays &gt; should return stored value when it exists" time="0.000346583">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/UserSettingsService.test.ts" name="UserSettingsService &gt; getInboxOverdueDays &gt; should return default value when no value is stored" time="0.000067875">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/UserSettingsService.test.ts" name="UserSettingsService &gt; setInboxOverdueDays &gt; should set valid inbox overdue days" time="0.006279375">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/UserSettingsService.test.ts" name="UserSettingsService &gt; setInboxOverdueDays &gt; should throw error for invalid values (too low)" time="0.008073417">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/UserSettingsService.test.ts" name="UserSettingsService &gt; setInboxOverdueDays &gt; should throw error for invalid values (too high)" time="0.000162083">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/UserSettingsService.test.ts" name="UserSettingsService &gt; getKeyboardShortcutsEnabled &gt; should return stored value when it exists" time="0.000177291">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/UserSettingsService.test.ts" name="UserSettingsService &gt; getKeyboardShortcutsEnabled &gt; should return default value when no value is stored" time="0.000065917">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/UserSettingsService.test.ts" name="UserSettingsService &gt; setKeyboardShortcutsEnabled &gt; should set keyboard shortcuts enabled" time="0.000071291">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/UserSettingsService.test.ts" name="UserSettingsService &gt; resetToDefaults &gt; should clear all settings and set defaults" time="0.004754666">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/UserSettingsService.test.ts" name="UserSettingsService &gt; initializeDefaults &gt; should set defaults for missing settings only" time="0.000643625">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/UserSettingsService.test.ts" name="UserSettingsService &gt; initializeDefaults &gt; should not set any defaults when all settings exist" time="0.000415708">
        </testcase>
        <testcase classname="src/features/onboarding/application/services/__tests__/UserSettingsService.test.ts" name="UserSettingsService &gt; initializeDefaults &gt; should set all defaults when no settings exist" time="0.01016475">
        </testcase>
    </testsuite>
    <testsuite name="src/features/onboarding/presentation/view-models/__tests__/OnboardingViewModel.test.ts" timestamp="2025-08-09T13:38:10.905Z" hostname="MacBook-Egor.local" tests="6" failures="0" errors="0" skipped="0" time="0.053885042">
        <testcase classname="src/features/onboarding/presentation/view-models/__tests__/OnboardingViewModel.test.ts" name="OnboardingViewModel &gt; checkDayTransition and resetForNewDay &gt; should preserve modal data when modal is visible during day transition" time="0.017415583">
            <system-err>
Warning: `ReactDOMTestUtils.act` is deprecated in favor of `React.act`. Import `act` from `react` instead of `react-dom/test-utils`. See https://react.dev/warnings/react-dom-test-utils for more info.

            </system-err>
        </testcase>
        <testcase classname="src/features/onboarding/presentation/view-models/__tests__/OnboardingViewModel.test.ts" name="OnboardingViewModel &gt; checkDayTransition and resetForNewDay &gt; should clear modal data when modal is not visible during day transition" time="0.010011167">
        </testcase>
        <testcase classname="src/features/onboarding/presentation/view-models/__tests__/OnboardingViewModel.test.ts" name="OnboardingViewModel &gt; checkDayTransition and resetForNewDay &gt; should not trigger day transition when day has not changed" time="0.00349925">
        </testcase>
        <testcase classname="src/features/onboarding/presentation/view-models/__tests__/OnboardingViewModel.test.ts" name="OnboardingViewModel &gt; checkDayTransition and resetForNewDay &gt; should manually reset for new day with preserve flag" time="0.011416209">
        </testcase>
        <testcase classname="src/features/onboarding/presentation/view-models/__tests__/OnboardingViewModel.test.ts" name="OnboardingViewModel &gt; checkDayTransition and resetForNewDay &gt; should manually reset for new day without preserve flag" time="0.006517833">
        </testcase>
        <testcase classname="src/features/onboarding/presentation/view-models/__tests__/OnboardingViewModel.test.ts" name="OnboardingViewModel &gt; modal visibility and data preservation scenario &gt; should preserve Friday tasks when user returns on Monday with modal still open" time="0.00272175">
        </testcase>
    </testsuite>
    <testsuite name="src/features/stats/application/event-handlers/__tests__/StatsUpdateHandler.test.ts" timestamp="2025-08-09T13:38:10.905Z" hostname="MacBook-Egor.local" tests="8" failures="0" errors="0" skipped="0" time="0.015881416">
        <testcase classname="src/features/stats/application/event-handlers/__tests__/StatsUpdateHandler.test.ts" name="StatsUpdateHandler &gt; handleTaskCompleted &gt; should record task completion in statistics" time="0.002379208">
        </testcase>
        <testcase classname="src/features/stats/application/event-handlers/__tests__/StatsUpdateHandler.test.ts" name="StatsUpdateHandler &gt; handleTaskCompleted &gt; should handle statistics service errors gracefully" time="0.003320167">
            <system-err>
Failed to update statistics for task completion: Error: Statistics service error
    at [90m/Users/esmirnov/projects/lift-v2/[39msrc/features/stats/application/event-handlers/__tests__/StatsUpdateHandler.test.ts:52:9
    at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m

            </system-err>
        </testcase>
        <testcase classname="src/features/stats/application/event-handlers/__tests__/StatsUpdateHandler.test.ts" name="StatsUpdateHandler &gt; handleTaskCompletionReverted &gt; should revert task completion in statistics" time="0.000501375">
        </testcase>
        <testcase classname="src/features/stats/application/event-handlers/__tests__/StatsUpdateHandler.test.ts" name="StatsUpdateHandler &gt; handleTaskCompletionReverted &gt; should handle statistics service errors gracefully" time="0.000762083">
            <system-err>
Failed to revert statistics for task completion: Error: Statistics service error
    at [90m/Users/esmirnov/projects/lift-v2/[39msrc/features/stats/application/event-handlers/__tests__/StatsUpdateHandler.test.ts:81:9
    at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m

            </system-err>
        </testcase>
        <testcase classname="src/features/stats/application/event-handlers/__tests__/StatsUpdateHandler.test.ts" name="StatsUpdateHandler &gt; handleTaskReviewed &gt; should record inbox review in statistics" time="0.000609083">
        </testcase>
        <testcase classname="src/features/stats/application/event-handlers/__tests__/StatsUpdateHandler.test.ts" name="StatsUpdateHandler &gt; handleTaskReviewed &gt; should handle statistics service errors gracefully" time="0.0006585">
            <system-err>
Failed to update statistics for task review: Error: Statistics service error
    at [90m/Users/esmirnov/projects/lift-v2/[39msrc/features/stats/application/event-handlers/__tests__/StatsUpdateHandler.test.ts:111:9
    at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///Users/esmirnov/projects/lift-v2/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m

            </system-err>
        </testcase>
        <testcase classname="src/features/stats/application/event-handlers/__tests__/StatsUpdateHandler.test.ts" name="StatsUpdateHandler &gt; error resilience &gt; should continue processing even if statistics update fails" time="0.001915833">
        </testcase>
        <testcase classname="src/features/stats/application/event-handlers/__tests__/StatsUpdateHandler.test.ts" name="StatsUpdateHandler &gt; handler identification &gt; should have correct handler ID" time="0.002982334">
        </testcase>
    </testsuite>
    <testsuite name="src/features/stats/application/event-handlers/__tests__/TaskLogEventHandler.test.ts" timestamp="2025-08-09T13:38:10.906Z" hostname="MacBook-Egor.local" tests="9" failures="0" errors="0" skipped="0" time="0.009640708">
        <testcase classname="src/features/stats/application/event-handlers/__tests__/TaskLogEventHandler.test.ts" name="TaskLogEventHandler &gt; handleTaskCreated &gt; should create system log for task creation" time="0.004293333">
        </testcase>
        <testcase classname="src/features/stats/application/event-handlers/__tests__/TaskLogEventHandler.test.ts" name="TaskLogEventHandler &gt; handleTaskCompleted &gt; should create system log for task completion" time="0.000613375">
        </testcase>
        <testcase classname="src/features/stats/application/event-handlers/__tests__/TaskLogEventHandler.test.ts" name="TaskLogEventHandler &gt; handleTaskCategoryChanged &gt; should create system log for category change" time="0.000308542">
        </testcase>
        <testcase classname="src/features/stats/application/event-handlers/__tests__/TaskLogEventHandler.test.ts" name="TaskLogEventHandler &gt; handleTaskReviewed &gt; should create system log for task review" time="0.000327958">
        </testcase>
        <testcase classname="src/features/stats/application/event-handlers/__tests__/TaskLogEventHandler.test.ts" name="TaskLogEventHandler &gt; handleTaskNoteChanged &gt; should create system log for note added" time="0.000254">
        </testcase>
        <testcase classname="src/features/stats/application/event-handlers/__tests__/TaskLogEventHandler.test.ts" name="TaskLogEventHandler &gt; handleTaskNoteChanged &gt; should create system log for note removed" time="0.000129375">
        </testcase>
        <testcase classname="src/features/stats/application/event-handlers/__tests__/TaskLogEventHandler.test.ts" name="TaskLogEventHandler &gt; handleTaskNoteChanged &gt; should create system log for note changed" time="0.000098791">
        </testcase>
        <testcase classname="src/features/stats/application/event-handlers/__tests__/TaskLogEventHandler.test.ts" name="TaskLogEventHandler &gt; idempotency &gt; should use deterministic IDs for idempotent operations" time="0.000902083">
        </testcase>
        <testcase classname="src/features/stats/application/event-handlers/__tests__/TaskLogEventHandler.test.ts" name="TaskLogEventHandler &gt; error handling &gt; should handle database errors gracefully" time="0.001517667">
        </testcase>
    </testsuite>
    <testsuite name="src/features/stats/application/services/__tests__/EventMonitor.test.ts" timestamp="2025-08-09T13:38:10.906Z" hostname="MacBook-Egor.local" tests="11" failures="0" errors="0" skipped="0" time="0.031546708">
        <testcase classname="src/features/stats/application/services/__tests__/EventMonitor.test.ts" name="EventMonitor &gt; getProcessingStats &gt; should return comprehensive processing statistics" time="0.018153583">
        </testcase>
        <testcase classname="src/features/stats/application/services/__tests__/EventMonitor.test.ts" name="EventMonitor &gt; getEventsByStatus &gt; should return events filtered by status with pagination" time="0.001265292">
        </testcase>
        <testcase classname="src/features/stats/application/services/__tests__/EventMonitor.test.ts" name="EventMonitor &gt; getStuckEvents &gt; should identify events with high attempt count or long processing time" time="0.000420375">
        </testcase>
        <testcase classname="src/features/stats/application/services/__tests__/EventMonitor.test.ts" name="EventMonitor &gt; getHealthStatus &gt; should return healthy status when everything is normal" time="0.003840334">
        </testcase>
        <testcase classname="src/features/stats/application/services/__tests__/EventMonitor.test.ts" name="EventMonitor &gt; getHealthStatus &gt; should return warning status for high pending events" time="0.003032042">
        </testcase>
        <testcase classname="src/features/stats/application/services/__tests__/EventMonitor.test.ts" name="EventMonitor &gt; getHealthStatus &gt; should return critical status for dead letter events" time="0.000491916">
        </testcase>
        <testcase classname="src/features/stats/application/services/__tests__/EventMonitor.test.ts" name="EventMonitor &gt; getHealthStatus &gt; should return critical status for stuck events" time="0.000250792">
        </testcase>
        <testcase classname="src/features/stats/application/services/__tests__/EventMonitor.test.ts" name="EventMonitor &gt; reprocessDeadLetterEvent &gt; should reset dead letter event to pending status" time="0.000328292">
        </testcase>
        <testcase classname="src/features/stats/application/services/__tests__/EventMonitor.test.ts" name="EventMonitor &gt; reprocessDeadLetterEvent &gt; should return false if event update fails" time="0.000250208">
        </testcase>
        <testcase classname="src/features/stats/application/services/__tests__/EventMonitor.test.ts" name="EventMonitor &gt; reprocessDeadLetterEvent &gt; should handle database errors gracefully" time="0.000619625">
        </testcase>
        <testcase classname="src/features/stats/application/services/__tests__/EventMonitor.test.ts" name="EventMonitor &gt; getStatsByEventType &gt; should aggregate statistics by event type" time="0.00013075">
        </testcase>
    </testsuite>
    <testsuite name="src/features/stats/application/services/__tests__/StatisticsService.test.ts" timestamp="2025-08-09T13:38:10.907Z" hostname="MacBook-Egor.local" tests="17" failures="0" errors="0" skipped="0" time="0.016204333">
        <testcase classname="src/features/stats/application/services/__tests__/StatisticsService.test.ts" name="StatisticsService &gt; recordTaskCompletion &gt; should create new daily record when none exists" time="0.0054665">
        </testcase>
        <testcase classname="src/features/stats/application/services/__tests__/StatisticsService.test.ts" name="StatisticsService &gt; recordTaskCompletion &gt; should update existing daily record for SIMPLE task" time="0.000317875">
        </testcase>
        <testcase classname="src/features/stats/application/services/__tests__/StatisticsService.test.ts" name="StatisticsService &gt; recordTaskCompletion &gt; should update existing daily record for FOCUS task" time="0.000298375">
        </testcase>
        <testcase classname="src/features/stats/application/services/__tests__/StatisticsService.test.ts" name="StatisticsService &gt; recordTaskCompletion &gt; should not increment counters for INBOX tasks" time="0.000205417">
        </testcase>
        <testcase classname="src/features/stats/application/services/__tests__/StatisticsService.test.ts" name="StatisticsService &gt; recordInboxReview &gt; should create new daily record when none exists" time="0.000345208">
        </testcase>
        <testcase classname="src/features/stats/application/services/__tests__/StatisticsService.test.ts" name="StatisticsService &gt; recordInboxReview &gt; should update existing daily record" time="0.000182417">
        </testcase>
        <testcase classname="src/features/stats/application/services/__tests__/StatisticsService.test.ts" name="StatisticsService &gt; revertTaskCompletion &gt; should decrement SIMPLE completion count" time="0.000143666">
        </testcase>
        <testcase classname="src/features/stats/application/services/__tests__/StatisticsService.test.ts" name="StatisticsService &gt; revertTaskCompletion &gt; should not go below zero when reverting" time="0.0000925">
        </testcase>
        <testcase classname="src/features/stats/application/services/__tests__/StatisticsService.test.ts" name="StatisticsService &gt; getDailyStatistics &gt; should return existing statistics" time="0.000374125">
        </testcase>
        <testcase classname="src/features/stats/application/services/__tests__/StatisticsService.test.ts" name="StatisticsService &gt; getDailyStatistics &gt; should return zeros when no record exists" time="0.0000975">
        </testcase>
        <testcase classname="src/features/stats/application/services/__tests__/StatisticsService.test.ts" name="StatisticsService &gt; getWeeklyStatistics &gt; should aggregate statistics for ISO week" time="0.000231167">
        </testcase>
        <testcase classname="src/features/stats/application/services/__tests__/StatisticsService.test.ts" name="StatisticsService &gt; getMonthlyStatistics &gt; should aggregate statistics for calendar month" time="0.000154834">
        </testcase>
        <testcase classname="src/features/stats/application/services/__tests__/StatisticsService.test.ts" name="StatisticsService &gt; getDailyStatisticsRange &gt; should return statistics for date range with gaps filled" time="0.000157792">
        </testcase>
        <testcase classname="src/features/stats/application/services/__tests__/StatisticsService.test.ts" name="StatisticsService &gt; createNightlySnapshot &gt; should create snapshot from actual task data" time="0.000518333">
        </testcase>
        <testcase classname="src/features/stats/application/services/__tests__/StatisticsService.test.ts" name="StatisticsService &gt; createNightlySnapshot &gt; should update existing snapshot" time="0.000192292">
        </testcase>
        <testcase classname="src/features/stats/application/services/__tests__/StatisticsService.test.ts" name="StatisticsService &gt; runNightlySnapshotCatchup &gt; should create snapshots for missing days" time="0.005297542">
        </testcase>
        <testcase classname="src/features/stats/application/services/__tests__/StatisticsService.test.ts" name="StatisticsService &gt; runNightlySnapshotCatchup &gt; should handle case with no tasks" time="0.000321375">
        </testcase>
    </testsuite>
    <testsuite name="src/features/stats/presentation/components/__tests__/StatisticsView.test.tsx" timestamp="2025-08-09T13:38:10.908Z" hostname="MacBook-Egor.local" tests="12" failures="0" errors="0" skipped="0" time="0.210228667">
        <testcase classname="src/features/stats/presentation/components/__tests__/StatisticsView.test.tsx" name="StatisticsView &gt; should render statistics view with data" time="0.088237041">
            <system-err>
Warning: `ReactDOMTestUtils.act` is deprecated in favor of `React.act`. Import `act` from `react` instead of `react-dom/test-utils`. See https://react.dev/warnings/react-dom-test-utils for more info.

            </system-err>
        </testcase>
        <testcase classname="src/features/stats/presentation/components/__tests__/StatisticsView.test.tsx" name="StatisticsView &gt; should call loadStatistics and loadChartData on mount" time="0.012745834">
        </testcase>
        <testcase classname="src/features/stats/presentation/components/__tests__/StatisticsView.test.tsx" name="StatisticsView &gt; should display loading state" time="0.003326167">
        </testcase>
        <testcase classname="src/features/stats/presentation/components/__tests__/StatisticsView.test.tsx" name="StatisticsView &gt; should display error state" time="0.001446791">
        </testcase>
        <testcase classname="src/features/stats/presentation/components/__tests__/StatisticsView.test.tsx" name="StatisticsView &gt; should handle try again button click" time="0.005786375">
        </testcase>
        <testcase classname="src/features/stats/presentation/components/__tests__/StatisticsView.test.tsx" name="StatisticsView &gt; should display empty state when no data" time="0.007602541">
        </testcase>
        <testcase classname="src/features/stats/presentation/components/__tests__/StatisticsView.test.tsx" name="StatisticsView &gt; should handle navigation buttons" time="0.029074167">
        </testcase>
        <testcase classname="src/features/stats/presentation/components/__tests__/StatisticsView.test.tsx" name="StatisticsView &gt; should render stats cards when data is available" time="0.017131708">
        </testcase>
        <testcase classname="src/features/stats/presentation/components/__tests__/StatisticsView.test.tsx" name="StatisticsView &gt; should render chart when data is available" time="0.007093291">
        </testcase>
        <testcase classname="src/features/stats/presentation/components/__tests__/StatisticsView.test.tsx" name="StatisticsView &gt; period handling &gt; should display daily stats for day period" time="0.006570208">
        </testcase>
        <testcase classname="src/features/stats/presentation/components/__tests__/StatisticsView.test.tsx" name="StatisticsView &gt; period handling &gt; should display weekly stats for week period" time="0.014070708">
        </testcase>
        <testcase classname="src/features/stats/presentation/components/__tests__/StatisticsView.test.tsx" name="StatisticsView &gt; period handling &gt; should display monthly stats for month period" time="0.015946042">
        </testcase>
    </testsuite>
    <testsuite name="src/features/tasks/presentation/components/__tests__/TaskCard.test.tsx" timestamp="2025-08-09T13:38:10.909Z" hostname="MacBook-Egor.local" tests="19" failures="0" errors="0" skipped="19" time="0">
        <testcase classname="src/features/tasks/presentation/components/__tests__/TaskCard.test.tsx" name="TaskCard &gt; Basic Rendering &gt; should render task title and category" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/features/tasks/presentation/components/__tests__/TaskCard.test.tsx" name="TaskCard &gt; Basic Rendering &gt; should render task metadata" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/features/tasks/presentation/components/__tests__/TaskCard.test.tsx" name="TaskCard &gt; Basic Rendering &gt; should render action buttons" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/features/tasks/presentation/components/__tests__/TaskCard.test.tsx" name="TaskCard &gt; Log Display &gt; should show &quot;No logs yet&quot; when no lastLog provided" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/features/tasks/presentation/components/__tests__/TaskCard.test.tsx" name="TaskCard &gt; Log Display &gt; should display last log preview" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/features/tasks/presentation/components/__tests__/TaskCard.test.tsx" name="TaskCard &gt; Log Display &gt; should show different icons for different log types" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/features/tasks/presentation/components/__tests__/TaskCard.test.tsx" name="TaskCard &gt; Log Display &gt; should call onCreateLog when add log button is clicked" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/features/tasks/presentation/components/__tests__/TaskCard.test.tsx" name="TaskCard &gt; Log History &gt; should toggle log history when expand button is clicked" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/features/tasks/presentation/components/__tests__/TaskCard.test.tsx" name="TaskCard &gt; Log History &gt; should display loading state when loading logs" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/features/tasks/presentation/components/__tests__/TaskCard.test.tsx" name="TaskCard &gt; Log History &gt; should display log history when loaded" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/features/tasks/presentation/components/__tests__/TaskCard.test.tsx" name="TaskCard &gt; Log History &gt; should hide log history when hide button is clicked" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/features/tasks/presentation/components/__tests__/TaskCard.test.tsx" name="TaskCard &gt; Overdue State &gt; should show overdue indicator when task is overdue" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/features/tasks/presentation/components/__tests__/TaskCard.test.tsx" name="TaskCard &gt; Overdue State &gt; should apply overdue styling" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/features/tasks/presentation/components/__tests__/TaskCard.test.tsx" name="TaskCard &gt; Today Selection &gt; should show today button when showTodayButton is true" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/features/tasks/presentation/components/__tests__/TaskCard.test.tsx" name="TaskCard &gt; Today Selection &gt; should show different icon when task is in today selection" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/features/tasks/presentation/components/__tests__/TaskCard.test.tsx" name="TaskCard &gt; Completed State &gt; should show revert button for completed tasks" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/features/tasks/presentation/components/__tests__/TaskCard.test.tsx" name="TaskCard &gt; Completed State &gt; should apply completed styling" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/features/tasks/presentation/components/__tests__/TaskCard.test.tsx" name="TaskCard &gt; Date Formatting &gt; should format recent dates correctly" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/features/tasks/presentation/components/__tests__/TaskCard.test.tsx" name="TaskCard &gt; Date Formatting &gt; should show &quot;Just now&quot; for very recent logs" time="0">
            <skipped/>
        </testcase>
    </testsuite>
    <testsuite name="src/features/tasks/presentation/view-models/__tests__/TaskViewModel.test.ts" timestamp="2025-08-09T13:38:10.911Z" hostname="MacBook-Egor.local" tests="24" failures="0" errors="0" skipped="0" time="0.030596792">
        <testcase classname="src/features/tasks/presentation/view-models/__tests__/TaskViewModel.test.ts" name="TaskViewModel &gt; Initial State &gt; should have correct initial state" time="0.008809875">
        </testcase>
        <testcase classname="src/features/tasks/presentation/view-models/__tests__/TaskViewModel.test.ts" name="TaskViewModel &gt; loadTasks &gt; should load tasks successfully" time="0.000857709">
        </testcase>
        <testcase classname="src/features/tasks/presentation/view-models/__tests__/TaskViewModel.test.ts" name="TaskViewModel &gt; loadTasks &gt; should handle loading error" time="0.000364375">
        </testcase>
        <testcase classname="src/features/tasks/presentation/view-models/__tests__/TaskViewModel.test.ts" name="TaskViewModel &gt; loadTasks &gt; should set loading state during operation" time="0.000251875">
        </testcase>
        <testcase classname="src/features/tasks/presentation/view-models/__tests__/TaskViewModel.test.ts" name="TaskViewModel &gt; createTask &gt; should create task successfully" time="0.002047917">
        </testcase>
        <testcase classname="src/features/tasks/presentation/view-models/__tests__/TaskViewModel.test.ts" name="TaskViewModel &gt; createTask &gt; should handle creation error" time="0.000194625">
        </testcase>
        <testcase classname="src/features/tasks/presentation/view-models/__tests__/TaskViewModel.test.ts" name="TaskViewModel &gt; completeTask &gt; should complete task successfully" time="0.00034125">
        </testcase>
        <testcase classname="src/features/tasks/presentation/view-models/__tests__/TaskViewModel.test.ts" name="TaskViewModel &gt; completeTask &gt; should handle completion error" time="0.000330125">
        </testcase>
        <testcase classname="src/features/tasks/presentation/view-models/__tests__/TaskViewModel.test.ts" name="TaskViewModel &gt; updateTask &gt; should update task successfully" time="0.001359833">
        </testcase>
        <testcase classname="src/features/tasks/presentation/view-models/__tests__/TaskViewModel.test.ts" name="TaskViewModel &gt; Computed Properties &gt; getFilteredTasks &gt; should return all active tasks when no filter is applied" time="0.001042166">
        </testcase>
        <testcase classname="src/features/tasks/presentation/view-models/__tests__/TaskViewModel.test.ts" name="TaskViewModel &gt; Computed Properties &gt; getFilteredTasks &gt; should filter by category" time="0.000498584">
        </testcase>
        <testcase classname="src/features/tasks/presentation/view-models/__tests__/TaskViewModel.test.ts" name="TaskViewModel &gt; Computed Properties &gt; getFilteredTasks &gt; should filter by status" time="0.00042925">
        </testcase>
        <testcase classname="src/features/tasks/presentation/view-models/__tests__/TaskViewModel.test.ts" name="TaskViewModel &gt; Computed Properties &gt; getFilteredTasks &gt; should filter overdue tasks" time="0.003034334">
        </testcase>
        <testcase classname="src/features/tasks/presentation/view-models/__tests__/TaskViewModel.test.ts" name="TaskViewModel &gt; Computed Properties &gt; getTasksByCategory &gt; should group active tasks by category" time="0.000401083">
        </testcase>
        <testcase classname="src/features/tasks/presentation/view-models/__tests__/TaskViewModel.test.ts" name="TaskViewModel &gt; Computed Properties &gt; getOverdueTasks &gt; should return overdue inbox tasks" time="0.000297625">
        </testcase>
        <testcase classname="src/features/tasks/presentation/view-models/__tests__/TaskViewModel.test.ts" name="TaskViewModel &gt; Computed Properties &gt; getOverdueTasks &gt; should respect overdueDays setting" time="0.001280333">
        </testcase>
        <testcase classname="src/features/tasks/presentation/view-models/__tests__/TaskViewModel.test.ts" name="TaskViewModel &gt; Computed Properties &gt; getOverdueCount &gt; should return count of overdue tasks" time="0.001255291">
        </testcase>
        <testcase classname="src/features/tasks/presentation/view-models/__tests__/TaskViewModel.test.ts" name="TaskViewModel &gt; Filter Management &gt; should set filter correctly" time="0.000243875">
        </testcase>
        <testcase classname="src/features/tasks/presentation/view-models/__tests__/TaskViewModel.test.ts" name="TaskViewModel &gt; Filter Management &gt; should set overdue days correctly" time="0.000423833">
        </testcase>
        <testcase classname="src/features/tasks/presentation/view-models/__tests__/TaskViewModel.test.ts" name="TaskViewModel &gt; Error Management &gt; should clear error" time="0.000310666">
        </testcase>
        <testcase classname="src/features/tasks/presentation/view-models/__tests__/TaskViewModel.test.ts" name="TaskViewModel &gt; deleteTask &gt; should delete task successfully" time="0.000420458">
        </testcase>
        <testcase classname="src/features/tasks/presentation/view-models/__tests__/TaskViewModel.test.ts" name="TaskViewModel &gt; deleteTask &gt; should handle delete error when task not found" time="0.000359709">
        </testcase>
        <testcase classname="src/features/tasks/presentation/view-models/__tests__/TaskViewModel.test.ts" name="TaskViewModel &gt; getTodayTaskIds &gt; should return today task ids successfully" time="0.000478291">
        </testcase>
        <testcase classname="src/features/tasks/presentation/view-models/__tests__/TaskViewModel.test.ts" name="TaskViewModel &gt; getTodayTaskIds &gt; should handle error when getting today task ids" time="0.00010125">
        </testcase>
    </testsuite>
    <testsuite name="src/features/tasks/presentation/hooks/__tests__/useTaskNote.test.tsx" timestamp="2025-08-09T13:38:10.913Z" hostname="MacBook-Egor.local" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/features/tasks/presentation/hooks/__tests__/useTaskNote.test.tsx" name="src/features/tasks/presentation/hooks/__tests__/useTaskNote.test.tsx" time="0">
            <failure message="Failed to resolve import &quot;../../../../test/utils/testHelpers&quot; from &quot;src/features/tasks/presentation/hooks/__tests__/useTaskNote.test.tsx&quot;. Does the file exist?" type="Error">
Error: Failed to resolve import &quot;../../../../test/utils/testHelpers&quot; from &quot;src/features/tasks/presentation/hooks/__tests__/useTaskNote.test.tsx&quot;. Does the file exist?
  Plugin: vite:import-analysis
  File: /Users/esmirnov/projects/lift-v2/src/features/tasks/presentation/hooks/__tests__/useTaskNote.test.tsx:5:0
  6  |  const __vi_import_0__ = await import(&quot;@testing-library/react&quot;);
  7  |  const __vi_import_1__ = await import(&quot;../useTaskNote&quot;);
  8  |  const __vi_import_2__ = await import(&quot;../../../../test/utils/testHelpers&quot;);
     |                                       ^
  9  |  
  10 |  import { describe, it, expect, vi, beforeEach } from &quot;vitest&quot;;
 ❯ TransformPluginContext._formatLog node_modules/vitest/node_modules/vite/dist/node/chunks/dep-eRCq8YxU.js:31645:43
 ❯ TransformPluginContext.error node_modules/vitest/node_modules/vite/dist/node/chunks/dep-eRCq8YxU.js:31642:14
 ❯ normalizeUrl node_modules/vitest/node_modules/vite/dist/node/chunks/dep-eRCq8YxU.js:30114:18
 ❯ node_modules/vitest/node_modules/vite/dist/node/chunks/dep-eRCq8YxU.js:30172:32
 ❯ TransformPluginContext.transform node_modules/vitest/node_modules/vite/dist/node/chunks/dep-eRCq8YxU.js:30140:4
 ❯ EnvironmentPluginContainer.transform node_modules/vitest/node_modules/vite/dist/node/chunks/dep-eRCq8YxU.js:31443:14
 ❯ loadAndTransform node_modules/vitest/node_modules/vite/dist/node/chunks/dep-eRCq8YxU.js:26530:26
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/features/today/presentation/view-models/__tests__/TodayViewModel.test.ts" timestamp="2025-08-09T13:38:10.913Z" hostname="MacBook-Egor.local" tests="16" failures="0" errors="0" skipped="0" time="0.015420375">
        <testcase classname="src/features/today/presentation/view-models/__tests__/TodayViewModel.test.ts" name="TodayViewModel &gt; Initial State &gt; should have correct initial state" time="0.003106875">
            <system-out>
create today

            </system-out>
        </testcase>
        <testcase classname="src/features/today/presentation/view-models/__tests__/TodayViewModel.test.ts" name="TodayViewModel &gt; loadTodayTasks &gt; should load today&apos;s tasks successfully" time="0.001952334">
            <system-out>
create today

            </system-out>
        </testcase>
        <testcase classname="src/features/today/presentation/view-models/__tests__/TodayViewModel.test.ts" name="TodayViewModel &gt; loadTodayTasks &gt; should handle loading error" time="0.000803458">
            <system-out>
create today

            </system-out>
        </testcase>
        <testcase classname="src/features/today/presentation/view-models/__tests__/TodayViewModel.test.ts" name="TodayViewModel &gt; loadTodayTasks &gt; should set loading state during operation" time="0.000715041">
            <system-out>
create today

            </system-out>
        </testcase>
        <testcase classname="src/features/today/presentation/view-models/__tests__/TodayViewModel.test.ts" name="TodayViewModel &gt; addTaskToToday &gt; should add task to today successfully" time="0.003181167">
            <system-out>
create today

            </system-out>
        </testcase>
        <testcase classname="src/features/today/presentation/view-models/__tests__/TodayViewModel.test.ts" name="TodayViewModel &gt; addTaskToToday &gt; should handle add task error" time="0.000370041">
            <system-out>
create today

            </system-out>
        </testcase>
        <testcase classname="src/features/today/presentation/view-models/__tests__/TodayViewModel.test.ts" name="TodayViewModel &gt; removeTaskFromToday &gt; should remove task from today successfully" time="0.00041125">
            <system-out>
create today

            </system-out>
        </testcase>
        <testcase classname="src/features/today/presentation/view-models/__tests__/TodayViewModel.test.ts" name="TodayViewModel &gt; removeTaskFromToday &gt; should handle remove task error" time="0.000231958">
            <system-out>
create today

            </system-out>
        </testcase>
        <testcase classname="src/features/today/presentation/view-models/__tests__/TodayViewModel.test.ts" name="TodayViewModel &gt; completeTask &gt; should complete task successfully" time="0.000809125">
            <system-out>
create today

            </system-out>
        </testcase>
        <testcase classname="src/features/today/presentation/view-models/__tests__/TodayViewModel.test.ts" name="TodayViewModel &gt; completeTask &gt; should handle complete task error" time="0.000195375">
            <system-out>
create today

            </system-out>
        </testcase>
        <testcase classname="src/features/today/presentation/view-models/__tests__/TodayViewModel.test.ts" name="TodayViewModel &gt; Computed Properties &gt; getActiveTasks &gt; should return active tasks that are not completed in selection" time="0.000647709">
            <system-out>
create today

            </system-out>
        </testcase>
        <testcase classname="src/features/today/presentation/view-models/__tests__/TodayViewModel.test.ts" name="TodayViewModel &gt; Computed Properties &gt; getCompletedTasks &gt; should return tasks that are completed in selection or completed in general" time="0.000390541">
            <system-out>
create today

            </system-out>
        </testcase>
        <testcase classname="src/features/today/presentation/view-models/__tests__/TodayViewModel.test.ts" name="TodayViewModel &gt; Computed Properties &gt; isToday &gt; should return true when current date is today" time="0.000243791">
            <system-out>
create today

            </system-out>
        </testcase>
        <testcase classname="src/features/today/presentation/view-models/__tests__/TodayViewModel.test.ts" name="TodayViewModel &gt; Computed Properties &gt; isToday &gt; should return false when current date is not today" time="0.00022575">
            <system-out>
create today

            </system-out>
        </testcase>
        <testcase classname="src/features/today/presentation/view-models/__tests__/TodayViewModel.test.ts" name="TodayViewModel &gt; Error Management &gt; should clear error" time="0.000101375">
            <system-out>
create today

            </system-out>
        </testcase>
        <testcase classname="src/features/today/presentation/view-models/__tests__/TodayViewModel.test.ts" name="TodayViewModel &gt; refreshToday &gt; should reload today&apos;s tasks" time="0.000257041">
            <system-out>
create today

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/features/today/presentation/components/__tests__/TodayView.test.tsx" timestamp="2025-08-09T13:38:10.915Z" hostname="MacBook-Egor.local" tests="8" failures="0" errors="0" skipped="8" time="0">
        <testcase classname="src/features/today/presentation/components/__tests__/TodayView.test.tsx" name="TodayView &gt; should render empty state when no tasks are selected" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/features/today/presentation/components/__tests__/TodayView.test.tsx" name="TodayView &gt; should render tasks when they are loaded" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/features/today/presentation/components/__tests__/TodayView.test.tsx" name="TodayView &gt; should show loading state" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/features/today/presentation/components/__tests__/TodayView.test.tsx" name="TodayView &gt; should show error state" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/features/today/presentation/components/__tests__/TodayView.test.tsx" name="TodayView &gt; should display correct stats" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/features/today/presentation/components/__tests__/TodayView.test.tsx" name="TodayView &gt; should show progress bar when there are tasks" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/features/today/presentation/components/__tests__/TodayView.test.tsx" name="TodayView &gt; should handle task removal from today selection" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/features/today/presentation/components/__tests__/TodayView.test.tsx" name="TodayView &gt; should show tasks with correct today selection state" time="0">
            <skipped/>
        </testcase>
    </testsuite>
</testsuites>
